<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SD.LLBLGen.Pro.QuerySpec</name>
    </assembly>
    <members>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods">
            <summary>
            Extension methods to make query execution possible on Adapter.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQuery``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Fetches the query specified on the adapter specified. Uses the TEntity type to produce an EntityCollection(Of TEntity) for the results to return
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>EntityCollection(Of TEntity) with the results of the query fetch</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQuery``2(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},``1)">
            <summary>
            Fetches the query specified on the adapter specified into the collectionToFill specified. 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <param name="collectionToFill">The collection to fill.</param>
            <returns>collectionToFill, filled with the query fetch results.</returns>
            <remarks>Equal to calling adapter.FetchEntityCollection(), so entities already present in collectionToFill are left as-is.
            If the fetch has to take into account a Context, the passed collectionToFill has to be assigned to the context before calling this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchFirst``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Fetches the first entity of the set returned by the query and returns that entity, if any, otherwise null.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>the first entity in the resultset, or null if the resultset is empty.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchFirst``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Fetches the first object of the set returned by the query and returns that object, if any, otherwise null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>
            the first object in the resultset, or null if the resultset is empty.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchSingle``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Fetches the single entity of the set returned by the query and returns that entity. If there are no elements or more than 1 element, 
            a NotSupportedException will be thrown. 
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>the first entity in the resultset</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the resultset has 0 or 2 or more elements, as Single requires a single value in the resultset.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchSingle``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Fetches the single object of the set returned by the query and returns that object. If there are no elements or more than 1 element,
            a NotSupportedException will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>the first object in the resultset</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the resultset has 0 or 2 or more elements, as Single requires a single value in the resultset.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchScalar``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches a scalar value using the query specified, and returns this value typed as TValue, using a cast. The query specified will be converted to a
            scalar query prior to execution.
            </summary>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>the value to fetch</returns>
            <remarks>Use nullable(Of T) for scalars which are a value type, to avoid crashes when the scalar query returns a NULL value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQuery(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches the query specified and returns the results in plain object arrays, one object array per returned row of the query specified.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQuery``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Fetches the query specified and returns the results in a list of TElement objects, which are created using the projectorFunc of the query specified.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches the specified query into a new DataTable specified and returns that datatable.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>a new DataTable with the data fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Data.DataTable)">
            <summary>
            Fetches the specified query into the DataTable specified and returns that datatable.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <param name="destination">The destination datatable to fetch the data into.</param>
            <returns>the destination datatable specified.</returns>
            <remarks>If the DataTable specified already has columns defined, they have to have compatible types and have to be in the same order as the
            columns in the resultset of the query. It's recommended to have columns with the same names as the resultset of the query, to be able to 
            convert null values to DBNull.Value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQuery``1(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal,``0)">
            <summary>
            Fetches the query specified on the adapter specified into the collectionToFill specified.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <param name="collectionToFill">The collection to fill.</param>
            <returns>
            collectionToFill, filled with the query fetch results.
            </returns>
            <remarks>Equal to calling adapter.FetchEntityCollection(), so entities already present in collectionToFill are left as-is.
            If the fetch has to take into account a Context, the passed collectionToFill has to be assigned to the context before calling this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQuery(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal)">
            <summary>
            Fetches the query specified on the adapter specified. Uses the TEntity type to produce an EntityCollection(Of TEntity) for the results to return
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns>
            EntityCollection(Of TEntity) with the results of the query fetch
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQueryAsProjection(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector)">
            <summary>
            Fetches the query as projection, using the projector specified.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <param name="projector">The projector.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Adapter.AdapterExtensionMethods.FetchQueryAsHierarchicalProjection(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches the query as hierarchical projection, while keeping open the adapter's connection.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherAdapter">
            <summary>
            Class which controls a hierarchical fetch of a dynamic query. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherBase">
            <summary>
            Base class for a hierarchical fetch controller. Each template group has a specific hierarchical fetch controller.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherBase.MaterializeCurrentLevelData(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Collections.Generic.List{System.Object[]})">
            <summary>
            Materializes the current level data into objects and returns them in an Ilist. Data is stored in the target of the projector passed in.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector.</param>
            <param name="currentLevelData">The current level data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherBase.CreateContainerAndProjector(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Collections.IList@,SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector@)">
            <summary>
            Creates the container and projector to use for materialization.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="resultsContainer">The results container.</param>
            <param name="projector">The projector.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherBase.ProduceNestedQueryAdditionalFilter(System.Collections.Generic.List{System.Object[]},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification,System.Int32)">
            <summary>
            Produces the additional filter for the nested query so the nested query's results are filtered on the current level's results so only the results
            which possibly match a fetched element on the current level are retrieved.
            </summary>
            <param name="currentLevelData">The current level data.</param>
            <param name="currentLevelFilter">The current level filter, used to fetch the current level data.</param>
            <param name="currentLevelRelations">The current level relations.</param>
            <param name="nestedQuery">The nested query.</param>
            <param name="parameterizedPrefetchPathThreshold">The parameterized prefetch path threshold.</param>
            <returns>the filter to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherBase.DetermineDifferentValuesForNestedQueryFilter(System.Collections.Generic.List{System.Object[]},SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification)">
            <summary>
            Determines the different values for nested query filter. This set of values is then used to build a parameterized query if possible.
            </summary>
            <param name="currentLevelData">The current level data.</param>
            <param name="nestedQuery">The nested query.</param>
            <returns>list of different values, per row in currentLevelData. It uses a string-based key where the values are stored as strings to
            avoid complex hashing algorithms to match duplicates.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherAdapter.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherAdapter"/> class.
            </summary>
            <param name="adapterToUse">The adapter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherAdapter.ExecuteHierarchicalValueListProjection(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Executes a hierarchical value list projection. It's assumed that toExecute is a query which has 1 or more nested queries in the projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="additionalFilter">The additional filter to use. This filter is used in fetching the data of this level. This filter is
            normally a filter based on the parent's filter/data. Is null if this is the first level/call.</param>
            <returns>result of projection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherAdapter.ProduceNestedQueryAdditionalFilter(System.Collections.Generic.List{System.Object[]},SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification)">
            <summary>
            Produces the additional filter for the nested query so the nested query's results are filtered on the current level's results so only the results
            which possibly match a fetched element on the current level are retrieved.
            </summary>
            <param name="currentLevelData">The current level data.</param>
            <param name="currentLevelFilter">The current level filter, used to fetch the current level data.</param>
            <param name="nestedQuery">The nested query.</param>
            <returns>the filter to use</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.BlockFactory">
            <summary>
            Simple factory class which creates templategroup specific objects
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BlockFactory.CreateExpressionField(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Creates a new expression containing entity field.
            </summary>
            <param name="name">The name.</param>
            <param name="toWrap">To wrap.</param>
            <param name="resultType">Type of the result.</param>
            <param name="creator">The creator.</param>
            <returns>entity field with the name and type specified which wraps the specified expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BlockFactory.CreateExpressionField(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a new field (adapter version, it's a carrier anyway, so this will work for selfservicing anyway), which wraps the expression specified
            using the generic name 'ExF'
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BlockFactory.CreateExpressionField(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a new field (adapter version, it's a carrier anyway, so this will work for selfservicing anyway), which wraps the expression specified
            using the name specified. 
            </summary>
            <param name="name">The name.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1">
            <summary>
            Generic variant of DynamicQuery, created using the method DynamicQuery.WithProjector(), which defines a typed projector for the DynamicQuery class, or
            by using DynamicQuery.Select(lambda) or EntityQuery(Of T).Select(lambda). 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.DynamicQuery">
            <summary>
            Dynamic query, for fetching a custom projection of entity data.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.QuerySpec">
            <summary>
            Abstract base class for all query specification classes.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IJoinOperand">
            <summary>
            Interface which defines an operand which can participate in a join definition (as left or right side).
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IJoinOperand.Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IJoinOperand.ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>Either a FullEntityName or a DerivedTableDefinition.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IQuerySpec">
            <summary>
            Simple interface for accessing a QuerySpec object's internal elements for further manipulation (in case of objects) or analysis.
            </summary>
            <remarks>Be sure to access the elements after the query has been prepared for execution.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.ResultsetType">
            <summary>
            Gets the type of the resultset. For DynamicQuery instances this is List&lt;object&gt;, for DynamicQuery&lt;T&gt; this is List&lt;T&gt;, and for
            EntityQuery&lt;T&gt;, this is either an IEntityCollection or IEntityCollection2 created for the type T.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.TargetAlias">
            <summary>
            Gets the target alias.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.WhereClause">
            <summary>
            Gets the prepared where clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.FromClause">
            <summary>
            Gets the from clause, which is the prepared from clause, created from the raw clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.OrderByClause">
            <summary>
            Gets the prepared order by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.GroupByClause">
            <summary>
            Gets the prepared group by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.Limit">
            <summary>
            Gets the limit value specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.PageNumber">
            <summary>
            Gets the page number as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.PageSize">
            <summary>
            Gets the size of the page as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.AllowDuplicates">
            <summary>
            Gets AllowDuplicates (default is true, if Distinct() is specified, this value is false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.CustomFunctionMappingStore">
            <summary>
            Gets the optional custom function mapping store. A custom function mapping store takes precedence over the function mapping store 
            obtained from the Dynamic Query Engine (DQE) used for producing the SQL for the query. If a custom function mapping store is needed for a query,
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.NestedQueries">
            <summary>
            Gets the nested queries defined for this query. By default this is an empty list, and only filled with nested queries if this query is a dynamic query
            and it contains one or more nested	queries
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IQuerySpec.ResultsetElementType">
            <summary>
            Gets the type of the resultset element.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.QuerySpec"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="aliasCounter">The alias counter to produce an artifical, yet predictable, alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.QuerySpec"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="alias">The alias.</param>
            <param name="aliasCounter">The alias counter to produce an artifical, yet predictable, alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.#ctor(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.QuerySpec"/> class. Copy ctor
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="startIndent">The start indent.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetPrefetchPathAsString(System.Int32)">
            <summary>
            Gets the prefetch path as string.
            </summary>
            <param name="startIndent">The start indent.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetAdditionalInfoAsString(System.Int32)">
            <summary>
            Gets the additional info as string. For ToString().
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetOrderByAsString(System.Int32)">
            <summary>
            Gets the order by as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetHavingAsString(System.Int32)">
            <summary>
            Gets the having as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetGroupByAsString(System.Int32)">
            <summary>
            Gets the group by as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetWhereAsString(System.Int32)">
            <summary>
            Gets the where as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetFromAsString(System.Int32)">
            <summary>
            Gets from as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetProjectionAsString(System.Int32)">
            <summary>
            Gets the projection as string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.Field(System.String)">
            <summary>
            Creates a field which targets the projection of this query. Use this to easily create a derived table targeting field which targets this query.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetFromAndWhereAsRelationPredicateBucket">
            <summary>
            Converts the from + where clause into a relationpredicatebucket.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetGroupByClause(System.Object[])">
            <summary>
            Specifies the group by clause. All fields specified are the ones to group on.
            </summary>
            <param name="fieldsToGroupOn">The fields to group on.</param>
            <returns>this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetHavingClause(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Sets the having clause.
            </summary>
            <param name="havingPredicate">The having predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetFromClause(SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Appends the clause specified to the from clauses list
            </summary>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AppendToSortClause(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Appends the sort clause to the sort expression
            </summary>
            <param name="sortClause">The sort clause.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AppendToWhereClauseWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Appends the predicate with And to the existing where clause.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AppendToWhereClauseWithOr(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Appends the predicate with And to the existing where clause.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetLimit(System.Int32)">
            <summary>
            Sets the limit, where 0 is unlimited and a higher number than 0 specifies the number of elements to retrieve.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetLimitForced(System.Int32)">
            <summary>
            Sets the limit, forced, without marking this query as unprepared. Used in hierarchical fetches.
            </summary>
            <param name="limit">The limit.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetPagingData(System.Int32,System.Int32)">
            <summary>
            Sets the paging data
            </summary>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetDistinct">
            <summary>
            Sets the distinct flag, so AllowDuplicates will be set to false.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CloneAsDynamicQuery">
            <summary>Clones this instance as a dynamic query. Does a shallow clone, </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CoerceToAggregatedScalar(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Coerces this query to a scalar query with a new default field which is aggregated using the aggregate specified.
            </summary>
            <param name="function">The function.</param>
            <returns>ready to use scalar query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CoerceToAggregatedScalar(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Coerces this query to a scalar query with the field specified, aggregated using the aggregate specified.
            </summary>
            <param name="function">The function.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns>ready to use scalar query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CoerceToAggregatedScalar(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Coerces this query to a scalar query with the expression specified as its value to aggregate, aggregated using the aggregate specified.
            </summary>
            <param name="function">The function.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns>ready to use scalar query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetSourceAliases">
            <summary>
            Finds the source aliases. Aliases are stored in SourceAliasesForQuery
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetAllActualObjectNamesFromProjection">
            <summary>
            Gets all actual object names from projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetCorrelationPredicatesForNestedQuery">
            <summary>
            Gets the correlation predicates for nested query processing as a list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.DetermineIfDerivedTableIsTargetInFieldCompareSetPredicate">
            <summary>
            Determines if the derived table variant of this query is the target when this query is used as the target of a field compare set predicate.
            Only true if query is an entity query and entity is an inheritance entity of TargetPerEntity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CoerceToScalarQuery(System.Boolean)">
            <summary>
            Coerces this query to a scalar query expression
            </summary>
            <param name="wrapInDerivedTable">if set to <c>true</c> it will wrap the query in a derived table, otherwise it will simply use the first
            field of the projection as the select field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.DetermineIfWrappingAsDerivedTableIsRequiredForScalarQuery">
            <summary>
            Determines if wrapping as derived table is required for scalar query. This overload looks at the prepared elements, and if a wrapping is required
            it will return true, otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.DetermineIfWrappingAsDerivedTableIsRequiredForScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Determines if wrapping as derived table is required for scalar query.
            </summary>
            <param name="functionToApply">The function to apply.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AddFieldToProjectionIfNotPresent(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Adds the field to projection if not present already. Uses field alias checks. If this query is an entity query, it won't add any fields, only 
            verify whether the field is present. 
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <returns>index of the field in the projection.</returns>
            <remarks>assumes fieldToCheck has already been cloned</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ToDerivedTable">
            <summary>
            Converts this instance to a derived table definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>Either a FullEntityName or a DerivedTableDefinition.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetThisAsEmptyClone(System.String)">
            <summary>
            Gets the this as empty clone.
            </summary>
            <param name="targetAliasSpecified">The target alias specified.</param>
            <returns>
            this query as a new empty clone of itself.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetAllFieldsFromProjection">
            <summary>
            Gets all fields from projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.DetermineResultsetType">
            <summary>
            Determines the type of the resultset. This type is used to build resultset instances for hierarchy fetches.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetProjectionAsEntityFields">
            <summary>
            Gets the projection as EntityFields object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GetProjectionAsEntityFields2">
            <summary>
            Gets the projection as EntityFields2 object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.PrepareForExecution(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Prepares this query for execution.
            </summary>
            <param name="dqeMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.RaiseQueryTargetUsageExceptionIfApplicable">
            <summary>
            Raises an exception if a QueryTarget was used in a query type which wasn't suitable for that. By default it does this
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AssureAlias">
            <summary>
            Assures that the query has a proper alias. This is necessary for derived table generation, as derived tables need an alias. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>true if this query is empty, i.e. no element is set that forces this query to become a derived table/full query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetCorrelationPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Sets the correlation predicate.
            </summary>
            <param name="correlationFilter">The correlation filter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetTargetAlias(System.String)">
            <summary>
            Sets the target alias.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AddAsRelation(SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.Prepare">
            <summary>
            Prepares the contents of this query to be executed. 
            </summary>
            <remarks>Sets IsPrepared to true.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AppendToPreparedWhereClauseWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Appends the predicate with And to the prepared where clause. Only used for appending additional filters to specified filters. 
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.MarkAsNotPrepared">
            <summary>
            Makes this query as being not prepared so it will be re-prepared the next time Prepare() is called. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.MarkAsPrepared">
            <summary>
            Marks as prepared.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ReplacePlaceHolders">
            <summary>
            Replaces the EntityQueryPlaceHolder objects with this instance
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.DetermineRealTargetAliasToUse">
            <summary>
            Determines the real target alias to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.OnPreparedForExecution">
            <summary>
            Called when PrepareForExecution has been completed successfully. Calls the lambda set in OnPrepareForExecutionCallBack, if set.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AssurePresentPredicateExpression">
            <summary>
            Assures the present predicate expression.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.PrepareGroupBy">
            <summary>
            Prepares the group by.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.PrepareWhereClause">
            <summary>
            Prepares the where clause from the raw where clause specified in this query.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.PrepareFromClause">
            <summary>
            Prepares the from clause from the raw from clause specified in this query
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ReplacePlaceHolders(SD.LLBLGen.Pro.QuerySpec.IJoin)">
            <summary>
            Replaces the place holders.
            </summary>
            <param name="join">The join.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AssureSelectFieldInScalarQueryExpression(SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression)">
            <summary>
            Assures that the select field in scalar query expression is set to a valid field 
            </summary>
            <param name="toReturn">To return.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SetupScalarSelectField(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression)">
            <summary>
            Setups the scalar select field in the scalar query specified.
            </summary>
            <param name="function">The function.</param>
            <param name="toUpdate">To update.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>Either a FullEntityName or a DerivedTableDefinition.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#ResultsetType">
            <summary>
            Gets the type of the resultset. For DynamicQuery instances this is List&lt;object&gt;, for DynamicQuery&lt;T&gt; this is List&lt;T&gt;, and for
            EntityQuery&lt;T&gt;, this is either an IEntityCollection or IEntityCollection2 created for the type T.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#TargetAlias">
            <summary>
            Gets the target alias.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#WhereClause">
            <summary>
            Gets the prepared where clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#FromClause">
            <summary>
            Gets the from clause, which is the prepared from clause, created from the raw clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#OrderByClause">
            <summary>
            Gets the prepared order by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#GroupByClause">
            <summary>
            Gets the prepared group by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#Limit">
            <summary>
            Gets the limit value specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#PageNumber">
            <summary>
            Gets the page number as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#PageSize">
            <summary>
            Gets the size of the page as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#AllowDuplicates">
            <summary>
            Gets AllowDuplicates (default is true, if Distinct() is specified, this value is false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#CustomFunctionMappingStore">
            <summary>
            Gets the optional custom function mapping store. A custom function mapping store takes precedence over the function mapping store
            obtained from the Dynamic Query Engine (DQE) used for producing the SQL for the query. If a custom function mapping store is needed for a query,
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#NestedQueries">
            <summary>
            Gets the nested queries defined for this query. By default this is an empty list, and only filled with nested queries if this query is a dynamic query
            and it contains one or more nested	queries
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.SD#LLBLGen#Pro#QuerySpec#IQuerySpec#ResultsetElementType">
            <summary>
            Gets the type of the resultset element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ResultsetType">
            <summary>
            Gets the type of the resultset. For DynamicQuery instances this is List&lt;object&gt;, for DynamicQuery&lt;T&gt; this is List&lt;T&gt;, and for
            EntityQuery&lt;T&gt;, this is either an IEntityCollection or IEntityCollection2 created for the type T.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CorrelationFilter">
            <summary>
            Gets the correlation filter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.IsPrepared">
            <summary>
            Gets a value indicating whether this instance is prepared.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.UseAliasForOuterAliasOnly">
            <summary>
            Gets or sets a value indicating whether the 'Alias' value should be used only for the query's alias (true) or for target aliasing as well if
            there's no target alias set (false, default). Set to true when the query is converted to a derived table. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.TargetAlias">
            <summary>
            Gets the target alias.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.Creator">
            <summary>
            Gets the creator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.WhereClause">
            <summary>
            Gets the prepared where clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.FromClause">
            <summary>
            Gets the from clause, which is the prepared from clause, created from the raw clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.OrderByClause">
            <summary>
            Gets the prepared order by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.GroupByClause">
            <summary>
            Gets the prepared group by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.Limit">
            <summary>
            Gets the limit value specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.PageNumber">
            <summary>
            Gets the page number as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.PageSize">
            <summary>
            Gets the size of the page as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.AllowDuplicates">
            <summary>
            Gets AllowDuplicates (default is true, if Distinct() is specified, this value is false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.CustomFunctionMappingStore">
            <summary>
            Gets or sets the optional custom function mapping store. A custom function mapping store takes precedence over the function mapping store 
            obtained from the Dynamic Query Engine (DQE) used for producing the SQL for the query. If a custom function mapping store is needed for a query,
            set this property only on the query object passed to the execution method. No need to set it on inner query objects.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.NestedQueries">
            <summary>
            Gets the nested queries defined for this query. By default this is an empty list, and only filled with nested queries if this query is a dynamic query
            and it contains one or more nested	queries
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.ResultsetElementType">
            <summary>
            Gets the type of the resultset element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.QuerySpec.OnPrepareForExecutionCallBack">
            <summary>
            Gets or sets the call back lambda which is called after this query has been prepared for execution. Use this method to tap into the 
            execution chain to do last-minute query object manipulation / inspection prior to the actual fetch action. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IDynamicQuery">
            <summary>
            Simple interface for accessing a DynamicQuery object's internal elements for further manipulation (in case of objects) or analysis.
            </summary>
            <remarks>Be sure to access the elements after the query has been prepared for execution.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IDynamicQuery.Projection">
            <summary>
            Gets the prepared projection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DynamicQuery"/> class.
            </summary>
            <param name="creator"></param>
            <param name="aliasCounter">The alias counter to produce an artifical, yet predictable, alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DynamicQuery"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="alias">The alias.</param>
            <param name="aliasCounter">The alias counter to produce an artifical, yet predictable, alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.#ctor(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DynamicQuery"/> class. Copy ctor.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.WithProjector``1(SD.LLBLGen.Pro.QuerySpec.ProjectionRowDelegate{``0})">
            <summary>
            Specifies the projector delegate/func which will be used to produce typed instances for each row returned by the query.
            </summary>
            <typeparam name="T">the type of the element which will be instantiated for each row returned by the query</typeparam>
            <param name="projectorFunc">The projector func, which will be used to produce a new instance of T for each row (in ProjectionRow) returned by the
            query.</param>
            <returns>This query converted as a DynamicQuery&lt;T&gt;</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.SetProjectionClause(System.Object[])">
            <summary>
            Specifies the projection of the query. It clears any existing projection and sets the projection to the one specified. 
            </summary>
            <param name="projectionElements">The projection elements. Can't be empty</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.SetProjectionClause(SD.LLBLGen.Pro.QuerySpec.Projection)">
            <summary>
            Specifies the projection of the query. It clears any existing projection and sets the projection to the one specified.
            </summary>
            <param name="newProjection">The new projection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectionAsFields">
            <summary>
            Gets the projection as fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetAllProjectionFieldNames">
            <summary>
            Gets all projection field names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.WrapQueryWithExistAndFieldFieldFilter(System.String,System.String)">
            <summary>
            Wraps this query with EXISTS and a Field-Field filter, so the returned predicate looks like EXISTS (query) AND parentq.Field1 = query.Field1 AND..
            </summary>
            <param name="callingMethodNameForException">The calling method name for exception.</param>
            <param name="parentQueryAlias">The parent query alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.Preprocess(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Preprocesses the specified main function mappings.
            </summary>
            <param name="dqeFunctionMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectionAsEntityFields">
            <summary>
            Gets the projection as EntityFields object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectionAsEntityFields2">
            <summary>
            Gets the projection as EntityFields2 object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectionAsString(System.Int32)">
            <summary>
            Gets the projection as string.
            </summary>
            <param name="startIndent"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectionAsProjectorsList">
            <summary>
            Gets the prepared projection as a list of datavalue projectors, which are directly usable for creating projection using the framework
            </summary>
            <returns>list of ready to use datavalue projectors or null if the projection hasn't been prepared</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectionNameToIndexMap">
            <summary>
            Gets the projection name to index map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetProjectorFunc">
            <summary>
            Gets the projector func to use for projections, so instantes of real types can be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.PrepareForExecution(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Prepares this query for execution.
            </summary>
            <param name="dqeMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.CopyProjection(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Copies the projection from source to this query. It overwrites the projection of this query with fields which target their equivalent in the source's
            projection. 
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.ToDerivedTable">
            <summary>
            Converts this instance to a derived table definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.Prepare">
            <summary>
            Prepares the contents of this query to be executed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.AddFieldToProjectionIfNotPresent(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Adds the field to projection if not present already. Uses field alias checks. If this query is an entity query, it won't add any fields, only
            verify whether the field is present.
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <returns>index of the field in the projection.</returns>
            <remarks>assumes fieldToCheck has already been cloned</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
            true if this query is empty, i.e. no element is set that forces this query to become a derived table/full query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetAllFieldsFromProjection">
            <summary>
            Gets all fields from projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.MarkAsNotPrepared">
            <summary>
            Makes this query as being not prepared so it will be re-prepared the next time Prepare() is called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>
            Either a FullEntityName or a DerivedTableDefinition.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.DetermineResultsetType">
            <summary>
            Determines the type of the resultset. This type is used to build resultset instances for hierarchy fetches.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.GetThisAsEmptyClone(System.String)">
            <summary>
            Gets the this as empty clone.
            </summary>
            <param name="targetAliasSpecified">The target alias specified.</param>
            <returns>
            this query as a new empty clone of itself.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.DetermineIfWrappingAsDerivedTableIsRequiredForScalarQuery">
            <summary>
            Determines if wrapping as derived table is required for scalar query. This overload looks at the prepared elements, and if a wrapping is required
            it will return true, otherwise false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.PrepareProjection">
            <summary>
            Prepares the projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.SD#LLBLGen#Pro#QuerySpec#IDynamicQuery#Projection">
            <summary>
            Gets the prepared projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.Projection">
            <summary>
            Gets the prepared projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.DynamicQuery.NestedQueries">
            <summary>
            Gets the nested queries.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1.#ctor(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.QuerySpec.ProjectionRowDelegate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1"/> class.
            </summary>
            <param name="source">The source of the data to store in this query.</param>
            <param name="projectorFunc">The projector func.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1.DetermineResultsetType">
            <summary>
            Determines the type of the resultset. This type is used to build resultset instances for hierarchy fetches.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1.GetProjectorFunc">
            <summary>
            Gets the projector func to use for projections, so instantes of real types can be created
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1.ProjectorFunc">
            <summary>
            Gets the projector func.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.DynamicQuery`1.ResultsetElementType">
            <summary>
            Gets the type of the resultset element.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder">
            <summary>
            Simple placeholder which is the result of a QueryTarget usage in a prefetch path element's WithJoins() method. This placeholder
            will be used to produce an entity name to be used for formulating a dynamic relation without a creator. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder"/> class.
            </summary>
            <param name="ppathElement">The ppath element which is represented by this entity name.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder.DetermineEntityName(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore)">
            <summary>
            Determines the name of the entity represented by the ppathElement.
            </summary>
            <param name="ppathElement">The ppath element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder.Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder.ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>
            Either a FullEntityName or a DerivedTableDefinition.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityNamePlaceHolder.EntityName">
            <summary>
            Gets or sets the name of the entity represented
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.CrossJoin">
            <summary>
            Class which defines a cross join.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase">
            <summary>
            Base class for classes which define a join.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IJoin">
            <summary>
            Interface which defines a join in the most simple description.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IJoin.LeftOperand">
            <summary>
            Gets the left operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IJoin.RightOperand">
            <summary>
            Gets the right operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IJoin.JoinType">
            <summary>
            Gets the type of the join.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.#ctor(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase"/> class.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="joinType">Type of the join.</param>
            <param name="rightOperand">The right operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.GetLeftAndRightAsDynamicRelationOperands(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the left and right as dynamic relation operands.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.CreateOnClause(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Creates the on clause for the relation object created from this instance.
            </summary>
            <param name="creator">The creator.</param>
            <returns>predicate to use for the ON clause for the relation created from this object, or null if no ON clause has to be used.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>Either a FullEntityName or a DerivedTableDefinition.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.SD#LLBLGen#Pro#QuerySpec#IJoin#LeftOperand">
            <summary>
            Gets the left operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.SD#LLBLGen#Pro#QuerySpec#IJoin#RightOperand">
            <summary>
            Gets the right operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.SD#LLBLGen#Pro#QuerySpec#IJoin#JoinType">
            <summary>
            Gets the type of the join.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.JoinType">
            <summary>
            Gets the type of the join.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.LeftOperand">
            <summary>
            Gets the left operand of the join
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.JoinClauseBase.RightOperand">
            <summary>
            Gets the right operand of the join
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.CrossJoin.#ctor(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.CrossJoin"/> class.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1">
            <summary>
            Entity query definition. Used to specify a query for fetching entities. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal">
            <summary>
            Interface implemented on EntityQuery&lt;T&gt; instances, to be used to use generic EntityQuery objects non-generically. Used by
            fetch logic internally.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.Prepare">
            <summary>
            Prepares the contents of this query to be executed. 
            </summary>
            <remarks>Sets IsPrepared to true.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.PrepareForExecution(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Prepares this query for execution.
            </summary>
            <param name="dqeMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.GetFromAndWhereAsRelationPredicateBucket">
            <summary>
            Converts the from + where clause into a relationpredicatebucket.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.AppendToPreparedWhereClauseWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Appends the predicate with And to the prepared where clause. Only used for appending additional filters to specified filters. 
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.Limit">
            <summary>
            Gets the limit value specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.FieldsToIncludeExclude">
            <summary>
            Gets the fields to include exclude.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.PrefetchPath">
            <summary>
            Gets the prefetch path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.ContextToUse">
            <summary>
            Gets or sets the context to use for the query. The context value set is used during entity fetches when no entity collection is passed to the
            fetch method.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.Creator">
            <summary>
            Gets the creator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.EntityType">
            <summary>
            Gets the type of the entity this query fetches data for.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.CustomFunctionMappingStore">
            <summary>
            Gets or sets the optional custom function mapping store. A custom function mapping store takes precedence over the function mapping store 
            obtained from the Dynamic Query Engine (DQE) used for producing the SQL for the query. If a custom function mapping store is needed for a query,
            set this property only on the query object passed to the execution method. No need to set it on inner query objects.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.OrderByClause">
            <summary>
            Gets the prepared order by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.PageNumber">
            <summary>
            Gets the page number as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.PageSize">
            <summary>
            Gets the size of the page as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.FromClause">
            <summary>
            Gets the from clause, which is the prepared from clause, created from the raw clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.WhereClause">
            <summary>
            Gets the prepared where clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal.TypeFilter">
            <summary>
            Gets the type filter.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IEntityQuery">
            <summary>
            Simple interface for accessing a generic EntityQuery object's internal elements for further manipulation (in case of objects) or analysis.
            </summary>
            <remarks>Be sure to access the elements after the query has been prepared for execution.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQuery.FieldsToIncludeExclude">
            <summary>
            Gets the fields to include exclude.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQuery.PrefetchPath">
            <summary>
            Gets the prefetch path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.IEntityQuery.ContextToUse">
            <summary>
            Gets the context to use for the query. The context value set is used during entity fetches when no entity collection is passed to the
            fetch method.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="aliasCounter">The alias counter to produce an artifical, yet predictable, alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="alias">The alias.</param>
            <param name="aliasCounter">The alias counter to produce an artifical, yet predictable, alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.#ctor(SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1"/> class. Copy CTor.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.CastTo``1">
            <summary>
            Converts this instance into an EntityQuery&lt;TTargetType&gt;. 
            </summary>
            <typeparam name="TTargetType">The type of the target type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.OfEntityType``1">
            <summary>
            Sets the type filter of the query to the typefilter of the entity type specified as TEntityFilter. This means that
            all entities matching this query will be of type TEntityFilter or any of its (indirect) subtypes.
            </summary>
            <typeparam name="TEntityFilter">The type of the entity to filter on</typeparam>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.NotOfEntityType``1">
            <summary>
            Sets the type filter of the query to a negated typefilter of the entity type specified as TEntityFilter. This means that
            all entities matching this query of type TEntityFilter or the (indirect) subtypes of TEntityFilter won't be fetched. 
            </summary>
            <typeparam name="TEntityFilter">The type of the entity to filter on</typeparam>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.TargetAs(System.String)">
            <summary>
            Sets the target alias to the alias specified. By default this alias is the empty string. This alias is a different alias than the alias
            set with .As(string), as this alias is the alias on the target table(s), while .As(string) is the alias for the whole query.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.Select``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Specifies the projection of the query. It clears any existing projection and sets the projection to the one specified. This variant converts the
            specified projectionFunc into the projector lambda to pass to WithProjector and extracts the elements to place in the SQL query's projection from
            the projectionFunc. Use this overload to specify a typed resultset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="projectionFunc">The projection func.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.Select(System.Object[])">
            <summary>
            Specifies the projection of the query. It clears any existing projection and sets the projection to the one specified. 
            </summary>
            <param name="projectionElements">The projection elements. Can't be empty</param>
            <returns>The DynamicQuery instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.WithPath(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore[])">
            <summary>
            Specifies the prefetch path to use for this query. Prefetch paths are only used when this query is the outer query which is executed.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElements">The other elements.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.CorrelatedOver(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Uses the specified relationship to construct a correlation predicate between this query (where TEntity should be the start entity of the relation
            specified) and a parent entity query. This method helps constructing correlation predicates without knowing the FK - PK relationships.
            </summary>
            <param name="relationship">The relationship this query is correlated over with a parent query.</param>
            <returns></returns>
            <remarks>Uses no aliases.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.CorrelatedOver(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Uses the specified relationship to construct a correlation predicate between this query (where TEntity should be the start entity of the relation
            specified) and a parent entity query. This method helps constructing correlation predicates without knowing the FK - PK relationships.
            </summary>
            <param name="relationship">The relationship this query is correlated over with a parent query.</param>
            <param name="aliasStartEntity">The alias of the start entity of the relationship (i.e. TEntity).</param>
            <param name="aliasEndEntity">The alias of the end entity of the relationship (i.e. the entity of a parent query this query is correlated to).</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SetExcludeIncludeFields(SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Sets the exclude include fields.
            </summary>
            <param name="includeExcludeFields">The include exclude fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.WrapQueryWithExistAndPkPkFilter(System.String,System.String)">
            <summary>
            Wraps this query with EXISTS and a pk pk filter, so the returned predicate looks like EXISTS (query) AND parentq.Pkfield1 = query.PkField1 AND..
            </summary>
            <param name="callingMethodNameForException">The calling method name for exception.</param>
            <param name="parentQueryAlias">The parent query alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.AddFieldToProjectionIfNotPresent(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Adds the field to projection if not present already. Uses field alias checks. If this query is an entity query, it won't add any fields, only
            verify whether the field is present.
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <returns>index of the field in the projection.</returns>
            <remarks>assumes fieldToCheck has already been cloned</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.GetProjectionAsEntityFields">
            <summary>
            Gets the projection as EntityFields object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.GetProjectionAsEntityFields2">
            <summary>
            Gets the projection as EntityFields2 object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.GetAllFieldsFromProjection">
            <summary>
            Gets all fields from projection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.GetPrefetchPathAsString(System.Int32)">
            <summary>
            Gets the prefetch path as string.
            </summary>
            <param name="startIndent">The start indent.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.DetermineResultsetType">
            <summary>
            Determines the type of the resultset. This type is used to build resultset instances for hierarchy fetches.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>
            Either a FullEntityName or a DerivedTableDefinition. 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.DetermineIfWrappingAsDerivedTableIsRequiredForScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Determines if wrapping as derived table is required for scalar query.
            </summary>
            <param name="functionToApply">The function to apply.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.DetermineIfDerivedTableIsTargetInFieldCompareSetPredicate">
            <summary>
            Determines if the derived table variant of this query is the target when this query is used as the target of a field compare set predicate.
            Only true if query is an entity query and entity is an inheritance entity of TargetPerEntity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.ToDerivedTable">
            <summary>
            Converts this instance to a derived table definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.PrepareForExecution(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Prepares this query for execution.
            </summary>
            <param name="dqeMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.GetThisAsEmptyClone(System.String)">
            <summary>
            Gets the this as empty clone.
            </summary>
            <param name="targetAliasSpecified">The target alias specified.</param>
            <returns>
            this query as a new empty clone of itself.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.RaiseQueryTargetUsageExceptionIfApplicable">
            <summary>
            Raises an exception if a QueryTarget was used in a query type which wasn't suitable for that. By default it does this
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.Prepare">
            <summary>
            Prepares the contents of this query to be executed.
            </summary>
            <remarks>Sets IsPrepared to true.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
            true if this query is empty, i.e. no element is set that forces this query to become a derived table/full query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.CreateFieldsForTEntity">
            <summary>
            Creates the fields for the TEntity type of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.GetQueryAsFullEntityName">
            <summary>
            Gets the name of the query as full entity.
            </summary>
            <returns>
            the query as full entity name. Throws exception if class isn't an EntityQuery
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SetTypeFilter``1(System.Boolean)">
            <summary>
            Sets the type filter, negates it if negate is true
            </summary>
            <typeparam name="TEntityFilter">The type of the entity to filter on</typeparam>
            <param name="negate">if set to <c>true</c> [negate].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.AssurePrefetchPath">
            <summary>
            Assures that there's a prefetch path construct to add elements to
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.IsForAdapter">
            <summary>
            Determines whether TEntity is an adapter entity or a selfservicing entity
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.FindFieldInProjection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Finds the field in projection and returns the index. If not found, -1 is returned
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#Prepare">
            <summary>
            Prepares the contents of this query to be executed.
            </summary>
            <remarks>Sets IsPrepared to true.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#GetFromAndWhereAsRelationPredicateBucket">
            <summary>
            Converts the from + where clause into a relationpredicatebucket.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#PrepareForExecution(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Prepares this query for execution.
            </summary>
            <param name="dqeMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#AppendToPreparedWhereClauseWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Appends the predicate with And to the prepared where clause. Only used for appending additional filters to specified filters.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#Limit">
            <summary>
            Gets the limit value specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#FieldsToIncludeExclude">
            <summary>
            Gets the fields to include exclude.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#PrefetchPath">
            <summary>
            Gets the prefetch path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#ContextToUse">
            <summary>
            Gets or sets the context to use for the query. The context value set is used during entity fetches when no entity collection is passed to the
            fetch method.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#Creator">
            <summary>
            Gets the creator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#EntityType">
            <summary>
            Gets the type of the entity this query fetches data for.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#CustomFunctionMappingStore">
            <summary>
            Gets or sets the optional custom function mapping store. A custom function mapping store takes precedence over the function mapping store
            obtained from the Dynamic Query Engine (DQE) used for producing the SQL for the query. If a custom function mapping store is needed for a query,
            set this property only on the query object passed to the execution method. No need to set it on inner query objects.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#OrderByClause">
            <summary>
            Gets the prepared order by clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#PageNumber">
            <summary>
            Gets the page number as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#PageSize">
            <summary>
            Gets the size of the page as specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#FromClause">
            <summary>
            Gets the from clause, which is the prepared from clause, created from the raw clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#WhereClause">
            <summary>
            Gets the prepared where clause.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQueryInternal#TypeFilter">
            <summary>
            Gets the type filter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQuery#FieldsToIncludeExclude">
            <summary>
            Gets the fields to include exclude.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQuery#PrefetchPath">
            <summary>
            Gets the prefetch path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.SD#LLBLGen#Pro#QuerySpec#IEntityQuery#ContextToUse">
            <summary>
            Gets the context to use for the query. The context value set is used during entity fetches when no entity collection is passed to the
            fetch method.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.FieldsToIncludeExclude">
            <summary>
            Gets the fields to include exclude.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.PrefetchPath">
            <summary>
            Gets the prefetch path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.ContextToUse">
            <summary>
            Gets or sets the context to use for the query. The context value set is used during entity fetches when no entity collection is passed to the
            fetch method.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQuery`1.ResultsetElementType">
            <summary>
            Gets the type of the resultset element.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder">
            <summary>
            Simple placeholder which is inserted by QueryTarget's join methods and is replaced by a real EntityQuery when the joins are prepared. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder"/> class.
            </summary>
            <param name="targetAlias">The target alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder.Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder.ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>
            Either a FullEntityName or a DerivedTableDefinition.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityQueryPlaceHolder.TargetAlias">
            <summary>
            Gets or sets the alias for the element which is 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin">
            <summary>
            Class which defines a join specified by an EntityRelation object. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin"/> class.
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="joinType">Type of the join.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin"/> class.
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="joinType">Type of the join.</param>
            <param name="aliasStartEntity">The alias for the start entity.</param>
            <param name="aliasEndEntity">The alias for the end entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.InnerJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies an Inner join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.LeftJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies a left join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.RightJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies a right join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.CrossJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies a cross join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.GetLeftSideAsFullEntityName">
            <summary>
            Gets the left side of the enclosed relationship as a FullEntityName.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.GetRightSideAsFullEntityName">
            <summary>
            Gets the right side of the enclosed relationship as a FullEntityName.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>Either a FullEntityName or a DerivedTableDefinition.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin.JoinType">
            <summary>
            Gets the type of the join.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition">
            <summary>
            Simple class which wraps an Expression object to be able to specify alias and type
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="resultAlias">The result alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="resultType">Type of the result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition"/> class.
            </summary>
            <param name="expression">The expression.</param>
            <param name="resultType">Type of the result.</param>
            <param name="resultAlias">The result alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.As(System.String)">
            <summary>
            Sets the result alias to the specified alias.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.WrappedExpression">
            <summary>
            Gets or sets the wrapped expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.ResultType">
            <summary>
            Gets or sets the type of the result.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition.ResultAlias">
            <summary>
            Gets or sets the result alias.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.FullProjectionPlaceHolder">
            <summary>
            Placeholder for the Projection.Full specification, so a Select() can deal with this. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression">
            <summary>
            Class which acts as a placeholder for a function call, and is replaced before execution with the real function call. It stores data which is
            used to lookup a function mapping in a FunctionMappingStore, which mechanism is also shared with the Linq provider.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.#ctor(System.Type,System.String,System.Int32,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression"/> class.
            </summary>
            <param name="methodDefiningType">Type in which the method is defined. This is a .net type which is used for lookup in a FunctionMappingStore</param>
            <param name="methodName">Name of the method.</param>
            <param name="numberOfParameters">The number of parameters of the .NET method mapped in the FunctionMapping representeed.</param>
            <param name="parameters">The parameters.</param>
            <remarks>The number of parameters specified in numberOfParameters can differ from the number of elements specified as parameters, as non-static
            .net methods mapped in the FunctionMappingStore have a lower parameter count defined.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.ConvertToDbFunctionCall(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Finds the equivalent function mapping of the call represented by this placeholder and its data and uses that mapping to convert the function call
            represented by this instance into a DbFunctionCall instance. The _customStore, if set, takes precendence over _dqeStore so a mapping defined in
            _customStore and _dqeStore will result in the mapping defined in the _customStore being used for the DbFunctionCall returned.
            </summary>
            <param name="customStore">The custom store. The custom function mapping store to look for function mappings. Can be null</param>
            <param name="dqeStore">The dqe store. The function mapping store obtained from the DynamicQueryEngine (dqe) used for executing the containing query</param>
            <returns>
            Ready to use DbFunctionCall instance created from the function mapping represented by this instance
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.AsBooleanValue">
            <summary>
            Returns this instance wrapped in a CASE WHEN (this instance) THEN 1 ELSE 0 END construct (as a function call expression)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#ToQueryText">
            <summary>
            Converts the expression to query text
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#ToQueryText(System.Boolean)">
            <summary>
            Converts the expression to query text
            </summary>
            <param name="inHavingClause">if set to <c>true</c> [in having clause].</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#DatabaseSpecificCreator">
            <summary>
            Gets or sets the database specific creator.
            </summary>
            <value>The database specific creator.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#LeftOperand">
            <summary>
            Gets the left operand.
            </summary>
            <value>The left operand.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#Operator">
            <summary>
            Gets the operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#RightOperand">
            <summary>
            Gets the right operand.
            </summary>
            <value>The right operand.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.MappingParameters">
            <summary>
            Gets the parameters as defined for the mapping.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression.ResultsInBooleanValue">
            <summary>
            Gets or sets a value indicating whether [results in boolean value].
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ArrayFunctions">
            <summary>
            Class which defines the function mappings for Array
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ArrayFunctions.Length(System.Object)">
            <summary>
            Defines the mapping for the operand1.Length property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.BooleanFunctions">
            <summary>
            Class which defines the function mappings for booleans
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BooleanFunctions.ToString(System.Object)">
            <summary>
            Defines the mapping for the operand1.ToString() method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions">
            <summary>
            Class which defines the function mappings for Convert methods
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToBoolean(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToBoolean(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToByte(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToByte(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToChar(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToChar(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToDateTime(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToDateTime(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToDecimal(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToDecimal(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToDouble(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToDouble(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToInt16(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToInt16(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToInt32(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToInt32(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToInt64(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToInt64(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToSingle(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToSingle(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ConvertFunctions.ToString(System.Object)">
            <summary>
            Defines the mapping for the Convert.ToString(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods">
            <summary>
            Extension methods on IEntityFieldCore and IExpression for 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddDays(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddDays(numberOfDays) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfDays">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddHours(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddHours(numberOfHours) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfHours">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddMinutes(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddMinutes(numberOfMinutes) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfMinutes">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddMilliseconds(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddMilliseconds(numberOfMilliseconds) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfMilliseconds">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddMonths(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddMonths(numberOfMonths) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfMonths">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddSeconds(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddSeconds(numberOfSeconds) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfSeconds">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddYears(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.AddYears(numberOfYears) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="numberOfYears">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Date(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Date property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Day(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Day property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Hour(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Hour property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Millisecond(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Millisecond property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Minute(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Minute property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Month(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Month property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Second(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Second property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Year(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Year property to method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Char(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.Char[index] property to method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Defines the mapping for the field.IndexOf(value) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Length(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Length property to method mapping, if field represents a string value.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Replace(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String,System.String)">
            <summary>
            Defines the mapping for the field.Replace(oldValue, newValue) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Substring(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Defines the mapping for the field.Substring(startIndex) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Substring(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32,System.Int32)">
            <summary>
            Defines the mapping for the field.Substring(startIndex, length) method mapping
            </summary>
            <param name="field">The field.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.ToLower(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.ToLower() method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.ToUnicode(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.ToUnicode() method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.ToUpper(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.ToUpper() method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Trim(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the field.Trim() method mapping
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddDays(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddDays(numberOfDays) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfDays">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddHours(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddHours(numberOfHours) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfHours">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddMinutes(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddMinutes(numberOfMinutes) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfMinutes">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddMilliseconds(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddMilliseconds(numberOfMilliseconds) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfMilliseconds">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddMonths(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddMonths(numberOfMonths) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfMonths">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddSeconds(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddSeconds(numberOfSeconds) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfSeconds">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.AddYears(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.AddYears(numberOfYears) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="numberOfYears">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Date(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Date property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Day(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Day property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Hour(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Hour property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Millisecond(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Millisecond property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Minute(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Minute property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Month(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Month property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Second(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Second property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Year(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Year property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Char(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.Char[index] property to method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Defines the mapping for the expression.IndexOf(value) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Length(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Length property to method mapping, if expression represents a string value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Replace(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String,System.String)">
            <summary>
            Defines the mapping for the expression.Replace(oldValue, newValue) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Substring(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32)">
            <summary>
            Defines the mapping for the expression.Substring(startIndex) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Substring(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Int32,System.Int32)">
            <summary>
            Defines the mapping for the expression.Substring(startIndex, length) method mapping
            </summary>
            <param name="expression">The expression.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.ToLower(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.ToLower() method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.ToUnicode(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.ToUnicode() method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.ToUpper(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.ToUpper() method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExtensionMethods.Trim(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the expression.Trim() method mapping
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.StringFunctions">
            <summary>
            Class which defines the function mappings for String
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Concat(System.Object,System.Object)">
            <summary>
            Defines the mapping for the String.Concat(operand1, operand2) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.IndexOf(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.IndexOf(value) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="value">The value to search for</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.IndexOf(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.IndexOf(value, startIndex) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="value">The value to search for</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.LastIndexOf(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.LastIndexOf(value) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="value">The value to search for</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.LastIndexOf(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.LastIndexOf(value, startIndex) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="value">The value to search for</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.PadLeft(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.PadLeft(totalWidth) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="totalWidth">The total width.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.PadLeft(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.PadLeft(totalWidth, paddingChar) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="totalWidth">The total width.</param>
            <param name="paddingChar">The padding char.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.PadRight(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.PadRight(totalWidth) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="totalWidth">The total width.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.PadRight(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.PadRight(totalWidth, paddingChar) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="totalWidth">The total width.</param>
            <param name="paddingChar">The padding char.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Remove(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Remove(startIndex) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Remove(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Remove(startIndex, count) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Replace(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Replace(oldValue, newValue) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Substring(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Substring(startIndex) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Substring(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Substring(startIndex, length) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.ToLower(System.Object)">
            <summary>
            Defines the mapping for the operand1.ToLower() method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.ToUpper(System.Object)">
            <summary>
            Defines the mapping for the operand1.ToUpper() method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.ToUnicode(System.Object)">
            <summary>
            Defines the mapping for the operand1.ToUnicode() method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Trim(System.Object)">
            <summary>
            Defines the mapping for the operand1.Trim() method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Length(System.Object)">
            <summary>
            Defines the mapping for the operand1.Length property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringFunctions.Char(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Char[index] property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.MathFunctions">
            <summary>
            Class which defines the function mappings for the Math class
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.MathFunctions.Power(System.Object,System.Object)">
            <summary>
            Defines the mapping for the Math.Pow(operand1, operand2) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions">
            <summary>
            Class which defines the function mappings for Decimal
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions.Ceiling(System.Object)">
            <summary>
            Defines the mapping for the Decimal.Ceiling(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions.Floor(System.Object)">
            <summary>
            Defines the mapping for the Decimal.Floor(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions.Remainder(System.Object,System.Object)">
            <summary>
            Defines the mapping for the Decimal.Remainder(operand1, divider) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="divider">The divider.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions.Round(System.Object)">
            <summary>
            Defines the mapping for the Decimal.Round(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions.Round(System.Object,System.Object)">
            <summary>
            Defines the mapping for the Decimal.Round(operand1, numberOfDecimals) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfDecimals">The number of decimals.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DecimalFunctions.Truncate(System.Object)">
            <summary>
            Defines the mapping for the Decimal.Truncate(operand1) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions">
            <summary>
            Class which defines the function mappings for DateTime
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddDays(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddDays(numberOfDays) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfDays">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddHours(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddHours(numberOfHours) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfHours">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddMilliseconds(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddMilliseconds(numberOfMilliseconds) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfMilliseconds">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddMinutes(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddMinutes(numberOfMinutes) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfMinutes">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddMonths(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddMonths(numberOfMonths) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfMonths">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddSeconds(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddSeconds(numberOfSeconds) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfSeconds">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.AddYears(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.AddYears(numberOfYears) method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="numberOfYears">The amount to add. Can be negative to substract instead of add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Date(System.Object)">
            <summary>
            Defines the mapping for the operand1.Date property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Day(System.Object)">
            <summary>
            Defines the mapping for the operand1.Day property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.DayOfWeek(System.Object)">
            <summary>
            Defines the mapping for the operand1.DayOfWeek property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.DayOfYear(System.Object)">
            <summary>
            Defines the mapping for the operand1.DayOfYear property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Hour(System.Object)">
            <summary>
            Defines the mapping for the operand1.Hour property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Millisecond(System.Object)">
            <summary>
            Defines the mapping for the operand1.Millisecond property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Minute(System.Object)">
            <summary>
            Defines the mapping for the operand1.Minute property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Month(System.Object)">
            <summary>
            Defines the mapping for the operand1.Month property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Second(System.Object)">
            <summary>
            Defines the mapping for the operand1.Second property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DateTimeFunctions.Year(System.Object)">
            <summary>
            Defines the mapping for the operand1.Year property to method mapping
            </summary>
            <param name="operand1">The operand1.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.Functions">
            <summary>
            Helper class to specify function calls into the query fragments.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Not(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Negates the predicate specified. 
            </summary>
            <param name="toNegate">To negate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Not(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Negates the predicate specified. 
            </summary>
            <param name="toNegate">To negate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Not(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Defines the mapping for the Boolean.Negate(field) method mapping. Use it when field is a boolean field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Not(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Defines the mapping for the Boolean.Negate(expression) method mapping. Use it when expression is a boolean expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Compare(System.Object,System.Object)">
            <summary>
            Defines the mapping for the operand1.Compare(operand2) method mapping.
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.IIF(System.Object,System.Object,System.Object)">
            <summary>
            Defines the mapping for the IIF(operand1, operand2, operand3) method mapping. Equivalent to operand1 ? operand2 : operand3
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <param name="operand3">The operand3.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.ShiftLeft(System.Object,System.Object)">
            <summary>
            Defines the mapping for the bit shift operation to the left on operand1
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.ShiftRight(System.Object,System.Object)">
            <summary>
            Defines the mapping for the bit shift operation to the right on operand1
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Exists(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Creates an EXISTS (query) predicate. 
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.NotExists(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Creates a NOT EXISTS (query) predicate. 
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.In(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a Field IN (query) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.NotIn(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a NOT (Field IN (query)) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.In(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object[])">
            <summary>
            Creates a Field IN (values) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.NotIn(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object[])">
            <summary>
            Creates a NOT (Field IN (values)) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.In``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a predicate which is true for each entity in query which is in the list of entities specified
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="entities">The entities to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.In``1(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a predicate which is true if there's an object of type T in values, which has for each property P a field in fields with the same name / alias
            and the value for property P is equal to the value of the field equivalent in the main query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.NotIn``1(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a predicate which is true if there's no object of type T in values, which has for each property P a field in fields with the same name / alias
            and the value for property P is equal to the value of the field equivalent in the main query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.NotIn``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a predicate which is true for each entity in query which is not in the list of entities specified
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="entities">The entities to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Coalesce(System.Object,System.Object)">
            <summary>
            Creates a COALESCE function call and assigns it to a wrapping field, which is returned.
            </summary>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <returns>IEntityFieldCore instance which wraps the dbfunctioncall to COALESCE(operand1, operand2)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.CountRow">
            <summary>
            Specifies an expression field with a CountRow(*) aggregate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.CountBigRow">
            <summary>
            Specifies an expression field with a CountBigRow(*) aggregate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.Constant(System.Object)">
            <summary>
            Wraps a constant for usage in expressions and projections. 
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Functions.CreateUsableDbFunctionCallParameterValue(System.Object)">
            <summary>
            Creates a usable db function call parameter value from the expression passed in.
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>
            usable parameter for LLBLGen Pro DbFunctionCall usage.
            </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.Grouping`2">
            <summary>
            Class which implements the IGrouping interface to return grouped results in a query
            </summary>
            <typeparam name="TKey">type of the grouping key</typeparam>
            <typeparam name="TElement">type of the elements grouped</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.Grouping`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="elements">The grouped elements.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Grouping`2.System#Linq#IGrouping{TKey@TElement}#Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <returns>The key of the <see cref="T:System.Linq.IGrouping`2"/>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Grouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <returns>The key of the <see cref="T:System.Linq.IGrouping`2"/>.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults">
            <summary>
            Simple bucket class which is used to store fetch results of a hierarchical fetch. It contains row data as well as the materialized object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.MergeChildrenWithParents(SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults,SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification)">
            <summary>
            Finds the parents for the children in this resultset and merges the children with the parents
            </summary>
            <param name="parentData">The parent data.</param>
            <param name="nestedQuery">The nested query of which this object contains the results of</param>
            <remarks>Assumes parent hash values are already calculated</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.CalculateRowHashesForSpecifiedValues(System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates the hashes for the values in valuesToHash's raw row results for the values in the rows at the indices specified. The hashes are stored
            using a key calculated from the indices in the valuesToHash object
            </summary>
            <param name="valueIndices">The value indices.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.DetermineIfMergeIsAllowedBasedOnMaxCounters(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Determines if a child should be merged with this parent, based on maxcounters.
            </summary>
            <param name="maxCounters">The max counters.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="maxNumberOfChildrenPerParent">The max number of children per parent. If 0, no limit is set</param>
            <returns>true if there's no limit or if the limit for children for this parent hasn't been reached for this nestedquery</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.CreateHashValueKeyFromIndices(System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates the hash value key from indices.
            </summary>
            <param name="valueIndices">The value indices.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.CalculateRowHashForSpecifiedValues(System.Object[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates the row hash from the values at the specified indices
            </summary>
            <param name="rowData">The row data.</param>
            <param name="valueIndices">The value indices.</param>
            <returns>Hashvalue for the row for the fields at the specified fields.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.CreateObjectCreatorFuncInstance``1">
            <summary>
            Creates the object creator func instance for instantiating objects of type TObject using the default constructor
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <returns>
            an instance of the ObjectCreatorFunc for the TObject type so quickly new TObject instances can be created..
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.CreateObjectCreatorFuncInstance``1(System.Reflection.ConstructorInfo)">
            <summary>
            Creates the object creator func instance for instantiating objects of type TObject using the constructor passed in.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="constructor">The constructor to use for creating the delegate.</param>
            <returns>an instance of the ObjectCreatorFunc for the TObject type so quickly new TObject instances can be created..</returns>
            <remarks>Thanks to Roger Alsing for the idea: http://rogeralsing.com/</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.RawRowData">
            <summary>
            The list of raw row data, in object rows. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.HashValuesPerFieldCombination">
            <summary>
            Gets or sets the set of hash values (with per hashvalue the indexes of the raw data/materialized object related to that hash) per field combination.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.ChildIndicesPerParentIndex">
            <summary>
            The indices of the materialized / child objects per parent object of this resultset.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HierarchyFetchResults.MaterializedObjects">
            <summary>
            List of materialized objects, which is the result of the query, ready to be returned.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.Joins">
            <summary>
            Helper class which can create inner/left/right/cross joins based on EntityRelation objects.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Inner(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Defines the join specified by the relationship as an Inner join
            </summary>
            <param name="relationship">The relationship.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Inner(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Defines the join specified by the relationship as an Inner join
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="aliasStartEntity">The alias of the start entity.</param>
            <param name="aliasEndEntity">The alias of the end entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Left(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Defines the join specified by the relationship as a left join
            </summary>
            <param name="relationship">The relationship.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Left(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Defines the join specified by the relationship as a left join
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="aliasStartEntity">The alias of the start entity.</param>
            <param name="aliasEndEntity">The alias of the end entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Right(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Defines the join specified by the relationship as a right join
            </summary>
            <param name="relationship">The relationship.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Right(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Defines the join specified by the relationship as a right join
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="aliasStartEntity">The alias of the start entity.</param>
            <param name="aliasEndEntity">The alias of the end entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Cross(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Defines the join specified by the relationship as a cross join
            </summary>
            <param name="relationship">The relationship.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.Cross(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Defines the join specified by the relationship as a cross join
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="aliasStartEntity">The alias of the start entity.</param>
            <param name="aliasEndEntity">The alias of the end entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Joins.CreateJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String)">
            <summary>
            Creates the join.
            </summary>
            <param name="relationship">The relationship.</param>
            <param name="joinType">Type of the join.</param>
            <param name="aliasStartEntity">The alias of the start entity.</param>
            <param name="aliasEndEntity">The alias of the end entity.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification">
            <summary>
            Simple class which contains a nested query specification inside a projection
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.#ctor(SD.LLBLGen.Pro.QuerySpec.QuerySpec,System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification"/> class.
            </summary>
            <param name="nestedQuery">The nested query.</param>
            <param name="indexInResultRow">The index in result row of parent.</param>
            <param name="correlationFilters">The correlation filters, which are predicates which tie nested query to parent.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.GetFieldIndicesForCompleteCorrelationFilter(System.Boolean)">
            <summary>
            Gets the field indices for all fields in the complete correlation filter. Based on the flag specified, the parent or the child field indexes are returned.
            </summary>
            <param name="parentFields">if true, parentfield indexes are returned, otherwise child field indexes</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.AddPredicateInfo(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32,System.Int32)">
            <summary>
            Adds the predicate info which is determined after the nested query has been processed by the valueprojection it is located in to this nested query
            so it can be used later on when the nested query has to be executed.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="parentField">The parent field.</param>
            <param name="childField">The child field.</param>
            <param name="parentFieldIndex">Index of the parent field.</param>
            <param name="childFieldIndex">Index of the child field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.NestedQuery">
            <summary>
            Gets or sets the nested query object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.IndexInResultRow">
            <summary>
            Gets or sets the index in result row of the parent.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.CorrelationFilters">
            <summary>
            Gets or sets the correlation filters, which tie this nested query with the parent, containing, query. Can be empty (in which case the results of
            this nested query belong to every parent)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.RowComparerFunc">
            <summary>
            Gets or sets the row comparer func which is a compiled lambda expression build from the predicates of the correlation filter of this nested query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.CorrelationPredicateInfos">
            <summary>
            Gets the predicate info per correlation predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo">
            <summary>
            simple class which is used to store predicate info once the correlationfilter predicates have been processed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo"/> class.
            </summary>
            <param name="parentField">The parent field.</param>
            <param name="childField">The child field.</param>
            <param name="parentFieldIndex">Index of the parent field.</param>
            <param name="childFieldIndex">Index of the child field.</param>
            <param name="correlationPredicate">The correlation predicate.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo.ParentField">
            <summary>
            Gets or sets the parent field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo.ChildField">
            <summary>
            Gets or sets the child field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo.ParentFieldIndex">
            <summary>
            Gets or sets the index of the parent field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo.ChildFieldIndex">
            <summary>
            Gets or sets the index of the child field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification.PredicateInfo.CorrelationPredicate">
            <summary>
            Gets or sets the correlation predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.PreparedProjection">
            <summary>
            Class which wraps a prepared projection, containing the final fields for the query to execute.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PreparedProjection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.PreparedProjection"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PreparedProjection.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.PreparedProjection"/> class.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PreparedProjection.GetProjectionAsProjectorsList">
            <summary>
            Gets this prepared projection as a list of datavalue projectors, which are directly usable for creating projection using the framework
            </summary>
            <returns>list of ready to use datavalue projectors or null if the projection hasn't been prepared</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PreparedProjection.DetermineValidName(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Determines the valid name for the field specified, when the field is at index 'index'
            </summary>
            <param name="index">The index.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PreparedProjection.GetProjectionNameToIndexMap">
            <summary>
            Gets the projection name to index map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PreparedProjection.CoerceElementsToSelfServicingElements">
            <summary>
            Coerces the elements to self servicing elements. Calling this method suggests the caller is part of a query which will be executed with selfservicing
            logic.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.Projection">
            <summary>
            Class which defines the projection of a DynamicQuery
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.Projection"/> class.
            </summary>
            <param name="sourceElements">The source elements.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.AddElement(System.Object)">
            <summary>
            Adds the element.
            </summary>
            <param name="toAdd">To add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.GetProjectionAsFields(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the projection as fields.
            </summary>
            <param name="creator">The creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.AddFieldToProjectionIfNotPresent(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Adds the field to projection if not present.
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <returns>index on which the field was found, or the new index if it was added if it wasn't found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.Preprocess(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Preprocesses this projection using the function mappings specified
            </summary>
            <param name="customFunctionMappings">The custom function mappings.</param>
            <param name="dqeFunctionMappings">The dqe function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.PostProcessNestedQueries">
            <summary>
            Post-processes the nested queries in this projection. If there are nested queries, it produces in-memory lambda's for the routine which ties parent to child.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.FindFieldInProjection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Finds the field in projection. Used for hierarchical projection index finding so fields based on index are tied to each other.
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <returns>the index on which the field was found, or -1 if not found. based on alias check. Skips all elements which aren't fields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.GetExpressionHostField(System.String,System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the expression host field.
            </summary>
            <param name="resultAlias">The result alias.</param>
            <param name="resultType">Type of the result.</param>
            <param name="creator">The creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.WrapRawElementsIfNecessary">
            <summary>
            Wraps the raw projection elements in an expression field, predicates in a function call and a nested query in a NestedQuerySpecification. 
            Normally these are only present if a function call was placed in a Select() without an alias assigned to it, or when a predicate is in the projection
            due to calls to contains, all, any etc.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.FixFirstFieldForSourceDetermination(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Fixes the first field for source determination.
            <para>
            If there's no source defined in the query, i.e. the first field in the fieldscollection isn't a mapped field but a field with an expression and
            there are no relations, it means that the DQE won't be able to determine which table /view to target.
            This routine solves that by finding the first field in the expression of the field or in the rest of the sourcefields, clone that one and use that field
            as the field to use at position 0 instead of the current field.
            </para>
            </summary>
            <param name="toCheck">To check.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Projection.GetUniqueFieldAlias">
            <summary>
            Gets the unique field alias for the next field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Projection.ExpressionHostField">
            <summary>
            Gets or sets the expression host field. This field is used to clone fields from to host expressions which are found in the projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Projection.Full">
            <summary>
            Defines a full projection placeholder
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Projection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Projection.NestedQueries">
            <summary>
            Gets the nested queries.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ProjectionRow">
            <summary>
            Simple class which wraps an object array and allows type converson and name-based indexing. Used in projections of DynamicQuery resultsets.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.#ctor(System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.ProjectionRow"/> class.
            </summary>
            <param name="rawRow">The raw row.</param>
            <param name="nameToIndexMap">Index to lookup the value index for a name</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.Get``1(System.String)">
            <summary>
            Gets the value for the specified name and converts it to the type T. If the value can be nullable, specify Nullable&lt;T&gt; of T is a value type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.Get``1(System.Int32)">
            <summary>
            Gets the value for the specified index and converts it to the type T. If the value can be nullable, specify Nullable&lt;T&gt; of T is a value type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.ConvertValueToType``1(System.Object)">
            <summary>
            Converts the value specified to the type T. Assumes toConvert can be converted to T if toConvert is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toConvert">To convert.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.GetIndexForName(System.String)">
            <summary>
            Gets the index for the name specified or -1 if not found.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.RawRow">
            <summary>
            Gets the raw row wrapped by this projectionrow
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ProjectionRow.NameToIndexMap">
            <summary>
            Gets the name to index map, which is an index to lookup the value index for a name. The value is the ordinal in the resultset for the column with
            the name specified as key.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.QueryTarget">
            <summary>
            Placeholder class to specify a join in From() calls on an EntityQuery.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.As(System.String)">
            <summary>
            Specifies the target alias for the query target.
            </summary>
            <param name="targetAlias">The target alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.InnerJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type INNER JOIN between the EntityQuery which From() class the QueryTarget is used on and the specified right operand. 
            </summary>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.LeftJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type LEFT JOIN between the EntityQuery which From() class the QueryTarget is used on and the specified right operand. 
            </summary>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.RightJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type RIGHT JOIN between the EntityQuery which From() class the QueryTarget is used on and the specified right operand. 
            </summary>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.CrossJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type CROSS JOIN between the EntityQuery which From() class the QueryTarget is used on and the specified right operand. 
            </summary>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.InnerJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type INNER JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.LeftJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type LEFT JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.RightJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type RIGHT JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.CrossJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type CROSS JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.InnerJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type INNER JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.LeftJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type LEFT JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.RightJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type RIGHT JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QueryTarget.CrossJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type CROSS JOIN between the EntityQuery which From() class the QueryTarget is used by using the entity relation specified
            </summary>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods">
            <summary>
            Extension methods for field / expression which assign an aggregate function on the field / expression.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Avg(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Avg aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.AvgDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Avg(Distinct) aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Avg(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Avg aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.AvgDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Avg(Distinct) aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Count(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Count aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.CountDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Count(Distinct) aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Count(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Count aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.CountDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Count(Distinct) aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.CountBig(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the CountBig aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.CountBigDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the CountBig(Distinct) aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.CountBig(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the CountBig aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.CountBigDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the CountBig(Distinct) aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Max(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Max aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Max(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Max aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Min(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Min aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Min(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Min aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.StDev(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the StDev aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.StDevDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the StDev(Distinct) aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.StDev(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the StDev aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.StDevDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the StDev(Distinct) aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Sum(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Sum aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.SumDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Sum(Distinct) aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Sum(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Sum aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.SumDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Sum(Distinct) aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Variance(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Variance aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.VarianceDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Places the Variance(Distinct) aggregate function on the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.Variance(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Variance aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AggregateRelatedExtensionMethods.VarianceDistinct(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Places the Variance(Distinct) aggregate function on the expression specified and returns a wrapping field with the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.MiscellaneousExtensionMethods">
            <summary>
            A general class which contains extension methods which couldn't be placed anywhere else
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.MiscellaneousExtensionMethods.IsEnumerableType(System.Type)">
            <summary>
            Determines whether the type this method is called on is an enumerable type. if t is of type string, it returns false. 
            </summary>
            <param name="t">The type.</param>
            <returns>
            	true if t implements IEnumerable and isn't of type string, false otherwise
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.MiscellaneousExtensionMethods.IsEmpty(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Determines whether the specified relation collection is empty. A null passed in is also considered empty.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if the collection passed in is null or has no elements, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.MiscellaneousExtensionMethods.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets the value belonging to the key specified, or null if not found. 
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.AllAnyPredicateProducers">
            <summary>
            Extension methods to produce All/Any based predicates (NOT EXISTS, EXISTS). 
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AllAnyPredicateProducers.All(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a predicate which has to be true for all elements in query, which is equal to NOT EXISTS(QUERY.Where(NOT predicate))
            </summary>
            <param name="query">The query.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AllAnyPredicateProducers.Any(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Creates a predicate which has to be true it there's at least one element in query, which is equal to EXISTS(QUERY)
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AllAnyPredicateProducers.Any(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a predicate which has to be true for at least one element in query, which is equal to EXISTS(QUERY.Where(predicate))
            </summary>
            <param name="query">The query.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ContainsPredicateProducers">
            <summary>
            Extension methods to produce Contains based predicates (EXISTS, IN..). 
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ContainsPredicateProducers.Contains(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Creates a predicate which has to be true if the query contains an entity which has the same PK values as the entityInstance specified
            </summary>
            <param name="query">The query.</param>
            <param name="entityInstance">The entity instance.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ContainsPredicateProducers.Contains``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Creates a predicate which has to be true if the query contains the entities in valueSupplierQuery
            </summary>
            <param name="query">The query.</param>
            <param name="valueSupplierQuery">The value supplier query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ContainsPredicateProducers.Contains(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a predicate which has to be true if a value in the set produced by query valueSupplierQuery is in the set produced by query.
            </summary>
            <param name="query">The query.</param>
            <param name="valueSupplierQuery">The value supplier query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ContainsPredicateProducers.Contains(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Object)">
            <summary>
            Creates a predicate which has to be true if the query contains the value specified.
            </summary>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.BetweenPredicateProducers">
            <summary>
            Extension methods to produce between comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BetweenPredicateProducers.Between(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object,System.Object)">
            <summary>
            Creates a Between predicate which is true if the result of the expression specified is between valueBegin and valueEnd, valueBegin and valueEnd included.
            </summary>
            <param name="expression">The expression.</param>
            <param name="valueBegin">The begin value. Can be a field or normal value.</param>
            <param name="valueEnd">The end value. Can be a field or normal value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BetweenPredicateProducers.NotBetween(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object,System.Object)">
            <summary>
            Creates a Between predicate which is true if the result of the expression specified is not between valueBegin and valueEnd, valueBegin and valueEnd included. 
            </summary>
            <param name="expression">The expression.</param>
            <param name="valueBegin">The begin value. Can be a field or normal value.</param>
            <param name="valueEnd">The end value. Can be a field or normal value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BetweenPredicateProducers.Between(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object,System.Object)">
            <summary>
            Creates a Between predicate which is true if the field specified is between valueBegin and valueEnd, valueBegin and valueEnd included.
            </summary>
            <param name="field">The field.</param>
            <param name="valueBegin">The begin value. Can be a field or normal value.</param>
            <param name="valueEnd">The end value. Can be a field or normal value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BetweenPredicateProducers.NotBetween(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object,System.Object)">
            <summary>
            Creates a Between predicate which is true if the field specified is not between valueBegin and valueEnd, valueBegin and valueEnd included.
            </summary>
            <param name="field">The field.</param>
            <param name="valueBegin">The begin value. Can be a field or normal value.</param>
            <param name="valueEnd">The end value. Can be a field or normal value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.BetweenPredicateProducers.WrapInFieldIfExpression(System.Object)">
            <summary>
            Wraps the value in a field if it's an expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers">
            <summary>
            Extension methods to produce IN based predicates (field IN (set/range/query)) for field or expression.
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.In(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a Field IN (query) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.NotIn(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a NOT (Field IN (query)) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.In(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object[])">
            <summary>
            Creates a Field IN (values) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.NotIn(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object[])">
            <summary>
            Creates a NOT (Field IN (values)) predicate
            </summary>
            <param name="field">The field.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.In(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a Field IN (query) predicate
            </summary>
            <param name="expression">The expression.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.NotIn(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a NOT (Field IN (query)) predicate
            </summary>
            <param name="expression">The expression.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.In(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object[])">
            <summary>
            Creates a Field IN (values) predicate
            </summary>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.NotIn(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object[])">
            <summary>
            Creates a NOT (Field IN (values)) predicate
            </summary>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.In``1(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a predicate which is true if there's an object of type T in values, which has for each property P a field in fields with the same name / alias
            and the value for property P is equal to the value of the field equivalent in the main query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InPredicateProducers.NotIn``1(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a predicate which is true if there's no object of type T in values, which has for each property P a field in fields with the same name / alias
            and the value for property P is equal to the value of the field equivalent in the main query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields">The fields.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.IsNullPredicateProducers">
            <summary>
            Extension methods to produce IS Null comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IsNullPredicateProducers.IsNull(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Generates a FieldCompareNull predicate on the field specified. 
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IsNullPredicateProducers.IsNotNull(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Generates a negated FieldCompareNull predicate on the field specified.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IsNullPredicateProducers.IsNull(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Generates a FieldCompareNull predicate on the expression specified.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.IsNullPredicateProducers.IsNotNull(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Generates a negated FieldCompareNull predicate on the expression specified.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers">
            <summary>
            Extension methods to produce Like predicates for string fields/expressions. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.Like(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Creates a Like predicate for the expression specified using the pattern specified. The pattern has to contain the wildcards required.
            </summary>
            <param name="expression">The expression.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.Like(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a Like predicate for the field specified using the pattern specified. The pattern has to contain the wildcards required.
            </summary>
            <param name="field">The field.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.StartsWith(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Creates a Like predicate using the pattern: 'pattern%' for the expression specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.EndsWith(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Creates a Like predicate using the pattern: '%pattern' for the expression specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Creates a Like predicate using the pattern: '%pattern%' for the expression specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.StartsWith(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a Like predicate using the pattern: 'pattern%' for the fieldl specified.
            </summary>
            <param name="field">The field.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.EndsWith(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a Like predicate using the pattern: '%pattern' for the field specified.
            </summary>
            <param name="field">The field.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.StringMethodPredicateProducers.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a Like predicate using the pattern: '%pattern%' for the field specified.
            </summary>
            <param name="field">The field.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers">
            <summary>
            Extension methods to produce lesser or equal comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers.LesserEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a lesser or equal comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers.LesserEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a lesser or equal comparison predicate between the two expressions specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers.LesserEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a lesser or equal comparison predicate between the expression and the field specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers.LesserEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a lesser or equal comparison predicate between the field and the expression specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers.LesserEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a lesser or equal comparison predicate between the two fields specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserEqualOpPredicateProducers.LesserEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object)">
            <summary>
            Creates a lesser or equal comparison predicate between the expression and the value specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers">
            <summary>
            Extension methods to produce lesser than comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers.LesserThan(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a lesser than comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers.LesserThan(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a lesser than comparison predicate between the two expressions specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers.LesserThan(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a lesser than comparison predicate between the expression and the field specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers.LesserThan(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a lesser than comparison predicate between the field and the expression specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers.LesserThan(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a lesser than comparison predicate between the two fields specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.LesserThanOpPredicateProducers.LesserThan(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object)">
            <summary>
            Creates a lesser than comparison predicate between the expression and the value specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers">
            <summary>
            Extension methods to produce greater or equal comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers.GreaterEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a greater or equal comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers.GreaterEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a greater or equal comparison predicate between the two expressions specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers.GreaterEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a greater or equal comparison predicate between the expression and the field specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers.GreaterEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a greater or equal comparison predicate between the field and the expression specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers.GreaterEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a greater or equal comparison predicate between the two fields specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterEqualOpPredicateProducers.GreaterEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object)">
            <summary>
            Creates a greater or equal comparison predicate between the expression and the value specified. 
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers">
            <summary>
            Extension methods to produce greater than comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers.GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a greater than comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers.GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a greater than comparison predicate between the two expressions specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers.GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a greater than comparison predicate between the expression and the field specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers.GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a greater than comparison predicate between the field and the expression specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers.GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a greater than comparison predicate between the two fields specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GreaterThanOpPredicateProducers.GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object)">
            <summary>
            Creates a greater than comparison predicate between the expression and the value specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers">
            <summary>
            Extension methods to produce negated equality (not equal) comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers.NotEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a negated equality comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers.NotEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a negated equality comparison predicate between the two expressions specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers.NotEqual(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a negated equality comparison predicate between the expression and the field specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers.NotEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a negated equality comparison predicate between the field and the expression specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers.NotEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a negated equality comparison predicate between the two fields specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NotEqualOpPredicateProducers.NotEqual(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object)">
            <summary>
            Creates a negated equality comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers">
            <summary>
            Extension methods to produce equality comparison predicates. Defined for various source elements, like fields, expressions...
            </summary>
            <remarks>
            Uses adapter field instances for expression wrapping, as it doesn't matter: the expression will emitted into the output, not the field containing it.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers.Equal(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates an equality comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers.Equal(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates an equality comparison predicate between the two expressions specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers.Equal(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates an equality comparison predicate between the expression and the field specified.
            </summary>
            <param name="expression">The expression.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers.Equal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates an equality comparison predicate between the field and the expression specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers.Equal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates an equality comparison predicate between the two fields specified.
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EqualOpPredicateProducers.Equal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object)">
            <summary>
            Creates an equality comparison predicate between the expression and the value specified. If the value is null or DBNull.Value a null comparison predicate is created
            </summary>
            <param name="field">The field.</param>
            <param name="toCompareWith">To compare with.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods">
            <summary>
            Extension methods defined for IExpression. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.As(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            Specifies the specified alias on the expression specified. 
            </summary>
            <param name="expression">The expression.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.CastTo``1(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Specifies the result type of the expression to be TResult
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.As(SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression,System.String)">
            <summary>
            Specifies the specified alias on the expression specified. 
            </summary>
            <param name="expression">The expression.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.CastTo``1(SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression)">
            <summary>
            Specifies the result type of the expression to be TResult
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.Mul(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand * rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.Div(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand / rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.Add(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand + rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.Sub(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand - rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.And(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand AND rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand BitwiseAnd rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand BitwiseOr rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.BitwiseXor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand BitwiseXor rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.Mod(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand MOD rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.Or(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object)">
            <summary>
            Creates a new expression: leftoperand Or rightoperand
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.ToValue``1(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the result of the passed in expression.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.ToValue``1(SD.LLBLGen.Pro.QuerySpec.ExpressionDefinition)">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the result of the passed in expression.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionExtensionMethods.WrapInNewExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp)">
            <summary>
            Wraps the operands in a new expression, using the operator specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.HybridJoin">
            <summary>
            A hybrid join is a join between an IJoinOperand and an EntityRelationBasedJoin. The IJoinOperand can be a JoinClauseBase derived join
            or another element. The join operator is specified in the right operand (EntityRelationBasedJoin). 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.#ctor(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.QuerySpec.EntityRelationBasedJoin)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.HybridJoin"/> class.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.InnerJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies an Inner join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.InnerJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Specifies an Inner join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.LeftJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies a left join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.LeftJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Specifies a left join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.RightJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies a right join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.RightJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Specifies a right join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.CrossJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Specifies a cross join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.CrossJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Specifies a cross join over the relationship specified as right operand. The left side of 'rightOperand' should match with the
            right operand of this element.
            </summary>
            <param name="rightOperand">The right operand.</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#Prepare(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Prepares the implementor by converting it to a relation object and adds it to the passed in relationcollection.
            </summary>
            <param name="creator">The creator.</param>
            <param name="toAppendTo">To append to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HybridJoin.SD#LLBLGen#Pro#QuerySpec#IJoinOperand#ConvertToDynamicRelationOperand(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Converts this instance to a dynamic relation operand.
            </summary>
            <param name="creator">The creator.</param>
            <returns>Either a FullEntityName or a DerivedTableDefinition.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HybridJoin.SD#LLBLGen#Pro#QuerySpec#IJoin#LeftOperand">
            <summary>
            Gets the left operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HybridJoin.SD#LLBLGen#Pro#QuerySpec#IJoin#RightOperand">
            <summary>
            Gets the right operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HybridJoin.SD#LLBLGen#Pro#QuerySpec#IJoin#JoinType">
            <summary>
            Gets the type of the join.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HybridJoin.LeftOperand">
            <summary>
            Gets or sets the left operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.HybridJoin.RightOperand">
            <summary>
            Gets or sets the right operand.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods">
            <summary>
            Class which defines extension methods defined on IEntityFieldCore implementing classes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.CastTo``1(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Specifies the result type of the field to be TResult
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field.</param>
            <returns></returns>
            <remarks>Use on derived table targeting fields only</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.As(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.String)">
            <summary>
            Specifies the field alias on the field, returning the field.
            </summary>
            <param name="field">The field.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.As(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String)">
            <summary>
            Specifies the field alias on the field, returning the field.
            </summary>
            <param name="field">The field.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.As(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Specifies the field alias on the field, returning the field.
            </summary>
            <param name="field">The field.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.Source``1(``0,System.String)">
            <summary>
            Specifies the object alias (source) of the field, returning the field. 
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="field">The field.</param>
            <param name="objectAlias">The object alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.ToValue``1(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the result of the passed in field.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="field">The field.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.CoerceToSelfServicingField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Coerces the field specified to self servicing field. Only works if field is an expression field. Only used in situations where the
            system created an adapter field (for expression holding) when there was no field to clone or creator at hand.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FieldExtensionMethods.Clone``1(``0,System.Boolean)">
            <summary>
            Clones the specified field.
            </summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="field">The field.</param>
            <param name="resetExpressionAggregate">if set to <c>true</c> it will reset the expression and aggregate property on the cloned field.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods">
            <summary>
            Class which defines extension methods for IJoinOperand implementing types to formulate joins between various elements.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.InnerJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type INNER JOIN between the left operand the method is called on and the specified right operand.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.LeftJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type LEFT JOIN between the left operand the method is called on and the specified right operand.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.RightJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type RIGHT JOIN between the left operand the method is called on and the specified right operand.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.CrossJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Creates a new join of type CROSS JOIN between the left operand the method is called on and the specified right operand.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The element to join with.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.InnerJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type INNER JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.LeftJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type LEFT JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.RightJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type RIGHT JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.CrossJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates a new join of type CROSS JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.InnerJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type INNER JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.LeftJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type LEFT JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.RightJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type RIGHT JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.JoinOperandExtensionMethods.CrossJoin(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String)">
            <summary>
            Creates a new join of type CROSS JOIN between the left operand the method is called on and the right operand of the specified relationship,
            over the relationship specified
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The relationship to join over</param>
            <param name="aliasStartEntity">The alias of the start entity in rightOperand.</param>
            <param name="aliasEndEntity">The alias of the end entity in rightOperand.</param>
            <returns>the created join object</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods">
            <summary>
            Extension methods defined for IPredicate implementing classes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.As(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String)">
            <summary>
            Specifies an alias for the value returned by the predicate when the predicate is used in a projection. Equal to:
            Functions.IIF(predicate, true, false).As(alias)
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.And(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Returns a new PredicateExpression with contents: predicate AND toAdd
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="toAdd">To add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.Or(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Returns a new PredicateExpression with contents: predicate OR toAdd
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="toAdd">To add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.AndNot(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Returns a new PredicateExpression with contents: predicate AND NOT toAdd
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="toAdd">To add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.OrNot(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Returns a new PredicateExpression with contents: predicate OR NOT toAdd
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="toAdd">To add.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.AsBooleanValue(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Returns the predicate wrapped in a CASE WHEN (predicate) THEN 1 ELSE 0 END construct (as a function call expression) so the predicate can be
            used as a real boolean value in other places than the Where clause.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.CaseInsensitive(SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate)">
            <summary>
            Makes the predicate a case-insensitive comparison by using the UPPER() function on the value to compare to the pattern specified in the predicate.
            Make sure the predicate's pattern is specified with uppercase characters. Only useful on case-sensitive collations.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.ToValue(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the result of the passed in predicate.
            Use this method only when specifying a predicate in the projection lambda.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateExtensionMethods.IsEmpty(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Determines whether the specified predicate or predicate expression is empty. A null passed in is also considered empty
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if the predicate passed in is null or has no elements, false otherwise</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods">
            <summary>
            Class which produces predicate instances of various types.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareValuePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            Creates a new FieldCompareValuePredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldBetweenPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Object,System.Object,System.Boolean)">
            <summary>
            Creates a new FieldBetweenPredicate
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="valueBegin">The value begin.</param>
            <param name="valueEnd">The value end.</param>
            <param name="negate">if set to <c>true</c> [negate].</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareExpressionPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a new FieldCompareExpressionPredicate
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareNullPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a new FieldCompareNullPredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <returns>ready to use FieldCompareNull predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareNullPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Boolean)">
            <summary>
            Creates a new FieldCompareNullPredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="negate">if set to <c>true</c> [negate].</param>
            <returns>ready to use FieldCompareNull predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareRangePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Boolean,System.Object[])">
            <summary>
            Creates a new FieldCompareRangePredicate instance.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="negate">if set to <c>true</c> [negate].</param>
            <param name="values">The values.</param>
            <returns>ready to use FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldLikePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a new FieldLikePredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="pattern">The pattern.</param>
            <returns>ready to use fieldLikePredicate instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareSetPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new FieldCompareSetPredicate
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="setField">The set field.</param>
            <param name="setOperator">The set operator.</param>
            <param name="setFilter">The set filter.</param>
            <param name="setRelations">The set relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="sorter">The sorter.</param>
            <param name="setGroupBy">The set group by.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.CreateFieldCompareSetPredicate(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates the field compare set predicate. This is a wrapper around the factory method.
            </summary>
            <param name="query">The query.</param>
            <param name="setOperator">The set operator.</param>
            <param name="fieldToCompare">The field to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFactoryMethods.DetermineWhetherSSCTorShouldBeUsed(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Determines the whether the selfservicing ctor should be used.
            </summary>
            <param name="field">The field.</param>
            <returns>true if the field specified is a selfservicing field or an expression on the field contains at least 1 selfservicing field, false
            otherwise. It also returns false when field is null.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods">
            <summary>
            Extension methods for PrefetchPath related elements.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithSubPath``1(``0,``0,``0[])">
            <summary>
            Defines the sub path for the specified parentElement.
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="parentElement">The parent element.</param>
            <param name="subPathElement">The sub path element.</param>
            <param name="otherSubPathElements">The other sub path elements.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithFilter``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Specifies the filter clause of the prefetch path element specified
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="element">The element.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithOrdering``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.ISortClause[])">
            <summary>
            Specifies the order by clause of the prefetch path element specified
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="element">The element.</param>
            <param name="sortClauses">The sort clauses.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithLimit``1(``0,System.Int32)">
            <summary>
            Specifies the row limit / maxNumberOfElementsToRetrieve of the prefetch path element specified
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="element">The element.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithExclusions``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Specifies the fields to exclude for the prefetch path element specified. 
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="element">The element.</param>
            <param name="fieldsToExclude">The fields to exclude.</param>
            <returns></returns>
            <remarks>If there's already a set of fields specified to exclude or include, it will be overwritten with the list of fields specified.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithInclusions``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Specifies the fields to include for the prefetch path element specified.
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="element">The element.</param>
            <param name="fieldsToInclude">The fields to include.</param>
            <returns></returns>
            <remarks>If there's already a set of fields specified to exclude or include, it will be overwritten with the list of fields specified.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.WithJoins``1(``0,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Specifies the additional joins for the prefetch path element specified.
            </summary>
            <typeparam name="TPathElement">The type of the path element.</typeparam>
            <param name="element">The element.</param>
            <param name="joins">The joins.</param>
            <returns></returns>
            <remarks>A specified alias for the prefetch path element target is ignored.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore)">
            <summary>
            Adds the specified element tot the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.ReplacePlaceHolders(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Replaces the EntityQueryPlaceHolder objects with this instance
            </summary>
            <param name="ppathElement">The ppath element.</param>
            <param name="joins">The joins.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PrefetchPathExtensionMethods.ReplacePlaceHolders(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.QuerySpec.IJoin)">
            <summary>
            Replaces the place holders.
            </summary>
            <param name="ppathElement">The ppath element.</param>
            <param name="join">The join.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods">
            <summary>
            Extension  ethods defined on QuerySpec and derived classes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.From``1(``0,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Specifies the From clause of the query
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Where``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Specifies the where clause of the query by appending it with And to the existing (if any) predicates
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.AndWhere``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Specifies the where clause of the query by appending it with And to the existing (if any) predicates
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.OrWhere``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Specifies the where clause of the query by appending it with Or to the existing (if any) predicates
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Intersect``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each entity in query which is also in the list 'entities'
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="entities">The entities to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Intersect``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each entity in query which is also in toInclude.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="toInclude">To include.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Intersect``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each element in query which is also in toInclude.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="toInclude">To include.</param>
            <returns></returns>
            <remarks>Assumes projections of query and toInclude are equal.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Intersect(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each element in query which is also in toInclude.
            </summary>
            <param name="query">The query.</param>
            <param name="toInclude">To include.</param>
            <returns></returns>
            <remarks>Assumes projections of query and toInclude are equal.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Except``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each entity in query which isn't in the list 'entities'
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="entities">The entities to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Except``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each entity in query which isn't in toExclude.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="toExclude">To exclude.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Except``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each element in query which is also in toExclude.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="toExclude">To exclude.</param>
            <returns></returns>
            <remarks>Assumes projections of query and toInclude are equal.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Except(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Specifies the where clause of the query by appending a predicate which is true for each element in query which is also in toExclude.
            </summary>
            <param name="query">The query.</param>
            <param name="toExclude">To exclude.</param>
            <returns></returns>
            <remarks>Assumes projections of query and toInclude are equal.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.WhereExists``1(``0,SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Specifies the where clause of the query by appending an EXISTS predicate based on the existsQuery predicate specified.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="existsQuery">The exists query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.WhereNotExists``1(``0,SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Specifies the where clause of the query by appending a NOT EXISTS predicate based on the existsQuery predicate specified.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="existsQuery">The exists query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.As``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},System.String)">
            <summary>
            Specifies the alias of the query as a whole. To set the alias of the target of the query, use TargetAs(alias).
            </summary>
            <param name="query">The query.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.As(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.String)">
            <summary>
            Specifies the alias of the query
            </summary>
            <param name="query">The query.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.As``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},System.String)">
            <summary>
            Specifies the alias of the query
            </summary>
            <param name="query">The query.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Select``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Specifies the projection of the query specified. It clears any existing projection and sets the projection to the one specified. This variant converts the
            specified projectionFunc into the projector lambda to pass to WithProjector and extracts the elements to place in the SQL query's projection from
            the projectionFunc. Use this overload to specify a typed resultset.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="projectionFunc">The projection func.</param>
            <returns></returns>
            <remarks>Calling this method on a DynamicQuery&lt;T&gt; will overwrite the already set projector and change the type to the return type of the
            projectionFunc specified as argument to this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Select(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Object[])">
            <summary>
            Specifies the projection of the query. It clears any existing projection and sets the projection to the one specified.
            </summary>
            <param name="query">The query.</param>
            <param name="projectionElements">The projection elements. Can't be empty</param>
            <returns>The DynamicQuery instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Select``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},System.Object[])">
            <summary>
            Specifies the projection of the query. It clears any existing projection and sets the projection to the one specified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="projectionElements">The projection elements. Can't be empty</param>
            <returns>The DynamicQuery instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.SelectFrom``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Specifies a projection on 'query' which is mimics the projection of the query 'toWrap': it contains fields which target each field in 'toWrap's projection.
            It wraps 'toWrap' as the From clause for 'query', overwriting query's From clause, if set. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <param name="toWrap">To wrap.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.SelectFrom(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Specifies a projection on 'query' which is mimics the projection of the query 'toWrap': it contains fields which target each field in 'toWrap's projection.
            It wraps 'toWrap' as the From clause for 'query', overwriting query's From clause, if set.
            </summary>
            <param name="query">The query.</param>
            <param name="toWrap">To wrap.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.OrderBy``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.ISortClause[])">
            <summary>
            Specifies the orderby of the query. All sort clauses are appended to the sort expression already present. 
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="sortClauses">The sort clauses.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.CorrelatedOver``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Specifies the correlation filter between this query and a parent query. Use this method to bind two queries together in a correlated fashion, e.g.
            in nested queries or in correlated subqueries.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="correlationFilter">The correlation filter query is related over with a parent query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Limit``1(``0,System.Int32)">
            <summary>
            Sets the limit of the query, the number of elements to retrieve. 0 means all elements (no limit). A number greater than 0 means 
            the limit specifies the number of elements to retrieve.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
            <remarks>ignored if Page data has been set.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Distinct(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Sets the AllowDuplicates flag to false, so the query won't return duplicate rows.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Distinct``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Sets the AllowDuplicates flag to false, so the query won't return duplicate rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Distinct``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Sets the AllowDuplicates flag to false, so the query won't return duplicate rows.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Page``1(``0,System.Int32,System.Int32)">
            <summary>
            Sets the paging data: the page size and the page number to retrieve, where 0 for one of them means no paging. Valid page sizes and page numbers
            are 1 or greater.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
            <remarks>Setting Page data by calling this page makes a Limit be ignored.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Exclude``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Specifies the fields to exclude from the query, fetching all other fields not mentioned in the list of fields to exclude. 
            </summary>
            <param name="query">The query.</param>
            <param name="fieldsToExclude">The fields to exclude.</param>
            <returns></returns>
            <remarks>Exclude will be ignored if this query is used in a join / from clause</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Include``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Specifies tht fields to include in the query, excluding all other fields not necessary for the fetch.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldsToInclude">The fields to include.</param>
            <returns></returns>
            <remarks>Include will be ignored if this query is used in a join / from clause</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.GroupBy``1(``0,System.Object[])">
            <summary>
            Specifies the group by clause. All fields specified are the ones to group on.
            </summary>
            <typeparam name="TDynamicQuery">The type of the dynamic query.</typeparam>
            <param name="query">The query.</param>
            <param name="fieldsToGroupOn">The fields to group on.</param>
            <returns>this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.Having``1(``0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Specifies the having clause for the group by clause of this query. Ignored if the query has no group by specified at time of execution
            </summary>
            <typeparam name="TDynamicQuery">The type of the dynamic query.</typeparam>
            <param name="query">The query.</param>
            <param name="havingPredicate">The having predicate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.ToResultset``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the resultset of the passed in query.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.ToResultset``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the resultset of the passed in query.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.ToSingleResult``1(SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the single result of the passed in query.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.ToSingleResult``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the single result of the passed in query.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.QuerySpecExtensionMethods.SetAliasOnQuery``1(``0,System.String)">
            <summary>
            Sets the alias on the query specified. 
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <param name="query">The query.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ScalarQueryExtensionMethods">
            <summary>
            Extension methods for the ScalarQueryExpression class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryExtensionMethods.ForceRowLimit(SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression)">
            <summary>
            Forces the row limit on the scalar query expression specified. A row limit is only required if the query potentially returns more values
            and it's used in a scope where it's required to return 1 element at most.
            </summary>
            <param name="toAlter">To alter.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryExtensionMethods.ToValue``1(SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression)">
            <summary>
            Placeholder method which is used in a Select(lambda func) projection inside the lambda to specify the type of the result of the passed in scalar query.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="scalarQuery">The scalar query.</param>
            <returns></returns>
            <remarks>As this is a placeholder, it does nothing. It's replaced with a ProjectionRow indexer in a compiled lambda for the Select method</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers">
            <summary>
            Class with extension methods to produce scalar queries from normal queryspec queries.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.ToScalar(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Converts the specified query to a scalar query, without enforcing a row limit.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.ToScalar(SD.LLBLGen.Pro.QuerySpec.QuerySpec,System.Boolean)">
            <summary>
            Converts the specified query to a scalar query. 
            </summary>
            <param name="query">The query.</param>
            <param name="forceRowLimit">if set to <c>true</c> it will enforce a row limit on the scalar query. Set to true if the query might return
            more than one value and the row limit will increase performance in your database of choice</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountRow(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Creates a COUNT(*) query of the query specified.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountBigRow(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Creates a COUNT_BIG(*) query of the query specified, SQL Server specific
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Avg(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Avg(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Avg() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Avg(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Avg() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.AvgDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Avg(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.AvgDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Avg(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Count(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query. Semantically equal to CountRow
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Count(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Count() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Count(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Count() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Count(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Count(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountBig(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query. Semantically equal to CountBigRow
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountBig(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the CountBig() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountBig(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the CountBig() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountBigDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the CountBig(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.CountBigDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the CountBig(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Max(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Max(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Max() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Max(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Max() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Min(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Min(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Min() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Min(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Min() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.StDev(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.StDev(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the StDev() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.StDev(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the StDev() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.StDevDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the StDev(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.StDevDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the StDev(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Sum(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Sum(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Sum() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Sum(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Sum() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.SumDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Sum(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.SumDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Sum(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Variance(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Creates a scalar query over the specified query and aggregates the first field in the projection of the query.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Variance(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Variance() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.Variance(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Variance() aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.VarianceDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a scalar query over the specified query and aggregates the expression specified with the Variance(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="expressionToAggregate">The expression to aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ScalarQueryProducers.VarianceDistinct(SD.LLBLGen.Pro.QuerySpec.QuerySpec,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a scalar query over the specified query and aggregates the field specified with the Variance(Distinct ) aggregate function.
            </summary>
            <param name="query">The query.</param>
            <param name="fieldToAggregate">The field to aggregate.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers">
            <summary>
            Class which contains extension methods to produce sort clauses on fields / expressions.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.Ascending(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates an ascending sort clause for the expression specified
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.Descending(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a descending sort clause for the expression specified
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.Ascending(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates an ascending sort clause for the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.Descending(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a descending sort clause for the field specified
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.Ascending(System.String)">
            <summary>
            Creates a sort clause for a field with the alias specified, sorting ascending
            </summary>
            <param name="alias">The alias of the field to sort on.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.Descending(System.String)">
            <summary>
            Creates a sort clause for a field with the alias specified, sorting descending
            </summary>
            <param name="alias">The alias of the field to sort on.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SortClauseProducers.CreateSortClause(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Creates a new sort clause.
            </summary>
            <param name="field">The field.</param>
            <param name="sortOperator">The sort operator.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.InnerOuterJoin">
            <summary>
            Class which defines a join of type INNER, LEFT or RIGHT.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InnerOuterJoin.#ctor(SD.LLBLGen.Pro.QuerySpec.IJoinOperand,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,SD.LLBLGen.Pro.QuerySpec.IJoinOperand)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.InnerOuterJoin"/> class.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="joinType">Type of the join.</param>
            <param name="rightOperand">The right operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InnerOuterJoin.On(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds the specified predicate as the ON clause for the join this object represents. 
            </summary>
            <param name="onClause">The on clause.</param>
            <returns>this join.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.InnerOuterJoin.CreateOnClause(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Creates the on clause for the relation object created from this instance.
            </summary>
            <param name="creator">The creator.</param>
            <returns>
            predicate to use for the ON clause for the relation created from this object, or null if no ON clause has to be used.
            </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ArgumentVerifier">
            <summary>
            Class which contains argument verification logic and which can throw exceptions if necessary. This code makes it easier to verify input arguments. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ArgumentVerifier.CantBeNull(System.Object,System.String)">
            <summary>
            Checks the argument passed in. if it's null, it throws an ArgumentNullException
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ArgumentVerifier.ShouldBeTrue``1(System.Func{``0,System.Boolean},``0,System.String)">
            <summary>
            Checks if the argument returns true with the func passed in. If not, it throws an ArgumentException with the error message specified. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="checkFunc">The check func.</param>
            <param name="argument">The argument.</param>
            <param name="formattedError">The formatted error message.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ProjectionRowDelegate`1">
            <summary>
            Delegate which is used in WithProjector methods to define the projector delegate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.CorrelationFilterFunc">
            <summary>
            Delegate which is used to compile an in-memory lambda to which is used to compare parent rows with child rows in nested-query executions.
            The lambda looks like:
            (parentValues, childValues) => FieldUtilities.ValuesAreEqual(parentValues[parentFieldIndex], childValues[childFieldIndex]);
            </summary>
            <returns>true if the child belongs to parent.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ObjectCreatorFunc`1">
            <summary>
            Delegate which is used to create new instances of an object based on a type, and which is much faster than Activator.CreateInstance
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.FullEntityName">
            <summary>
            Simple class which defines the full name of an entity, used in join preparation.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FullEntityName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.FullEntityName"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FullEntityName.EntityName">
            <summary>
            Gets or sets the name of the entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.FullEntityName.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1">
            <summary>
            Custom projector class which is used to create the final results of a projection using a delegate. THe projection is done using a compiled lambda.
            </summary>
            <typeparam name="T">the type of the array, e.g. object[]</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1.#ctor(System.Collections.IList,System.Delegate,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="projectorFunc">The projector func.</param>
            <param name="nameToIndexMap">The name to index map.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1.#ctor(System.Collections.IList,SD.LLBLGen.Pro.QuerySpec.ProjectionRowDelegate{`0},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="projectorFunc">The projector func.</param>
            <param name="nameToIndexMap">The name to index map.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectList`1.AddRowToResults(System.Collections.IList,System.Object[])">
            <summary>
            Adds the row to results.
            </summary>
            <param name="projectors">The projectors.</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectRowList">
            <summary>
            Simple class which doesn't do any projection work, it simply adds all received rows to the results list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectRowList.#ctor(System.Collections.Generic.List{System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectRowList"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectRowList.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectRowList.AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.DataProjectorToObjectRowList.AddRow(System.Object[])">
            <summary>
            Adds the row.
            </summary>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector">
            <summary>
            Specific DataValueProjector, which converts DBNull.Value values from the db to null.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector.#ctor(System.String,System.Int32,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
            <param name="setUsingCTorHint">Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way 
            (false). This flag can be ignored by the projector engine if values can better be set otherwise.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector.#ctor(System.String,System.Int32,System.Type,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
            <param name="setUsingCTorHint">Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way
            (false). This flag can be ignored by the projector engine if values can better be set otherwise.</param>
            <param name="valueProducerFunc">The the delegate to use to produce a value for this projector out of the list of object values. Be sure to set
            ValueProducerFuncParameterIndices if the delegate contained inside ValueProducerFunc requires any input values from the list of values to project</param>
            <param name="valueProducerFuncParameterIndices">the parameter indices array to use with ValueProducer. If ValueProducerFunc is null, this array is ignored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.NullAwareDataValueProjector.ValuePostProcess(System.Object,System.Object[])">
            <summary>
            Post-processes the value to project.
            </summary>
            <param name="preliminaryProjectionResult">The preliminary projection result.</param>
            <param name="sourceValues">The source values.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherSelfServicing">
            <summary>
            Class which controls a hierarchical fetch of a dynamic query. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherSelfServicing.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherSelfServicing"/> class.
            </summary>
            <param name="daoToUse">The DAO to use.</param>
            <param name="transactionToUse">The transaction to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.HierarchicalFetcherSelfServicing.ExecuteHierarchicalValueListProjection(SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Executes a hierarchical value list projection. It's assumed that toExecute is a query which has 1 or more nested queries in the projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="additionalFilter">The additional filter to use. This filter is used in fetching the data of this level. This filter is
            normally a filter based on the parent's filter/data. Is null if this is the first level/call.</param>
            <returns>result of projection</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods">
            <summary>
            Extension methods to make query execution possible on SelfServicing.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetMulti``1(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Fetches the query specified into the collection specified.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="toFill">To fill.</param>
            <param name="query">The query.</param>
            <returns>toFill</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetFirst``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Fetches the first entity of the set returned by the query and returns that entity, if any, otherwise null.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <returns>
            the first entity in the resultset, or null if the resultset is empty.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetFirst``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the first entity of the set returned by the query and returns that entity, if any, otherwise null.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>
            the first entity in the resultset, or null if the resultset is empty.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetFirst``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Fetches the first object of the set returned by the query and returns that object, if any, otherwise null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dao">The DAO.</param>
            <param name="query">The query.</param>
            <returns>
            the first object in the resultset, or null if the resultset is empty.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetFirst``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the first object of the set returned by the query and returns that object, if any, otherwise null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dao">The DAO.</param>
            <param name="query">The query.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>
            the first object in the resultset, or null if the resultset is empty.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetSingle``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0})">
            <summary>
            Fetches the single entity of the set returned by the query and returns that entity. If there are no elements or more than 1 element,
            a NotSupportedException will be thrown.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <returns>the first entity in the resultset</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the resultset has 0 or 2 or more elements, as Single requires a single value in the resultset.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetSingle``1(SD.LLBLGen.Pro.QuerySpec.EntityQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the single entity of the set returned by the query and returns that entity. If there are no elements or more than 1 element,
            a NotSupportedException will be thrown.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="query">The query.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>the first entity in the resultset</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the resultset has 0 or 2 or more elements, as Single requires a single value in the resultset.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetSingle``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Fetches the single object of the set returned by the query and returns that object. If there are no elements or more than 1 element,
            a NotSupportedException will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dao">The DAO.</param>
            <param name="query">The query.</param>
            <returns>the first object in the resultset</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the resultset has 0 or 2 or more elements, as Single requires a single value in the resultset.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetSingle``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the single object of the set returned by the query and returns that object. If there are no elements or more than 1 element,
            a NotSupportedException will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dao">The DAO.</param>
            <param name="query">The query.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>the first object in the resultset</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the resultset has 0 or 2 or more elements, as Single requires a single value in the resultset.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetScalar``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches a scalar value using the query specified, and returns this value typed as TValue, using a cast. The query specified will be converted to a
            scalar query prior to execution.
            </summary>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <returns>the value to fetch</returns>
            <remarks>Use nullable(Of T) for scalars which are a value type, to avoid crashes when the scalar query returns a NULL value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetScalar``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches a scalar value using the query specified, and returns this value typed as TValue, using a cast. The query specified will be converted to a
            scalar query prior to execution.
            </summary>
            <typeparam name="TValue">The type of the value to return.</typeparam>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>the value to fetch</returns>
            <remarks>Use nullable(Of T) for scalars which are a value type, to avoid crashes when the scalar query returns a NULL value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchQuery(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches the query specified and returns the results in plain object arrays, one object array per returned row of the query specified.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchQuery(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the query specified and returns the results in plain object arrays, one object array per returned row of the query specified.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchQuery``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0})">
            <summary>
            Fetches the query specified and returns the results in a list of TElement objects, which are created using the projectorFunc of the query specified.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchQuery``1(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery{``0},SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the query specified and returns the results in a list of TElement objects, which are created using the projectorFunc of the query specified.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <param name="transaction">The transaction.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches the specified query into a new DataTable specified and returns that datatable.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <returns>a new DataTable with the data fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the specified query into a new DataTable specified and returns that datatable.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <param name="transaction">The transaction.</param>
            <returns>a new DataTable with the data fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Data.DataTable)">
            <summary>
            Fetches the specified query into the DataTable specified and returns that datatable.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <param name="destination">The destination datatable to fetch the data into.</param>
            <returns>the destination datatable specified.</returns>
            <remarks>If the DataTable specified already has columns defined, they have to have compatible types and have to be in the same order as the
            columns in the resultset of the query. It's recommended to have columns with the same names as the resultset of the query, to be able to
            convert null values to DBNull.Value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the specified query into the DataTable specified and returns that datatable.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="query">The query.</param>
            <param name="destination">The destination datatable to fetch the data into.</param>
            <param name="transaction">The transaction.</param>
            <returns>the destination datatable specified.</returns>
            <remarks>If the DataTable specified already has columns defined, they have to have compatible types and have to be in the same order as the
            columns in the resultset of the query. It's recommended to have columns with the same names as the resultset of the query, to be able to 
            convert null values to DBNull.Value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal)">
            <summary>
            Fetches the query specified into the collection specified.
            </summary>
            <param name="toFill">To fill.</param>
            <param name="query">The query.</param>
            <returns>toFill</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchQueryAsProjection(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.QuerySpec.DynamicQuery,SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector)">
            <summary>
            Fetches the query as projection, using the projector specified.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <param name="query">The query.</param>
            <param name="projector">The projector.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SelfServicing.SelfServicingExtensionMethods.FetchQueryAsHierarchicalProjection(SD.LLBLGen.Pro.ORMSupportClasses.IDao,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Fetches the query as hierarchical projection, while keeping open the dao's connection.
            </summary>
            <param name="dao">The DAO instance.</param>
            <param name="transactionToUse">The transaction to use.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.AliasFinder">
            <summary>
            Class which is used to find all aliases in the objects to traverse. This is used to obtain all sources for a query for example.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AliasFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.AliasFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AliasFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Updates the old alias in all objects referenced by the passed in object including the passed in object itself to the new alias.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AliasFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            obtains the alias in the field passed in and in all referenced elements
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AliasFinder.TraversePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            obtains the alias in any elements in the predicate passed in. 
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.AliasFinder.AddAlias(System.String)">
            <summary>
            Adds the alias to the list to collect
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.AliasFinder.AliasesFound">
            <summary>
            Gets the aliases found.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.EntityFieldFinder">
            <summary>
            Simple class which gatherers all fields found in the object to traverse.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityFieldFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.EntityFieldFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.EntityFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor">
            <summary>
            Generic class for the expression visitors. This class visits the expressions, and doesn't 'handle' them, i.e. it doesn't reconstruct objects
            again, it simply traverses the expression tree elements. All methods return the element visited without changes.
            </summary>
            <remarks>Code based on Matt Warren's example: 
            http://blogs.msdn.com/mattwar/archive/2010/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Handles the member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Handles the element initializer.
            </summary>
            <param name="initializerToHandle">The initializer to handle.</param>
            <returns>the handled initializer</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled unary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled binary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Handles the type binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Handles the conditional expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Handles the expression list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns>The handled expression list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Handles the member assignment.
            </summary>
            <param name="assignmentToHandle">The assignment to handle.</param>
            <returns>the handled assignment.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Handles the member member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Handles the member list binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Handles the member binding list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Handles the element initializer list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns>the handled list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Handles the member init expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Handles the list init expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Handles the new array expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionVisitor.HandleInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Handles the invocation expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>expressionToHandle</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator">
            <summary>
            Simple key creator which tries to create a unique key for the expression tree handled.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled unary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled binary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Handles the type binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Handles the member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Handles the element initializer.
            </summary>
            <param name="initializerToHandle">The initializer to handle.</param>
            <returns>the handled initializer</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.HandleMemberList(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Handles the member list.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ExpressionTreeKeyCreator.Key">
            <summary>
            Gets the key created.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer">
            <summary>
            Replaces the FunctionMappingExpression instances found in the elements to traverse with the DbFunctionCall equivalent.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer"/> class.
            </summary>
            <param name="customStore">The custom store.</param>
            <param name="dqeStore">The dqe store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(SD.LLBLGen.Pro.QuerySpec.DynamicQuery)">
            <summary>
            Traverses the specified query.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(SD.LLBLGen.Pro.QuerySpec.IEntityQueryInternal)">
            <summary>
            Traverses the specified query.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(System.Object)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall)">
            <summary>
            Traverses the specified dbfunction call and contained objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.TraverseExpressionOperand(SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement)">
            <summary>
            Traverses the expression operand.
            </summary>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpressionReplacer.ReplaceFmeIfRequired(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Replaces toCheck with its equivalent DbFunctionCall if toCheck is a FunctionMappingExpression. Otherwise toCheck is returned.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>toCheck if toCheck is not a FunctionMappingExpression, otherwise the DbFunctionCall represented by toCheck</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler">
            <summary>
            Generic class for the expression handlers. 
            </summary>
            <remarks>Code based on Matt Warren's example: 
            http://blogs.msdn.com/mattwar/archive/2010/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.CoerceToType(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Coerces the linq expression to the targettype.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <param name="targetType">Type of the target.</param>
            <returns>toCoerce if toCoerce's type is equal to targetType, otherwise it's wrapped in a Convert</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleUnaryTypeAsExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary type as expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleUnaryNotExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression of type 'Not'.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleUnaryArrayLength(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the length of the unary array.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleUnaryConvertExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary convert expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted unary convert expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleBinaryExpressionBooleanOperator(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression with a boolean operator.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Expression which represents the interpreted binary expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleBinaryExpressionArithmeticOrBitOperator(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression with arithmetic or bit operator.
            </summary>
            <param name="expressionToHandle">The binary expression.</param>
            <returns>Expression which represents the interpreted binary expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Handles the member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Handles the element initializer.
            </summary>
            <param name="initializerToHandle">The initializer to handle.</param>
            <returns>the handled initializer</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled unary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled binary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Handles the type binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Handles the conditional expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Handles the expression list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns>The handled expression list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Handles the member assignment.
            </summary>
            <param name="assignmentToHandle">The assignment to handle.</param>
            <returns>the handled assignment.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Handles the member member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Handles the member list binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Handles the member binding list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Handles the element initializer list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns>the handled list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Handles the member init expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Handles the list init expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Handles the new array expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.GenericExpressionHandler.HandleInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Handles the invocation expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>expressionToHandle</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.PredicateFinder">
            <summary>
            Class which crawls over a predicateexpression and finds all predicates separately. Doesn't crawl into recursion of setpredicates. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.PredicateFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.PredicateFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the specified predicate and enclosed objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.PredicateFinder.FoundPredicates">
            <summary>
            Gets the found predicates.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer">
            <summary>
            Visitor, which transforms a passed in lambda into a proper projector lambda for WithProjector and extracts the elements to pass to Select(params object[]). 
            Uses a caching mechanism which caches the compiled result of a lambda based on the string representation of the lambda. This can increase performance. 
            The caching is tweakable and can be switched off. (See static members of this class). If a lambda contains a constant expression, the lambda isn't cached
            to avoid caching a lambda referencing a local variable and keeping the object containing the local variable into memory.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.CacheMaxEntriesPerThread">
            <summary>
            Static value which has appdomain scope, and which controls the cache size for the compiled lambdas per thread. 
            Every time the cache hits the set limit, it's cleared. Compiling lambda's is done in Select(lambda) calls to create typed projections.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.CacheCompiledLamdbas">
            <summary>
            Flag which signals whether compiled lambda's should be cached (true) or that they have to be compiled every time (false). Switch to false if
            caching gives memory problems or otherwise odd results.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer"/> class.
            </summary>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.ConvertToProjectorLambda``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Converts the specified expression to a projector lambda. The expression is first handled, which converts elements properly and then converted
            into a lambda, where the passed in, altered expression is used as the body. 
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>the compiled, ready to use delegate converted from the passed in toConvert.</returns>
            <remarks>After this method, the SelectArguments property contains the elements to pass to Select(params object[])</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.HandleToSingleResultCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles a specific call to the ToSingleResult method. Compiles the argument on the method and invokes it. This is the argument for the selectArguments.
            It then creates a convert expression to convert the result of an index in the resultsetrow to the type of the expression, so the value
            is typed. It appends a .FirstOrDefault() call to it, as the query will always return a list. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.HandleToResultsetCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles a specific call to the ToResultset method. Compiles the argument on the method and invokes it. This is the argument for the selectArguments.
            It then creates a convert expression to convert the result of an index in the resultsetrow to the type of the expression, so the value
            is typed. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.HandleToValueCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles a specific call to the ToValueCall method. Compiles the argument on the method and invokes it. This is the argument for the selectArguments.
            It then creates a convert expression to convert the result of an index in the resultsetrow to the type of the expression, so the value
            is typed. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.CorrectTypeForDerivedTableTargetingFields(System.Object,System.Type)">
            <summary>
            Corrects the type for derived table targeting fields, if element is such a field (it has to correct the type to the specified type), otherwise
            it simply returns the element specified.
            </summary>
            <param name="element">The element.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.GetCompiledLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the compiled lambda expression. It will return the cached version if applicable, otherwise it will create a new one and add that one to the cache.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.CreateExpressionKey(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Creates a unique expression key, which is unique for every expression tree. Equal expression trees return equal keys.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.ConvertExpressionToRowIndexer(System.Type)">
            <summary>
            Converts the expression specified to a row indexer expression, which obtains a value from the projection row parameter.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.AddLambdaExpressionToCache(System.String,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Adds the lambda expression to cache.
            </summary>
            <param name="key">The key.</param>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.AssureDelegateCache">
            <summary>
            Assures that the delegate cache is present
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.ProjectionLambdaTransformer.SelectArguments">
            <summary>
            Gets the select arguments. Only valid after a successful call to ConvertToProjectorLambda.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.SourceFieldFinder">
            <summary>
            Class which traverses a set of fields and their expressions and finds all fields which are actually mapped fields, so which have their ContainingObjectName
            set. These fields can then be used to be the containing field object for an expression instead of an empty expression field which doesn't have a mapping.
            This is necessary as llblgen pro doesn't have a 'source' definition, it determines that on the fly, which can go wrong if the projection has just expression
            fields and there are no relations specified. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SourceFieldFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.SourceFieldFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.SourceFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field and related objects.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.SourceFieldFinder.FieldsFound">
            <summary>
            Gets the fields found.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.QuerySpec.Textualizer">
            <summary>
            Converts the visited element into a string representation of that element. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.QuerySpec.Textualizer"/> class.
            </summary>
            <param name="initialIndentLevel">The initial indent level.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(System.Object)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleNestedQuerySpecification(SD.LLBLGen.Pro.QuerySpec.NestedQuerySpecification)">
            <summary>
            Handles the nested query specification.
            </summary>
            <param name="nestedQuery">The nested query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandlePrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore)">
            <summary>
            Handles the prefetch path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleQuery(SD.LLBLGen.Pro.QuerySpec.QuerySpec)">
            <summary>
            Handles the query.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.TraversePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the predicate.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleLikePredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate)">
            <summary>
            Handles the like predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleFullTextSearchPredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate)">
            <summary>
            Handles the full text search predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleCompareValuePredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate)">
            <summary>
            Handles the compare value predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleCompareSetPredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate)">
            <summary>
            Handles the compare set predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleCompareRangePredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate)">
            <summary>
            Handles the compare range predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleCompareNullPredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate)">
            <summary>
            Handles the compare null predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleExpressionPredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate)">
            <summary>
            Handles the expression predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleBetweenPredicate(SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate)">
            <summary>
            Handles the between predicate.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleConstant(System.Object)">
            <summary>
            Handles the constant.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.ConstantToString(System.Object)">
            <summary>
            Constants to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.HandleFunctionMapping(SD.LLBLGen.Pro.QuerySpec.FunctionMappingExpression)">
            <summary>
            Handles the function mapping.
            </summary>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.Append(System.String,System.Object[])">
            <summary>
            Appends the specified string to the builder.
            </summary>
            <param name="toAppend">To append.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.QuerySpec.Textualizer.GetTargetEntityOfNode(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore)">
            <summary>
            Gets the target entity of node.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.QuerySpec.Textualizer.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
    </members>
</doc>
