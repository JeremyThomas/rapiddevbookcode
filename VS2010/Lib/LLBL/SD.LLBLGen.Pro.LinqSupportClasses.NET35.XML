<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SD.LLBLGen.Pro.LinqSupportClasses.NET35</name>
    </assembly>
    <members>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1">
            <summary>
            Custom projector class which is used to create the final results of a valuelistprojection. THe projection is done using a compiled lambda.
            </summary>
            <typeparam name="T">the type of the array, e.g. object[]</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1.#ctor(System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="projectionInstantiator">The projection instantiator.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1.#ctor(System.Collections.Generic.List{`0},SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="projectionInstantiator">The projection instantiator.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectList`1.AddRowToResults(System.Collections.IList,System.Object[])">
            <summary>
            Adds the row to results.
            </summary>
            <param name="projectors">The projectors.</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1">
            <summary>
            Custom projector class which is used to project values to an array of type T.
            </summary>
            <typeparam name="T">the type of the array, e.g. object[]</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1"/> class.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1"/> class.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToArray`1.AddRowToResults(System.Collections.IList,System.Object[])">
            <summary>
            Adds the row to results.
            </summary>
            <param name="projectors">The projectors.</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectRowList">
            <summary>
            Simple class which doesn't do any projection work, it simply adds all received rows to the results list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectRowList.#ctor(System.Collections.Generic.List{System.Object[]})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectRowList"/> class.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectRowList.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectRowList.AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataProjectorToObjectRowList.AddRow(System.Object[])">
            <summary>
            Adds the row.
            </summary>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.EntityFieldFinder">
            <summary>
            Simple traverser which traverses expressions and other objects to gather all field objects contained inside them.
            Select fields in a scalarqueryexpression are ignored, as well as fields which target the same elements as the fields in the scalar query's projection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.EntityFieldFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.EntityFieldFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.EntityFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression)">
            <summary>
            Traverses the specified scalar query expression and contained objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.EntityFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field and related objects.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.EntityFieldFinder.FieldsFound">
            <summary>
            Gets the fields found.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression">
            <summary>
            Specific expression class which represents an ExcludeIncludeFields list. It is used both for ExcludeFields and IncludeFields.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.CommonExpression">
            <summary>
            The class which is placed between Expression and our own expression classes. This way we can introduce a Handle routine to simulare multiple-dynamic dispatch
            ala the visitor pattern, as the normal Expression object doesn't offer that feature and we're otherwise stuck with large bug switch / case statements.
            (still a switch/case is needed for .NET's Expression classes)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.CommonExpression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.CommonExpression"/> class.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="typeToUse">The type to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.CommonExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression.#ctor(System.Type,System.Boolean,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression"/> class.
            </summary>
            <param name="expressionType">Type of the expression.</param>
            <param name="containsExcludedFields">if set to <c>true</c> [contains excluded fields].</param>
            <param name="fieldSpecifications">The field specifications.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression.FieldSpecifications">
            <summary>
            Gets or sets the field specifications.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression.ContainsExcludedFields">
            <summary>
            Gets or sets the flag whether this expression represents excluded fields or included fields.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression.ExcludeIncludeFieldsListToUse">
            <summary>
            Gets or sets the exclude include fields list to use. This is the processed result of this expression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionReplacer">
            <summary>
            Specific expression handler replaces parameters in expression with the expression specified in a list for that parameter. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler">
            <summary>
            Generic class for the expression handlers. This base class defines the overall mechanism engine and derived class(es) fill in the blanks how
            various elements have to be converted to LLBLGen Pro elements.
            </summary>
            <remarks>Code based on Matt Warren's example: 
            http://blogs.msdn.com/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.Switch">
            <summary>
            The traceswitch for the Linq Expression handler.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleSetReferenceExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression)">
            <summary>
            Handles the set reference expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleExcludeIncludeFieldsExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression)">
            <summary>
            Handles the exclude include fields expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Handles the query expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandlePrefetchPathExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression)">
            <summary>
            Handles the prefetch path expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandlePathEdgeExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression)">
            <summary>
            Handles the path edge expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleDbFunctionCallExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression)">
            <summary>
            Handles the db function call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleUnaryTypeAsExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary type as expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleExceptIntersectExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression)">
            <summary>
            Handles the except expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleLikeExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression)">
            <summary>
            Handles the like expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleInMemoryEvalCandidateExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression)">
            <summary>
            Handles the in memory eval candidate expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleInClauseExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression)">
            <summary>
            Handles the in clause expression, which is an expression representing a call to Contains on a list of values.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleContainsExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression)">
            <summary>
            Handles the contains expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleAllAnyExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression)">
            <summary>
            Handles all any expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleLinqExpressionAsSetExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression)">
            <summary>
            Handles the LinqExpression as set expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleGroupByKeyReferenceExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression)">
            <summary>
            Handles the group by key reference expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>thge handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleUnaryNotExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression of type 'Not'.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleUnaryArrayLength(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the length of the unary array.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleSortClauseExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression)">
            <summary>
            Handles the sort clause expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleLLBLGenProExpressionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression)">
            <summary>
            Handles the LLBLGenProExpressionExpression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleAggregateExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression)">
            <summary>
            Handles the aggregate expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleEntityFieldExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the entity field expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleDefaultIfEmptyExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression)">
            <summary>
            Handles the default if empty expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Expression which represents the interpreted defaultifempty expression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleProjectionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression)">
            <summary>
            Handles the projection expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted projection expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleJoinResultExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression)">
            <summary>
            Handles the JoinResult expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Expression which represents the interpreted select expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleSelectExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression)">
            <summary>
            Handles the select expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Expression which represents the interpreted select expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleSelectExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression)">
            <summary>
            Handles the select expression. if a new one has to be created, the newInstance is filled, otherwise it's ignored.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="newInstance">The new instance.</param>
            <returns>
            true if a new instance is required to be created, otherwise false
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression)">
            <summary>
            Handles the join expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted join expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleGroupJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression)">
            <summary>
            Handles the groupjoin expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted groupjoin expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleGroupByExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression)">
            <summary>
            Handles the group by expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleWhereExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression)">
            <summary>
            Handles the where expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Expression which represents the interpreted where expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleUnaryConvertExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary convert expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted unary convert expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleBinaryExpressionBooleanOperator(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression with a boolean operator.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Expression which represents the interpreted binary expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleBinaryExpressionArithmeticOrBitOperator(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression with arithmetic or bit operator.
            </summary>
            <param name="expressionToHandle">The binary expression.</param>
            <returns>Expression which represents the interpreted binary expression in LLBLGen Pro form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Handles the member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Handles the element initializer.
            </summary>
            <param name="initializerToHandle">The initializer to handle.</param>
            <returns>the handled initializer</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled unary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled binary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Handles the type binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Handles the conditional expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Handles the expression list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns>The handled expression list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Handles the member assignment.
            </summary>
            <param name="assignmentToHandle">The assignment to handle.</param>
            <returns>the handled assignment.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Handles the member member binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Handles the member list binding.
            </summary>
            <param name="bindingToHandle">The binding to handle.</param>
            <returns>the handled binding</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Handles the member binding list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Handles the element initializer list.
            </summary>
            <param name="listToHandle">The list to handle.</param>
            <returns>the handled list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleMemberInitExpression(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Handles the member init expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleListInitExpression(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Handles the list init expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Handles the new array expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.HandleInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Handles the invocation expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>expressionToHandle</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.FindGroupJoinExpressionAsCopy(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the group join expression using the alias of the right side. It then creates a copy of it (and its contents) so the caller can manipulate it.
            </summary>
            <param name="aliasOfGroupJoinRightSide">The alias of group join right side.</param>
            <returns>copy of found groupjoin expression or null if not found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.MakeSet(System.Linq.Expressions.Expression)">
            <summary>
            Converts the expression passed in to a SetExpression, if it's not already a set.
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>toConvert converted into a SetExpression derived class instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.FindFunctionMapping(System.String,System.Type,System.Int32)">
            <summary>
            Finds the function mapping associated with the method/function specified. 
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="definingType">Type of the defining.</param>
            <param name="numberOfParameters">The number of parameters.</param>
            <returns>function mapping to use or null if not found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.FindFunctionMapping(System.Reflection.MethodInfo)">
            <summary>
            Finds the function mapping associated with the method/function specified.
            </summary>
            <param name="method">The method.</param>
            <returns>
            function mapping to use or null if not found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.FindFunctionMapping(System.Reflection.MemberInfo)">
            <summary>
            Finds the function mapping associated with the property specified.
            </summary>
            <param name="property">The property.</param>
            <returns>
            function mapping to use or null if not found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.InitClass">
            <summary>
            Inits the class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.TraceScopeStart(System.String)">
            <summary>
            Traces the scope start.
            </summary>
            <param name="toLog">To log.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.TraceScopeEnd(System.String)">
            <summary>
            Traces the scope end.
            </summary>
            <param name="toLog">To log.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.TraceLine(System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Traces the line.
            </summary>
            <param name="minimumLevel">The minimum level.</param>
            <param name="toLog">To log.</param>
            <param name="args">The args.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.TrackedMappings">
            <summary>
            Gets the mappings of various objects defined during the process operations of the expression tree.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.GeneratedCodeElementCreator">
            <summary>
            Gets the generated code element creator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.FrameworkElementCreator">
            <summary>
            Gets the framework element creator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.GenericExpressionHandler.FunctionMappings">
            <summary>
            Gets the function mappings.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionReplacer.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression},SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder"/> class.
            </summary>
            <param name="fromToSet">From to set.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionReplacer.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionReplacer.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionReplacer.FromToSet">
            <summary>
            Gets or sets The set of expressions to replace with the expression to replace it with.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasCorrector">
            <summary>
            Specific expression handler which checks for all setaliases found in the expression to handle if they're reachable, and if not, it will try to retrieve the
            reachable alias. Does this for EntityFields only as those are the ones which require this operation in some situations.
            Handler is used in a specific case, where an expression's handled variant is used to replace an expression elsewhere in the tree, which means aliases change. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasCorrector.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasCorrector"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasCorrector.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasCorrector.HandleEntityFieldExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the entity field expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasCorrector.HandleLLBLGenProExpressionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression)">
            <summary>
            Handles the LLBLGenProExpressionExpression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor">
            <summary>
            Specific expression handler which extracts non-projection expressions from the expression passed in, if there's no projection in the branch
            currently traversed. This is necessary in complex join scenario's where a where or orderby expression in one side of the join could contain
            another join and the where/orderby has to be moved upwards instead of being part of the side of a join and therefore has to be extracted from that
            expression tree. The extracted expressions are stored in a single list to all be handled and merged with the expression containing the expression passed 
            in, and the expression the expressions are extracted from is stripped from these expressions. 
            Not all where expressions are extracted: If a GroupJoin's Right side or DefaultIfEmpty is seen, keep the where clauses. 
            Currently extracted expressions: WhereExpression, SortClauseExpression. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.Init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.ExtractExpressions(System.Linq.Expressions.Expression)">
            <summary>
            Extracts the expressions, if any.
            </summary>
            <param name="toCrawl">To crawl.</param>
            <returns>processed toCrawl, if no projection was seen, otherwise toCrawl and nothing was changed.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.HandleDefaultIfEmptyExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression)">
            <summary>
            Handles the default if empty expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted defaultifempty expression.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.HandleGroupJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression)">
            <summary>
            Handles the groupjoin expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted groupjoin expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.HandleWhereExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression)">
            <summary>
            Handles the where expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted where expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.HandleSelectExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression)">
            <summary>
            Handles the select expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted select expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.HandleJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression)">
            <summary>
            Handles the join expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted join expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.HandleSortClauseExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression)">
            <summary>
            Handles the sort clause expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.ExtractedExpressions">
            <summary>
            Gets the extracted expressions, if any.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.SelectWithProjectionSeen">
            <summary>
            Gets a value indicating whether [select with projection seen].
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.ExtractWhereClauses">
            <summary>
            Gets or sets a value indicating whether [extract where clauses]. Default true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.ExtractSortClauses">
            <summary>
            Gets or sets a value indicating whether [extract sort clauses]. Default true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.StopAtFirstJoin">
            <summary>
            Gets or sets a value indicating whether [stop at first join]. Default false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.NonProjectionExpressionExtractor.ExtractAllWhereClauses">
            <summary>
            Gets or sets a value indicating whether [extract all where clauses]. If set to false (default), only the where clauses which are 
            NOT referred by (indirectly)a DefaultIfEmpty or rightside of a groupjoin are extracted (if enabled)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults">
            <summary>
            Simple bucket class which is used to store fetch results of a hierarchical fetch. It contains row data as well as the materialized object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.MergeChildrenWithParents(SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults,SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification)">
            <summary>
            Finds the parents for the children in this resultset and merges the children with the parents
            </summary>
            <param name="parentData">The parent data.</param>
            <param name="nestedQuery">The nested query of which this object contains the results of</param>
            <remarks>Assumes parent hash values are already calculated</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.DetermineIfMergeIsAllowedBasedOnMaxCounters(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Determines if a child should be merged with this parent, based on maxcounters.
            </summary>
            <param name="maxCounters">The max counters.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="maxNumberOfChildrenPerParent">The max number of children per parent. If 0, no limit is set</param>
            <returns>true if there's no limit or if the limit for children for this parent hasn't been reached for this nestedquery</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.RawRowData">
            <summary>
            The list of raw row data, in object rows. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.HashValuesPerFieldCombination">
            <summary>
            Gets or sets the set of hash values (with per hashvalue the indexes of the raw data/materialized object related to that hash) per field combination.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.ChildIndicesPerParentIndex">
            <summary>
            The indices of the materialized / child objects per parent object of this resultset.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults.MaterializedObjects">
            <summary>
            List of materialized objects, which is the result of the query, ready to be returned.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker">
            <summary>
            Class which is used to store various mappings between objects in various formats. These mappings are used to
            find back the aliases for objects, objects tied to aliases, etc. etc.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker"/> class.
            </summary>
            <param name="selfServicing">if set to <c>true</c> [self servicing].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddDefaultIfEmptySourceAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the default if empty source alias for the default if empty alias specified. This is required to properly find back the real source
            if the element at hand is a defaultifempty alias. 
            </summary>
            <param name="sourceAlias">The source alias.</param>
            <param name="defaultIfEmptyAlias">The default if empty alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddDerivedTable(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the derived table.
            </summary>
            <param name="toAdd">To add.</param>
            <param name="aliasOfDerivedTableQuery">The alias of derived table query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddQueryProjectionForAlias(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the projection of a query for the specified alias to the mappings. This is useful when we've a SetReferenceExpression which refers to a 
            set with an alias and we need to obtain its projection (which is all we need from the referenced set anyway, the rest is already in the 
            SetReferenceExpression.
            </summary>
            <param name="toAdd">To add.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddDerivedTableFromGroupByQueryForGroupByAlias(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the derived table which is created from the queryexpression which was created from a group by with the groupByAlias passed in so we can
            find it back if we need to add a field to the derived table.
            </summary>
            <param name="derivedTable">The derived table.</param>
            <param name="groupByAlias">The group by alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddQueryForGroupByAlias(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the query for group by alias.
            </summary>
            <param name="toAdd">To add.</param>
            <param name="groupByAlias">The group by alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddAliasContainerToKnownList(SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer)">
            <summary>
            Adds the alias container to the list of known alias containers.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.CreateNewAlias">
            <summary>
            Creates a new SetAlias.
            </summary>
            <returns>ready to use SetAlias.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddAliasObjectRelation(System.String,System.Object)">
            <summary>
            Adds the alias-object relation for an aliased llblgen pro object (entity, derived table)
            These combinations are necessary to find back an object based on a relation so new relations can be build with the same object.
            </summary>
            <param name="aliasString">The alias string.</param>
            <param name="aliasedObject">The aliased object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddAliasMemberInfo(System.Reflection.MemberInfo,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the alias member info.
            </summary>
            <param name="info">The info.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddAliasMemberInfo(System.Reflection.MemberInfo,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Boolean)">
            <summary>
            Adds the alias member info.
            </summary>
            <param name="info">The info.</param>
            <param name="alias">The alias.</param>
            <param name="addToCurrentScope">if set to true, it will add the alias to the current scope, otherwise it doesn't</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindDefaultIfEmptySourceAliasForDefaultIfEmptyAlias(System.String)">
            <summary>
            Finds the default if empty source alias for default if empty alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindAliasedObject(System.String)">
            <summary>
            Finds the aliased LLBLGen Pro object with the alias string specified. The object is part of a join, and the alias is originating from a field which
            refers to elements in a source (e.g. join)
            </summary>
            <param name="aliasString">The alias string.</param>
            <returns>Entity type or DerivedTable object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindObjectAlias(System.Reflection.MemberInfo)">
            <summary>
            Finds the object alias for the member info specified. This is the alias assigned to the set which is represented by the
            memberinfo passed in which is a memberinfo on an anonymous type created in a Join expression as the result of the join.
            </summary>
            <param name="info">The MemberInfo to look the alias for.</param>
            <returns>the alias to find, or string.Empty if not found</returns>
            <remarks>Walks all the scopes on the stack.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindObjectAlias(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Finds the object alias for the parameter specified. This is the alias assigned to the set which is represented by the
            type specified by the parameter passed in. If the parameter was a parameter of a selector of a side in a join expression, this parameter
            has the alias for the side it represented.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the alias related to the parameter or string.empty if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.GetAliasSpecifiedForMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Gets the alias specified for member info.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.IsAliasToGroupBy(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Returns true if the alias specified is an alias for a groupby expression.
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.IsAliasToDerivedTable(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Determines whether the passed in alias is an alias of a created derived table. 
            </summary>
            <param name="alias">The alias.</param>
            <returns>true if the alias is an alias for a derived table, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindQueryExpressionFromGroupBy(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the QueryExpression object which was the result of the conversion of the GroupBy expression referenced by the alias specified.
            This routine is used to obtain a hold of a groupby to modify its query contents when the query is referenced by in an aggregate.
            </summary>
            <param name="groupByAlias">The alias of the GroupBy expression which QueryExpression conversion result has to be obtained</param>
            <returns>QueryExpression which was the conversion result of the GroupBy expression which alias is passed in. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindGroupJoinExpression(System.Type)">
            <summary>
            Finds the group join expression associated with the anonymous type specified
            </summary>
            <param name="anonymousType">Type of the anonymous.</param>
            <returns>GroupJoinExpression if found, otherwise null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindGroupJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the group join expression based on the alias of the right side of the group join. 
            </summary>
            <param name="aliasOfRightSide">The alias of right side.</param>
            <returns>GroupJoinExpression if found, otherwise null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindGroupByExpression(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the group by expression represented by the alias passed in.
            </summary>
            <param name="groupByAlias">The group by alias.</param>
            <returns>GroupByExpression if found, otherwise null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindProjectionExpression(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the projection expression of the set with the alias specified. 
            </summary>
            <param name="alias">The alias.</param>
            <returns>projectionexpression, if found, otherwise null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindDerivedTableFromGroupByQuery(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the derived table object which was created from the queryexpression which was created from the groupby with the alias specified. 
            Used to add aggregate fields to the derived table, which are added later on to the groupby.
            </summary>
            <param name="groupByAlias">The group by alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddQueryExpressionInstanceForGroupByAlias(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Adds the QueryExpression instance in the _queryFromGroupByPerAlias store for the alias set on the queryexpression. 
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.UpdateGroupJoinInstanceInStores(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression)">
            <summary>
            Updates the group join instance in the dictionary stores in this class. As the handlers create new instances of groupjoin expressions
            each time a referenced element changes, these references have to be updated. 
            </summary>
            <param name="groupJoin">The group join.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.UpdateGroupByExpressionInStores(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression)">
            <summary>
            Updates the group by expression in the dictionaries in this class. As the handlers create new instances of groupby expressions
            each time a referenced element changes, these references have to be updated. 
            </summary>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.PushAliasContainer(SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer)">
            <summary>
            Pushes the alias container passed in to the internal stack.
            </summary>
            <param name="toPush">To push.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.PopAliasContainer">
            <summary>
            Pops the alias container from the stack of active alias containers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.IsKnownAnonymousType(System.Type)">
            <summary>
            checks if the type specified is a known anonymous type with member infos stored in this object
            </summary>
            <param name="anonymousType">type to check</param>
            <returns>true if the type is known, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddMemberInfosPerAnonymousType(System.Type,System.Collections.Generic.HashSet{System.Reflection.MemberInfo})">
            <summary>
            Adds the memberinfos of the type specified to the store with the anonymous type object as key.
            </summary>
            <param name="anonymousType">Type of the anonymous.</param>
            <param name="memberInfos">The member infos.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.HasKnownGroupJoinExpressionByAnonymousType(System.Type)">
            <summary>
            Checks if there's a groupjoin expression stored under the anonymous type as key
            </summary>
            <param name="anonymousType"></param>
            <returns>true if found, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddTypeInTreeForAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Type)">
            <summary>
            Adds the type in tree - alias combination to the store. Alias is key.
            </summary>
            <param name="alias">The alias.</param>
            <param name="typeInTree">The type in tree.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.AddParameterForAlias(System.Linq.Expressions.ParameterExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the parameter - alias combination to the store. Parameter is key.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindReachableAlias(System.String)">
            <summary>
            Finds the reachable alias for the caller if the passed in real alias is unreachable. 
            Although realAlias points to an alias, it can be this alias is unreachable for the caller (i.e the alias is inside a subtree with a projection).
            if that's the case, the containing group alias has to be returned instead. FindReachableAlias produces that reachable alias (which can be multiple 
            levels above the realAlias.
            </summary>
            <param name="aliasString">The alias string.</param>
            <returns>empty alias if passed in alias isn't a known alias.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindReachableAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the reachable alias for the caller if the passed in real alias is unreachable. 
            Although realAlias points to an alias, it can be this alias is unreachable for the caller (i.e the alias is inside a subtree with a projection).
            if that's the case, the containing group alias has to be returned instead. FindReachableAlias produces that reachable alias (which can be multiple 
            levels above the realAlias.
            </summary>
            <param name="realAlias">The real alias.</param>
            <returns>the alias the caller can reach instead.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.CheckIfAliasIsInScope(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Checks if the alias passed in is in scope.
            </summary>
            <param name="aliasToCheck">The alias to check.</param>
            <returns>true if the alias is 'in scope' (in one of the containers on the stack, or the alias of a right side of a groupjoin), or false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindContainerForAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the aliascontainer which contains the alias specified.
            </summary>
            <param name="toFind">To find.</param>
            <returns>the aliascontainer containing the alias or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindDerivedTableForAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Finds the derived table for alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.FindAliasForAliasString(System.String)">
            <summary>
            Finds the alias which has the specified alias string as its alias string
            </summary>
            <param name="aliasString">The alias string.</param>
            <returns>
            SetAlias instance or new one if not found
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.CreatedDerivedTables">
            <summary>
            Gets the list of created derived tables.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.SelfServicing">
            <summary>
            Flag which indicates if the provider is in a SelfServicing scenario (true) or in an Adapter scenario (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker.ReturnRealAliasForGroupByScopeElements">
            <summary>
            Gets or sets a value indicating whether [return real alias for group by scope elements].
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias">
            <summary>
            Class which is used to define an alias for SetExpressions. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias"/> class.
            </summary>
            <param name="aliasString">The alias string.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.ReplaceAliasString(System.String)">
            <summary>
            Replaces the alias string with the new value. It also updates all fields which received their objectalias from this setalias.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.SetObjectAliasForField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Sets the ObjectAlias for the field passed in to AliasString. It also stores the field as a field which is tracked by this SetAlias.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.ContainsAliasedField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Determines whether the field is an aliased field using this alias.
            </summary>
            <param name="field">The field.</param>
            <returns>true if the field is aliased with this alias, false otherwise
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.ReplaceField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Replaces the old field with the new field in the aliasedFields list.
            </summary>
            <param name="oldField">The old field.</param>
            <param name="newField">The new field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.GetAliasedFieldBasedOnOriginalField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Gets the aliased field based on original field. Used with cloned aliases to obtain the cloned field based on the original.
            </summary>
            <param name="originalField">The original field.</param>
            <returns>the clone inside _aliasedFields of the originalField passed in. Clone is created by Clone()</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.RemoveField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Removes the field passed in from the list of fields aliased by this alias. Used when a field is re-aliased.
            </summary>
            <param name="fieldToRemove">The field to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty, or represents an empty alias
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.SetAlias.AliasString">
            <summary>
            Gets the alias string, the string representation of this alias.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer">
            <summary>
            Scope class which contains alias-memberinfo combinations for a given scope (i.e. a Select bound scope)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer"/> class.
            </summary>
            <param name="aliasOfContainerOwner">The alias of container owner.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer.AddAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the alias to the container as a contained alias.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer.ContainsAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Determines whether the specified to check contains alias.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>
            	true if the alias is present in this container, false otherwise. 
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer.AliasOfContainerOwner">
            <summary>
            Gets the alias of container owner.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer.ContainedAliases">
            <summary>
            Gets the contained aliases.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ObjectCreatorFunc`1">
            <summary>
            Delegate which is used to create new instances of an object based on a type, and which is much faster than Activator.CreateInstance
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.CorrelationFilterFunc">
            <summary>
            Delegate which is used to compile an in-memory lambda to which is used to compare parent rows with child rows in nested-query executions.
            The lambda looks like:
            (parentValues, childValues) => LinqUtils.ValuesAreEqual(parentValues[parentFieldIndex], childValues[childFieldIndex]);
            </summary>
            <returns>true if the child belongs to parent.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType">
            <summary>
            Enum to specify the type of the standard operator which call was seen in the expression. This enum is used by the general handler for these method calls
            to convert them into unary or binary expressions. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.UnaryPlus">
            <summary>op_UnaryPlus call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.UnaryNegation">
            <summary>op_UnaryNegation call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.LogicalNot">
            <summary>op_LogicalNot call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Increment">
            <summary>op_Increment call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Decrement">
            <summary>op_Decrement call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Addition">
            <summary>op_Addition call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Substraction">
            <summary>op_Substraction call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Multiply">
            <summary>op_Multiple call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Division">
            <summary>op_Division call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Modulus">
            <summary>op_Modulus call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.BitwiseAnd">
            <summary>op_BitwiseAnd call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.BitwiseOr">
            <summary>op_BitwiseOr call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.ExclusiveOr">
            <summary>op_ExclusiveOr call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.LeftShift">
            <summary>op_LeftShift call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.RightShift">
            <summary>op_RightShift call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Equality">
            <summary>op_Equality call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Inequality">
            <summary>op_Inequality call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.LessThan">
            <summary>op_LessThan call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.LessThanOrEqual">
            <summary>op_LessThanOrEqual call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.GreaterThan">
            <summary>op_GreaterThan call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.GreaterThanOrEqual">
            <summary>op_GreaterThanOrEqual call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Implicit">
            <summary>op_Implicit call</summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType.Explicit">
            <summary>op_Explicit call</summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType">
            <summary>
            Expression type enum which is used 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Unknown">
            <summary>
            Unknown expression. Don't use. Is for start of our own enums
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Aggregate">
            <summary>
            The expression object represents a method call to an aggregate function.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.All">
            <summary>
            The expression object represents a method call to All(), which is represented by an AllAnyExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Any">
            <summary>
            The expression object represents a method call to Any(), which is represented by an AllAnyExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Contains">
            <summary>
            The expression object represents a method call to Queryable.Contains() or IEntityCollection(2).Contains, which is represented by a ContainsExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.DbFunctionCall">
            <summary>
            The expression object is a DbFunctionCallExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.DefaultIfEmpty">
            <summary>
            The expression object represents a method call to DefaultIfEmpty on the element represented by the contained expression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Entity">
            <summary>
            The expression object is an EntityExpression
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.EntityField">
            <summary>
            The expression object is an EntityFieldExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Except">
            <summary>
            The expression object is an ExceptIntersectExpression, which represents a call to Queryable.Except
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.ExcludeIncludeFields">
            <summary>
            The expression object is an ExcludeIncludeFieldsExpression, which represents an excludeincludefields list.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Filter">
            <summary>
            The expression object is a FilterExpression, which is an expression which can contain a LLBLGen Pro Predicate or PredicateExpression and a 
            RelationCollection (optionally)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.GroupBy">
            <summary>
            The expression object is a GroupByExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.GroupByKeyReference">
            <summary>
            The expression object is a GroupByKeyReferenceExpression, which is a simple reference to the Key of a groupby expression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.GroupJoin">
            <summary>
            The expression object is a GroupJoinExpression, which is an expression is represents a GroupJoin method call. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.InClause">
            <summary>
            The expression object is an InClauseExpression, which is an expression which represents a call to Contains() on a list of values.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.InMemoryEvalCandidate">
            <summary>
            The expression object is an InMemoryEvalCandidateExpression, which is an expression which has to be evaluated in-memory and shouldn't be used for SQL.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Intersect">
            <summary>
            The expression object is an ExceptIntersectExpression, which represents a call to Queryable.Intersect
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Join">
            <summary>
            The expression object is a JoinExpression, a join between two SetExpressions.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.JoinResult">
            <summary>
            The expression object is a JoinResultExpression, the result of a join. This expression is living only temporary in the tree.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Like">
            <summary>
            The expression object is a LikeExpression, which is an expression which will result in a LIKE operation on a string typed source and a constant string operand
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.LLBLGenExpression">
            <summary>
            The expression object is an LLBLGenExpressionExpression, which is an LLBLGen Pro expression (between fields and values and other llblgen pro expressions).
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.LinqExpressionAsSet">
            <summary>
            The expression object is a LinqExpressionAsSetExpression, which is a LinqExpression threated as a set.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.PathEdge">
            <summary>
            The expression object is a PathEdgeExpression.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.PrefetchPath">
            <summary>
            The expression object is a PrefetchPathExpression, which is the root definition of a prefetch path.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Projection">
            <summary>
            The expression object is a ProjectionExpression, which defines a projection of a source to a destination.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.ProjectionList">
            <summary>
            The expression object is a ProjectionListExpression, which is a temp result for storing projection elements for a projection expression
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Query">
            <summary>
            The expression object is a QueryExpression, which is used to wrap up the final tree in executable form. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.RelationCollection">
            <summary>
            The expression object is a RelationCollectionExpression, which is an expression containing one or more relations, for a join.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Select">
            <summary>
            The expression object is a SelectExpression, which is an expression used to define a source with projection.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Set">
            <summary>
            The expression object is a SetExpression
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.SetReference">
            <summary>
            The expression object is a SetReferenceExpression
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.SortClause">
            <summary>
            The expression object is a SortClauseExpression which represents an LLBLGen Pro SortClause object.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProExpressionType.Where">
            <summary>
            The expression object is a WhereExpression
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LikeOperation">
            <summary>
            The like operation definition to use in the LikeExpression. It defines what to do with the operand: both sides a '%', only the start or only the end.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LikeOperation.Contains">
            <summary>
            Make the operand pattern look like %operand%
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LikeOperation.StartsWith">
            <summary>
            Make the operand pattern look like operand%
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LikeOperation.EndsWith">
            <summary>
            Make the operand pattern look like %operand
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.SetContentsKind">
            <summary>
            the set destination kind, what kind of contents is inside the set. this is used to define the projection 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.SetContentsKind.Unknown">
            <summary>
            Not determined
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.SetContentsKind.Entity">
            <summary>
            The contents of the set are entities
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.SetContentsKind.NormalObject">
            <summary>
            The contents of the set are normal objects: be it anonymous typed objects or not.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ProjectionType">
            <summary>
            Type of projection represented by the ProjectionDefinition instance. The enum is an easier way to determine what projection is used. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.ProjectionType.EntityProjection">
            <summary>
            A normal entity projection, which is a normal entity fetch
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.ProjectionType.ValueListProjection">
            <summary>
            A projection of 1 or more fields of a set onto a list of values or objects. This type of projection is used internally for derived table projections as
            Linq output is either a concrete type or an anonymous type.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState">
            <summary>
            Enum to specify the handler phase name. Used to store evaluation results
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.Start">
            <summary>
            The start state, nothing has been done yet
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.PreProcessorComplete">
            <summary>
            All aliases for sources have been found, created and assigned to the sources. This is the state after SourceAliasCollector has been ran.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.AliasScopesFound">
            <summary>
            All alias scopes are found, all memberinfo-alias combinations are stored in the right scope.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.EntityTypeAndEntityFieldsRecognized">
            <summary>
            All entity types and entity field references have been found and changed into EntityExpression and EntityFieldExpression objects. 
            This is the state after MemberAccessEvaluator has been ran.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.QueryExpressionBuild">
            <summary>
            The query has been converted into a QueryExpression, or at least the first attempt to do so has been finished. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.TreeReduced">
            <summary>
            The expression tree has been reduced from a linq expression to a QueryExpression object and is ready to be executed
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.HandlerState.End">
            <summary>
            The EndState
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LinqConstants">
            <summary>
            Constants to use in the Linq provider sourcecode.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.LinqSupportClasses.LinqConstants.AggregateResultFieldAlias">
            <summary>
            The alias to set on the field which has an aggregate function set to it by a linq construction, e.g. Count(). This value is used to refer to 
            values which are the result of the aggregate function being applied, and if the field the aggregate is applied on has no alias set yet.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator">
            <summary>
            Class which creates elements specifically for adapter, like EntityField2 objects, predicates for adapter etc.
            It assumes fields for predicates already have an object alias set.
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator">
            <summary>
            Interface which defines a creator which is specific for a template group, e.g. selfservicing or adapter. It creates elements which are
            specific for these template groups. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreatePrefetchPathObject(System.Int32)">
            <summary>
            Creates a new prefetch path object for the entity type specified.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>ready to use prefetch path object. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateFieldCompareValuePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            Creates a new FieldCompareValuePredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateFieldCompareExpressionPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a new FieldCompareExpressionPredicate
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateFieldCompareNullPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a new FieldCompareNullPredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <returns>ready to use FieldCompareNull predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateFieldCompareRangePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Collections.IList)">
            <summary>
            Creates a new FieldCompareRangePredicate instance.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="valueRange">The value range for the IN clause.</param>
            <returns>ready to use FieldCompareRangePredicate </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateFieldLikePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a new FieldLikePredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="pattern">The pattern.</param>
            <returns>ready to use fieldLikePredicate instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateExpressionField(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type)">
            <summary>
            Creates a new EntityField(2) object which contains the expression passed in. The name is artificial.
            </summary>
            <param name="expressionToWrapInField">The expression to wrap in field.</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateDerivedTableReferencingField(System.String,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Type)">
            <summary>
            Creates a new derived table referencing field, of type EntityField(2).
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias (alias of set the field to refer to is in).</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateDerivedTableReferencingField(System.String,System.String,System.Type)">
            <summary>
            Creates a new derived table referencing field, of type EntityField(2).
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias (alias of set the field to refer to is in).</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateSortClause(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates a new SortClause instance
            </summary>
            <param name="fieldToSort">The field to sort.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="objectAlias">The object alias.</param>
            <returns>ready to use SortClause instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateNewArtificialFieldName">
            <summary>
            Creates a new artificial field name 
            </summary>
            <returns>the new field name to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator.CreateFieldCompareSetPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int64,System.String,System.Boolean)">
            <summary>
            Creates a new FieldCompareSetPredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="setField">The set field.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="setFilter">The set filter.</param>
            <param name="setRelations">The set relations.</param>
            <param name="setSorter">The set sorter.</param>
            <param name="setGroupBy">The set group by.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="negate">if set to true, the predicate will be negated.</param>
            <returns>ready to use FieldCompareSetPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreatePrefetchPathObject(System.Int32)">
            <summary>
            Creates a new prefetch path object for the entity type specified.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>ready to use prefetch path object. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateFieldCompareValuePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            Creates a new FieldCompareValuePredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateFieldCompareExpressionPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a new FieldCompareExpressionPredicate
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateFieldCompareNullPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a new FieldCompareNullPredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <returns>ready to use FieldCompareNull predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateFieldCompareRangePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Collections.IList)">
            <summary>
            Creates a new FieldCompareRangePredicate instance.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="valueRange">The value range for the IN clause.</param>
            <returns>ready to use FieldCompareRangePredicate </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateFieldLikePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a new FieldLikePredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="pattern">The pattern.</param>
            <returns>ready to use fieldLikePredicate instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateExpressionField(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type)">
            <summary>
            Creates a new EntityField(2) object which contains the expression passed in. The name is artificial.
            </summary>
            <param name="expressionToWrapInField">The expression to wrap in field.</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateNewArtificialFieldName">
            <summary>
            Creates a new artificial field name 
            </summary>
            <returns>the new field name to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateDerivedTableReferencingField(System.String,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Type)">
            <summary>
            Creates a new derived table referencing field, of type EntityField(2).
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias (alias of set the field to refer to is in).</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateDerivedTableReferencingField(System.String,System.String,System.Type)">
            <summary>
            Creates a new derived table referencing field, of type EntityField(2).
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias (alias of set the field to refer to is in).</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateSortClause(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates a new SortClause instance
            </summary>
            <param name="fieldToSort">The field to sort.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="objectAlias">The object alias.</param>
            <returns>ready to use SortClause instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AdapterSpecificCreator.CreateFieldCompareSetPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int64,System.String,System.Boolean)">
            <summary>
            Creates a new FieldCompareSetPredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="setField">The set field.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="setFilter">The set filter.</param>
            <param name="setRelations">The set relations.</param>
            <param name="setSorter">The set sorter.</param>
            <param name="setGroupBy">The set group by.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="negate">if set to true, the predicate will be negated.</param>
            <returns>ready to use FieldCompareSetPredicate</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater">
            <summary>
            Class which is used to update a SetAlias with a new SetAlias and also update every entity field which is related to the old alias by assigning it to the 
            new alias. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.UpdateAlias(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Object)">
            <summary>
            Updates the old alias with the new alias and also updates all fields associated with the old alias found in the object to traverse to the new alias.
            </summary>
            <param name="oldAlias">The old alias.</param>
            <param name="newAlias">The new alias.</param>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Updates the old alias in all objects referenced by the passed in object including the passed in object itself to the new alias.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Updates the alias in the field passed in and in all referenced elements
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Traverses the specified relationcollection and the relations in it.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.TraversePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates the old alias in any elements in the predicate passed in. 
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Traverses the specified object to traverse.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.ReAliasField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Realiases the field passed in, if its in the oldSetAlias. If the field is re-aliased it moves the field from the old setalias to the new setalias.
            </summary>
            <param name="fieldToRealias">The field to realias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasUpdater.GetCorrectAliasString(System.String)">
            <summary>
            Gets the correct alias string.
            </summary>
            <param name="currentAliasString">The current alias string.</param>
            <returns>the currentAliasString if it's not equal to the oldAlias, otherwise the newAlias</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder">
            <summary>
            Class which is used to find all aliases in the objects to traverse. This is used to obtain all sources for a query for example.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Updates the old alias in all objects referenced by the passed in object including the passed in object itself to the new alias.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            obtains the alias in the field passed in and in all referenced elements
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder.TraversePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            obtains the alias in any elements in the predicate passed in. 
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder.AddAlias(System.String)">
            <summary>
            Adds the alias to the list to collect
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder.AliasesFound">
            <summary>
            Gets the aliases found.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.Grouping`2">
            <summary>
            Class which implements the IGrouping interface to return grouped results in a query
            </summary>
            <typeparam name="TKey">type of the grouping key</typeparam>
            <typeparam name="TElement">type of the elements grouped</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.Grouping`2.#ctor(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.Grouping`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="elements">The grouped elements.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.Grouping`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.Grouping`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.Grouping`2.System#Linq#IGrouping{TKey@TElement}#Key">
            <summary>
            Gets the key of the <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
            <returns>The key of the <see cref="T:System.Linq.IGrouping`2"/>.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder">
            <summary>
            Class which is used to find all predicates and the aliases they contain in the predicate/expresison to traverse. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.AliasFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Updates the alias in the field passed in and in all referenced elements
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder.TraversePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates the old alias in any elements in the predicate passed in. 
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder.TraversePredicateField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Traverses the predicate field.
            </summary>
            <param name="field">The field as found in the predicate.</param>
            <param name="objectAlias">The object alias set in the predicate for the field .</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder.AddAlias(System.String)">
            <summary>
            Adds the alias to the list to collect
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder.AliasesPerPredicateFound">
            <summary>
            Gets the aliases found per predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression">
            <summary>
            Specific expression class which represents an Aggregate expression, which is an expression which defines an aggregate function on a set.
            An AggregateExpression is a SetExpression because it represents a subquery, and with that a set of one value: a scalar. The class is a
            SetExpression because it contains a scope of aliases, and alias scopes are properly handled for set expressions. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a Set node. This class is specialized for more special sets. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.#ctor(System.Type,System.Linq.Expressions.ExpressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
            <param name="typeOfExpression">The type of expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.AssignNewAliasIfRequired(SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Assigns a new alias to this set, if necessary
            </summary>
            <param name="mappings">The mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.SetRequiresProjectionFlag">
            <summary>
            Sets the RequiresProjection flag if this expression isn't an EntityExpression
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.GetRequiresProjectionFlagValueForCompleteHierarchy">
            <summary>
            Gets the requires projection flag value for complete hierarchy. It can be this setexpression has the flag set to false, however its source has the flag
            set to true. This routine is required for QueryExpressionBuilder's routines for handling where, sortclause and groupby, which have postponed element
            handling: first their source is handled and then the elements of the expression (e.g. filter, sortclause etc.). As the source is already
            handled, it could be the source was flattened together, while the element in the where, sortclause or groupby would made the merge to fail, IF it would
            have been handled and placed inside the top select expression to flatten. (Where, sortclause and groupby are converted to select expressions, then handled)
            These QueryExpressionBuilder routines set the MergeIfSourceHasProjection flag to false if the source has a projection or requires a projection in the end. 
            To do so, it requires this routine, as it can be the source is wrapped inside an empty select expression (or expressions!) which are placeholders for
            distinct, take, takepage or skip values. 
            </summary>
            <returns>the value requested</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.Source">
            <summary>
            Gets or sets the source expression of the select
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.Alias">
            <summary>
            Gets or sets the Alias assigned to this set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.RequiresProjection">
            <summary>
            Flag which is set if this set requires a projection to be usable. This flag is later on used to determine if a projection has to be injected
            into the processing result of this set if there's none defined (true), or not (false). Default is false;
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression.ContainedAliases">
            <summary>
            Gets or sets the AliasContainer which contains the aliases inside this direct set which are reachable only INSIDE this set. 
            If null, it has no aliases directly inside this set, it can be the source might have contained aliases. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="typeOfReturnValue">The type of return value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="typeOfReturnValue">The type of return value.</param>
            <param name="source">The source.</param>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression.Function">
            <summary>
            Gets or sets the aggregate function this expression represents.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression.FunctionArgument">
            <summary>
            Gets or sets the function argument expression. Can be null. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression">
            <summary>
            Expression class which defines an All or Any expression, as a replacement for a MethodCallExpression representing a call to Queryable.All or Any
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression"/> class.
            </summary>
            <param name="isAll">if set to true, this AllAnyExpression represents an All() call, otherwise an Any call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression.FilterLambda">
            <summary>
            Gets or sets the filter lambda, which is the lamdba passed into the All/Any method call
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression.Source">
            <summary>
            Gets or sets the source onto the All or Any function has to be applied.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression">
            <summary>
            Expression class which defines a Contains expression, as a replacement for a MethodCallExpression representing a call to Queryable.Contains or 
            IEntityCollection(2).Contains
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression.Operand">
            <summary>
            Gets or sets the operand for the contains expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression.Source">
            <summary>
            Gets or sets the source onto the Contains function has to be applied.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression">
            <summary>
            Specific expression class which represents a PrefetchPath. This expression is the root definition of a prefetch path and the container for the edges right
            below the root node of the graph.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression.#ctor(System.Type,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression"/> class.
            </summary>
            <param name="rootNodeType">Type of the root node.</param>
            <param name="rootEdges">The root edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression.#ctor(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression"/> class.
            </summary>
            <param name="rootNodeType">Type of the root node.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression.RootEdges">
            <summary>
            Gets the list of child edges of the root
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression.PrefetchPathToUse">
            <summary>
            Gets or sets the prefetch path to use. This is the handled path in LLBLGen Pro format
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression">
            <summary>
            Specific expression class which represents a path edge in a specified path inside a query. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression"/> class.
            </summary>
            <param name="edgeData">The edge data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.Type,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression"/> class.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="filterLambda">The filter lambda.</param>
            <param name="sorter">The sorter.</param>
            <param name="limiter">The limiter.</param>
            <param name="childEdges">The child edges.</param>
            <param name="endNodeType">End type of the node.</param>
            <param name="fieldsToExcludeInclude">The fields to exclude include.</param>
            <param name="sortClauseExpressions">The sort clause expressions.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.ProduceEdgeCollection(SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Produces the edge collection.
            </summary>
            <param name="edges">The edges.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.FilterLambda">
            <summary>
            Gets the filter lambda for this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.PathElement">
            <summary>
            Gets the prefetch path element which specifies the entity collection or single entity to fetch with using this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.Sorter">
            <summary>
            Gets the sorter to use when fetching the related entity/ies
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.SortClauseExpressions">
            <summary>
            Gets the sort clause expressions, which are created from the lambda expressions. Ignored if Sorter is set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.Limiter">
            <summary>
            Gets the limiter to limit the # of elements returned. 0 is all elements (default)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.ChildEdges">
            <summary>
            Gets the list of child edges of this edge, which are the edges from the related entity further down the path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.EndNodeType">
            <summary>
            Gets the end type of the node, the entity type which acts as the child/ren to fetch for the parent entity (the type of the related entity/ies)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression.FieldsToExcludeInclude">
            <summary>
            Gets or sets the fields to exclude include.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression">
            <summary>
            Specific expression class which represents a database function call. This expression typically contains the pattern to pass to the DbFunctionCall object
            as well as the arguments for it. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression.#ctor(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping,System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression"/> class.
            </summary>
            <param name="typeOfResult">The type of result.</param>
            <param name="mappingToUse">The mapping to use.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression.MappingToUse">
            <summary>
            Gets or sets the function mapping to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression.Arguments">
            <summary>
            Gets or sets the Arguments for this db function call. It's a readonly collection, as it is required to be easy to notify if one of the 
            enclosed linq expressions has been changed. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression">
            <summary>
            Expression class which defines an Except or Intersect expression, as a replacement for a MethodCallExpression representing a call to 
            Queryable.Except or	Queryable.Intersect. Except and Intersect share this same expression because their SQL differs only in a NOT: Except
            uses a negated filter, Intersect uses just the filter. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="operand">The operand.</param>
            <param name="isExcept">if set to true, this expression represents an Except call, otherwise an Intersect call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression.Operand">
            <summary>
            Gets or sets the expression which defines the set to exclude (Except) or include (Intersect) from source.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression">
            <summary>
            Specific expression which represents a Contains() call on a string-typed element, which can be an entityfield, expression or query, and a constant string
            as operand. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.LikeOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="operand">The operand.</param>
            <param name="operationToPerform">The operation to perform.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression.OperationToPerform">
            <summary>
            Gets or sets the operation to perform when evaluating this expression to a FieldLikeExpression
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression.Source">
            <summary>
            Gets or sets the source on which this expression operates.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression.Operand">
            <summary>
            Gets or sets the operand which is used as the link pattern.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression">
            <summary>
            Specific expression which represents a linq expression which has to be evaluated in memory and shouldn't be used to produce LLBLGen Pro objects or SQL.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression"/> class.
            </summary>
            <param name="expressionToEvaluate">The expression to evaluate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression.ExpressionToEvaluate">
            <summary>
            Gets or sets the expression to evaluate in memory
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression">
            <summary>
            Specific expression which represents a Contains() call on a list of values. In a Contains call on a list of values, the operand passed to Contains
            is compared against the list of values.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression.#ctor(System.Collections.IList,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression"/> class.
            </summary>
            <param name="values">The values.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression.Values">
            <summary>
            Gets or sets the values to compare against
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression.Operand">
            <summary>
            Gets or sets the operand.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression">
            <summary>
            Special expression class which is used in expression tree handling to have a LinqExpression be used as a SetExpression. The member is evaluated later on
            but should be seen as a set, so it can get an alias first. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression.#ctor(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
            <param name="alias">The alias.</param>
            <param name="representedExpression">The represented expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression.RepresentedExpression">
            <summary>
            Gets or sets the represented expression
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a reference to the key of a groupby
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression.#ctor(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression"/> class.
            </summary>
            <param name="keyType">Type of the key.</param>
            <param name="groupByAlias">The group by alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression.GroupByAlias">
            <summary>
            Gets or sets the group by alias.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression">
            <summary>
            Expression class which define a GroupBy expression, as a replacement for a MethodCallExpression representing a call to Queryable.GroupBy and the complete subtree
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.GroupByListLambda">
            <summary>
            Gets or sets the group by lambda, which is the lamdba passed into the group by method call
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.ResultProjection">
            <summary>
            Gets or sets the result projection of the groupby if no select folows this clause or if it has been explicitly specified.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.Key">
            <summary>
            Gets or sets the projection expression which represents the Key of the groupby
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.ElementSelectorLambda">
            <summary>
            Gets or sets the element selector lambda.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.IsGroupingOnConstant">
            <summary>
            Gets or sets a value indicating whether this instance is grouping on a constant. If set to true, the group by source is in a derived table.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression.FoldedDerivedTableForConstantGroupBy">
            <summary>
            Gets or sets the folded derived table for a constant group by, only valid if IsGroupingOnConstant is set to true.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a sort clause 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression.#ctor(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression"/> class.
            </summary>
            <param name="setType">Type of the set.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="elementToSortLambda">The element to sort lambda.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression.OperatorToUse">
            <summary>
            Gets or sets the sort operator to use for this clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression.ElementToSortLambda">
            <summary>
            Gets or sets the lambda expression which defines the element to sort
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression">
            <summary>
            Expression class which define a DefaultIfEmpty expression, as a replacement for a MethodCallExpression representing a call to Queryable.DefaultIfEmpty
            and the complete subtree
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression.Sequence">
            <summary>
            Gets or sets the sequence Expression the DefaultIfEmpty method call is meant for.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a GroupJoin node. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.#ctor(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
            <param name="left">The left side of the groupjoin.</param>
            <param name="right">The right side of the groupjoin.</param>
            <param name="leftSelector">The left selector for keys.</param>
            <param name="rightSelector">The right selector for keys.</param>
            <param name="resultProjection">The result projection for the groupjoin.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.Left">
            <summary>
            Gets or sets the left side of the GroupJoin
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.Right">
            <summary>
            Gets or sets the right side of the GroupJoin
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.LeftSelector">
            <summary>
            Gets or sets the left selector for keys
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.RightSelector">
            <summary>
            Gets or sets the right selector for keys
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.ResultProjection">
            <summary>
            Gets or sets the result projection of the groupjoin
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.ExtractedExpressionsFromRightSide">
            <summary>
            Gets or sets the extracted expressions from right side. These expressions are extracted in the final phase, so defaultifempty references to the right side
             can obtain the wrapped where clauses.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression.UseProjectionInHandler">
            <summary>
            Gets or sets the flag to use the projection in the handler (true) or not (false). Normally, this flag is false, but when the groupjoin is the 
            most outer expression, it has to use the projection, which can access the right side of the groupjoin (a groupjoin is normally equal to the left side).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a reference to a set with an alias elsewhere in the tree.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression.#ctor(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression">
            <summary>
            Specific expression class which represents a list of elements for a projection, e.g. fields and constants.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.IRelationPropagator">
            <summary>
            Interface which is used on expression classes which propagate a set of relations upwards which once belonged to elements inside the implementing object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IRelationPropagator.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations passed in.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IRelationPropagator.RelationsToUse">
            <summary>
            Gets the relations required to access this element. Can be null (which means: no relations needed)
            This collection is filled if the element represented by this expression is a related element so a relation is required to reach that element.
            The relations in this collection are always IEntityRelation, as dynamic relations aren't the result of an access of a related entity/collection,
            which are the source of the relations in this set.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression"/> class.
            </summary>
            <param name="typeOfResultProjection">The type of result projection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.AddElement(System.String,System.Object,System.Type,System.Int32)">
            <summary>
            Adds the specified element to the projectionlist
            </summary>
            <param name="name">The name.</param>
            <param name="element">The element.</param>
            <param name="elementType">Type of the element.</param>
            <param name="elementIndex">Index of the element in the indices array to pass to the projection func.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.AddExpressionElement(System.String,System.Type,System.Linq.Expressions.Expression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Adds the linq expression element to this expression
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementType">Type of the element.</param>
            <param name="elementToAdd">The element to add.</param>
            <param name="elementIndex">Index of the element in the indices array which has to be passed to the projector func.</param>
            <param name="generatedCodeCreator">The generated code creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.AddEntityFieldsToProjectionList(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Adds the entity fields of the entity represented by the entityExpression to the projection list. If the entity is in a TargetPerEntity,
            the inheritance relations are also added to the projectionList's relations collection.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="creator">The creator for the generated code.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.ElementsPerName">
            <summary>
            Gets or sets the list of elements in the projection list, stored under the name of the element they'll project to
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.ElementTypesPerName">
            <summary>
            Gets or sets the list of the types of the elements in the projection list, stored under the name of teh element they'll project to.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.Elements">
            <summary>
            Gets or sets the elements in the projection list in the order of appearance
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.ProjectorFuncIndexPerElement">
            <summary>
            Gets or sets the list of flags if an element is a CTor argument or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.RelationsToUse">
            <summary>
            Relations collection for the relations to traverse to be able to fulfill the projection. These relations are from the fields in the 
            projection specification itself.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.ProjectionInstantiatorLambda">
            <summary>
            Gets or sets the projection instantiator function lambda. This function is a modified version of the projection lambda
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression.DuplicateElementOrigIndexToRealIndex">
            <summary>
            Gets the list of indexes for elements which have a name which is already in this list and therefore are ignored. Key: index of element which was
            ignored, value: index of element with same name. THIS index is then used to obtain the value for the element which refers to the index of the element
            ignored.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper">
            <summary>
            Specific expression handler which finds all Alias scopes (every 'RequiresProjection' border is seen as a new alias scope), and stores all aliases found
            inside such a scope in a newly pushed scope in the AliasSourceMappings.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.ReworkJoinTreeIfRequired(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression)">
            <summary>
            Reworks the join tree if required. This means that it will extract nonprojection containing where/orderby expressions from subbranches and will 
            move them up front to avoid unnecessary scoping. 
            </summary>
            <param name="toRework">To rework.</param>
            <returns>the reworked tree.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.MergeExtractedExpressionsIntoMainExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression,System.Collections.Generic.List{SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression})">
            <summary>
            Merges the extracted expressions into a tree with the containingJoin, in such a way that the extractedExpressions become 
            parents of the containing join. They also will get their RequiresProjection flag set to false.
            </summary>
            <param name="containingJoin">The containing join.</param>
            <param name="extractedExpressions">The extracted expressions.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.ChangeTypeForSortClause(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression,System.Type)">
            <summary>
            Changes the type for sort clause.
            </summary>
            <param name="sortClauseExpression">The sort clause expression.</param>
            <param name="newType">The new type.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.ChangeTypeForWhere(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression,System.Type)">
            <summary>
            Changes the type for where.
            </summary>
            <param name="whereExpression">The where expression.</param>
            <param name="newType">The new type.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.PushScopeIfRequired(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression)">
            <summary>
            Pushes the scope if required.
            </summary>
            <param name="toCheck">To check.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.AddAliasToActiveAliasContainer(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the alias to active alias container.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.AliasScoper.InitialContainer">
            <summary>
            Gets the initial container pushed onto the stack if there wasnt a root node with a projection. If null, the root node of the tree
            did have a projection and the container is already stored in that node.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner">
            <summary>
            Specific expression handler clones EntityExpression and EntityFieldExpression instances, and with that the rest of the passed in expression. 
            The cloning is based on the working of the genericexpressionhandler which makes copies of an expression if an element has changed. Cloner changes
            entityexpressions and entityfieldexpressions so a lambda referencing indireclty an EntityFieldExpression gets cloned entirely.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner.HandleEntityFieldExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the entity field expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner.HandleQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Handles the query expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner.CloneAliasAndAddToCache(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Clones the alias passed in and adds it to the cache.
            </summary>
            <param name="toClone">To clone.</param>
            <returns>clone of alias passed in</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.Cloner.CopyRelationsInEntityFieldExpressionClones">
            <summary>
            Gets or sets a value indicating whether relations inside entityfieldexpressions are copied to the clones. Default is true. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector">
            <summary>
            Specific expression handler which converts all elements passed in into entityfieldexpression objects with the name specified with the element
            and which targets a derived table with the alias specified. 
            This is required for (among other things) groupby key references for example as these fields are always fields targeting a derived table.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
            <param name="aliasToTarget">The alias to target.</param>
            <param name="elementsToName">dictionary of elements per name which have to be replaced by derivedtable fields..</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector.HandleQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Handles the query expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector.HandleLLBLGenProExpressionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression)">
            <summary>
            Handles the LLBLGenProExpressionExpression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector.HandleEntityFieldExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the entity field expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.DerivedTableFieldInjector.ConvertToDerivedTableFieldExpression(System.Linq.Expressions.Expression)">
            <summary>
            Converts to derived table field expression.
            </summary>
            <param name="toConvert">To convert.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer">
            <summary>
            Specific expression handler which traverses a lambda expression and collects all EntityFieldExpression, EntityExpression, QueryExpressions and 
            LLBLGenProExpressionExpression elements
            in the lambda and converts them into array index / parameter access expressions. 
            This handler is used to convert a lambda found in a projection into a delegate to be used to produce values for projections in an llblgen pro projection
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.ProcessLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Processes the lambda passed in.
            </summary>
            <param name="toProcess">To process.</param>
            <returns>The processed lambda, with new parameters and all gatherable elements converted to array index elements.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleUnaryConvertExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary convert expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted unary convert expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Handles the member assignment.
            </summary>
            <param name="assignmentToHandle">The assignment to handle.</param>
            <returns>the handled assignment.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleInvocationExpression(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Handles the invocation expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>expressionToHandle</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleDbFunctionCallExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression)">
            <summary>
            Handles the db function call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleLLBLGenProExpressionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression)">
            <summary>
            Handles the LLBLGenProExpressionExpression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Handles the query expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleEntityFieldExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the entity field expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.HandleElementToGather(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Handles the element to gather.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="nameOfElement">The name of element to use if no name information is available on the stack.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.CreateValuesIndexingExpression(System.Int32,System.Type)">
            <summary>
            Creates a linq expression which produces the value in the values parameter at the index found in indicesParameter[index]
            </summary>
            <param name="index">The index in indices which is used by the element we're about to replace.</param>
            <param name="targetType">Type of the element to have.</param>
            <returns>expression to be used as a replacement of the found element to gather</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.AddElementToCollector(System.Linq.Expressions.Expression)">
            <summary>
            Adds the element to collector.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.ParameterIndexToGatheredElement">
            <summary>
            Gets the parameter index to gathered element list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.GatheredElementToParameterName">
            <summary>
            Gets the gatheredelement to parameter name list. This list is used to determine the parameter name inside a ctor related to a gathered element or
            member init which is used for aliasing query elements. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.LocalFunctionProducer.GatheredElementToParameterType">
            <summary>
            Gets the gatheredelement to parameter type list. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder">
            <summary>
            Specific expression handler which looks up a correlationRelation in the tree to process and stops when one is found. It also removes the
            found correlationRelation from the entity expression it was found on, if the <see cref="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder.RemoveFoundRelationFromContainingExpression"/> flag
            is set to true.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder.CorrelationRelationFound">
            <summary>
            Gets the correlation relation found.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CorrelationRelationFinder.RemoveFoundRelationFromContainingExpression">
            <summary>
            Gets or sets a value indicating whether this handler should remove found relation from containing expression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.InMemoryEvalCandidateFinder">
            <summary>
            Class which finds all in-memory evaluation candidate expressions using a generic expression tree handler. An expression is an in-memory
            evaluation candidate if it has no dependencies on elements outside itself, e.g. parameters aren't referring to elements outside the local subtree.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.InMemoryEvalCandidateFinder.#ctor(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression},SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.InMemoryEvalCandidateFinder"/> class.
            </summary>
            <param name="candidates">The candidates to wrap into InMemoryEvalCandidateExpression instances.</param>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.InMemoryEvalCandidateFinder.Wrap(System.Linq.Expressions.Expression)">
            <summary>
            Wraps the specified expression into InMemoryEvalCandidateExpression instances if applicable.
            </summary>
            <param name="toWrap">To wrap.</param>
            <returns>the passed in expression wrapped into InMemoryEvalCandidateExpression object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.InMemoryEvalCandidateFinder.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker">
            <summary>
            Class which checks whether a parameter is dependent on elements outside the current subtree being evaluated. If so, the subtree
            can't be used as an in-memory evaluation candidate.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker"/> class.
            </summary>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker.IsIndependent(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Determines whether the specified to check is independent, i.e. has no parameters depending on elements outside the expression passed in.
            </summary>
            <param name="toCheck">To check.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <returns>
            true if the passed in expression is independent, i.e. has no parameters depending on elements outside the expression passed in.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle"></param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.ExpressionDependencyChecker.ExpressionIsIndependent">
            <summary>
            Gets/sets the flag if the current expression to check is independent (true) or not (false).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CandidateFinder">
            <summary>
            Class which does the actual candidate finding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CandidateFinder.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CandidateFinder"/> class.
            </summary>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CandidateFinder.FindCandidates(System.Linq.Expressions.Expression)">
            <summary>
            Finds the candidates.
            </summary>
            <param name="toExamine">To examine.</param>
            <returns>the set of candidates found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CandidateFinder.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.CandidateFinder.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionCoercer">
            <summary>
            Specific expression handler which converts any expression not already a QueryExpression into a QueryExpression. This class is used for
            special cases like:
            var q = metaData.Customer;
            so 'q' is not really an expression tree but a single Constant expression. 
            
            but it also makes sure that for example LLBLGen Pro expressions in the form of a scalarqueryexpression object created by an additional scalar
            method call on a query, are converted into a query.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionCoercer.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionCoercer"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionCoercer.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>QueryExpression, where the entity expression is simply converted into a QueryExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionCoercer.HandleLLBLGenProExpressionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression)">
            <summary>
            Handles the LLBLGenProExpressionExpression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer">
            <summary>
            Simple class which is used to store the function mapping stores so they can be passed around.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer"/> class.
            </summary>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer.FindFunctionMapping(System.String,System.Type,System.Int32)">
            <summary>
            Finds the function mapping associated with the method/function specified. 
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="definingType">Type of the defining.</param>
            <param name="numberOfParameters">The number of parameters.</param>
            <returns>function mapping to use or null if not found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer.FindFunctionMapping(System.Reflection.MethodInfo)">
            <summary>
            Finds the function mapping associated with the method/function specified.
            </summary>
            <param name="method">The method.</param>
            <returns>
            function mapping to use or null if not found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer.FindFunctionMapping(System.Reflection.MemberInfo)">
            <summary>
            Finds the function mapping associated with the property specified.
            </summary>
            <param name="property">The property.</param>
            <returns>
            function mapping to use or null if not found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer.FindFunctionMapping(System.String)">
            <summary>
            Finds the function mapping for the property/method/function with the key specified.
            </summary>
            <param name="key">The key.</param>
            <returns>the mapping sought or null if not found</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification">
            <summary>
            Simple class which contains a nested query specification inside a ValueListProjectionDefinition.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification"/> class.
            </summary>
            <param name="nestedQuery">The nested query.</param>
            <param name="indexInResultRow">The index in result row of parent.</param>
            <param name="correlationFilters">The correlation filters, which are predicates which tie nested query to parent.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.GetFieldIndicesForCompleteCorrelationFilter(System.Boolean)">
            <summary>
            Gets the field indices for all fields in the complete correlation filter. Based on the flag specified, the parent or the child field indexes are returned.
            </summary>
            <param name="parentFields">if true, parentfield indexes are returned, otherwise child field indexes</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.AddPredicateInfo(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32,System.Int32)">
            <summary>
            Adds the predicate info which is determined after the nested query has been processed by the valueprojection it is located in to this nested query
            so it can be used later on when the nested query has to be executed.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="parentField">The parent field.</param>
            <param name="childField">The child field.</param>
            <param name="parentFieldIndex">Index of the parent field.</param>
            <param name="childFieldIndex">Index of the child field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.StripCorrelationFiltersFromNestedQueryFilter">
            <summary>
            Strips the correlation filters from the filter of the contained nested query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.NestedQuery">
            <summary>
            Gets or sets the nested query object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.IndexInResultRow">
            <summary>
            Gets or sets the index in result row of the parent.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.CorrelationFilters">
            <summary>
            Gets or sets the correlation filters, which tie this nested query with the parent, containing, query. Can be empty (in which case the results of
            this nested query belong to every parent)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.RowComparerFunc">
            <summary>
            Gets or sets the row comparer func which is a compiled lambda expression build from the predicates of the correlation filter of this nested query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.CorrelationPredicateInfos">
            <summary>
            Gets the predicate info per correlation predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo">
            <summary>
            simple class which is used to store predicate info once the correlationfilter predicates have been processed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo"/> class.
            </summary>
            <param name="parentField">The parent field.</param>
            <param name="childField">The child field.</param>
            <param name="parentFieldIndex">Index of the parent field.</param>
            <param name="childFieldIndex">Index of the child field.</param>
            <param name="correlationPredicate">The correlation predicate.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo.ParentField">
            <summary>
            Gets or sets the parent field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo.ChildField">
            <summary>
            Gets or sets the child field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo.ParentFieldIndex">
            <summary>
            Gets or sets the index of the parent field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo.ChildFieldIndex">
            <summary>
            Gets or sets the index of the child field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification.PredicateInfo.CorrelationPredicate">
            <summary>
            Gets or sets the correlation predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1">
            <summary>
            Class to specify a path edge. These edges are used to specify a prefetch path inside a linq query.
            </summary>
            <typeparam name="TEndNode">The type of the end node.</typeparam>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge">
            <summary>
            Interface for the edge list of WithPath and PathEdge ctor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.FilterLambda">
            <summary>
            Gets the filter lambda for this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.SortClauseExpressions">
            <summary>
            Gets the sort clause expressions, which are created from the lambda expressions. Ignored if Sorter is set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.PathElement">
            <summary>
            Gets the prefetch path element which specifies the entity collection or single entity to fetch with using this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.Sorter">
            <summary>
            Gets the sorter to use when fetching the related entity/ies. If not set, SortClauseExpressions are assumed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.Limiter">
            <summary>
            Gets the limiter to limit the # of elements returned. 0 is all elements (default)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.ChildEdges">
            <summary>
            Gets the list of child edges of this edge, which are the edges from the related entity further down the path. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.EndNodeType">
            <summary>
            Gets the end type of the node, the entity type which acts as the child/ren to fetch for the parent entity (the type of the related entity/ies)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge.FieldsToExcludeInclude">
            <summary>
            Gets the fields to exclude or include.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1"/> class.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="childEdges">The child edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1"/> class.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="filterLambda">The filter lambda.</param>
            <param name="childEdges">The child edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1"/> class.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="filterLambda">The filter lambda.</param>
            <param name="limiter">The limiter.</param>
            <param name="childEdges">The child edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1"/> class.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="filterLambda">The filter lambda.</param>
            <param name="sorter">The sorter.</param>
            <param name="limiter">The limiter.</param>
            <param name="childEdges">The child edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1"/> class.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="filterLambda">The filter lambda.</param>
            <param name="sorter">The sorter.</param>
            <param name="limiter">The limiter.</param>
            <param name="fieldsToExcludeInclude">The fields to exclude include.</param>
            <param name="childEdges">The child edges.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.FilterLambda">
            <summary>
            Gets the filter lambda for this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.PathElement">
            <summary>
            Gets the prefetch path element which specifies the entity collection or single entity to fetch with using this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.Sorter">
            <summary>
            Gets the sorter to use when fetching the related entity/ies
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.Limiter">
            <summary>
            Gets the limiter to limit the # of elements returned. 0 is all elements (default)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.ChildEdges">
            <summary>
            Gets the list of child edges of this edge, which are the edges from the related entity further down the path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.EndNodeType">
            <summary>
            Gets the end type of the node, the entity type which acts as the child/ren to fetch for the parent entity (the type of the related entity/ies)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.FieldsToExcludeInclude">
            <summary>
            Gets the fields to exclude or include.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PathEdge`1.SortClauseExpressions">
            <summary>
            Gets the sort clause expressions, which are created from the lambda expressions. Ignored if Sorter is set.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2">
            <summary>
            Handles more advanced path specifications than just a member expression. 
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1">
            <summary>
            Class which produces path edges for an edge specification specified with a queryable.WithPath(source, func) call.
            </summary>
            <typeparam name="TSource">type of the source</typeparam>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser`1">
            <summary>
            Interface containing the 'core' methods of a lambda-based prefetch path.
            </summary>
            <typeparam name="TSource">Type of the entity returned from the parant query (ie the root of the prefetch path)</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser`1.Prefetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            For creating  complex prefetch paths.
            </summary>
            <typeparam name="TDestination">Type of entity to be prefetched.</typeparam>
            <param name="expression">Lambda expression representing the field to prefetch</param>
            <returns>this instance for method chaining: for performing sorting/filtering/limiting/excluding/including/subpaths on the prefetch path</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser`1.Prefetch(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            For creating simple prefetch paths, where all you need is to prefetch an entity/entitycollection and no sorting/filtering etc is required.
            </summary>
            <param name="expression">A member access expression lambda, e.g. 'c=&gt;c.Orders' to fetch related orders for a customer instance</param>
            <returns>this instance for method chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1"/> class.
            </summary>
            <param name="creator">The element creator.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Collections.Generic.List{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1"/> class.
            </summary>
            <param name="creator">The element creator.</param>
            <param name="edges">The edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.Prefetch``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            For creating  complex prefetch paths.
            </summary>
            <typeparam name="TDestination">Type of entity to be prefetched.</typeparam>
            <param name="expression">Lambda expression representing the field to prefetch</param>
            <returns>this instance for method chaining: for performing sorting/filtering/limiting/excluding/including/subpaths on the prefetch path</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.Prefetch(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            For creating simple prefetch paths, where all you need is to prefetch an entity/entitycollection and no sorting/filtering etc is required.
            </summary>
            <param name="expression">A member access expression lambda, e.g. 'c=&gt;c.Orders' to fetch related orders for a customer instance</param>
            <returns>this instance for method chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.ParseComplexPathSpecification``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            Parses a complex path specification.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="expression">The expression.</param>
            <returns>this instance for method chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.ParseSimplePathSpecification(System.Linq.Expressions.MemberExpression)">
            <summary>
            Parses a simple path specification.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.CreatePathEdge(System.Type,System.Type,System.String)">
            <summary>
            Creates a PathEdge instance from the input specified
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>a PathEdge instance which is usable for the prefetch path specification and which represents the input specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.RemoveUnary(System.Linq.Expressions.Expression)">
            <summary>
            Removes unnecessary wrapper expressions from the expression passed in.
            </summary>
            <param name="toUnwrap">To unwrap.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.Creator">
            <summary>
            Gets or sets the element creator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.CurrentEdge">
            <summary>
            Gets or sets the current edge 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeRootParser`1.RootEdges">
            <summary>
            Gets the root edges.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2">
            <summary>
            Interface with methods for doing more complex work with prefetch path
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.FilterOn(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Specifies that the prefetch path should be filtered.
            </summary>
            <param name="predicate">Lambda expression specifying the filter</param>
            <returns>This instance to allow for method chaining.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.OrderBy(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Specifies that a sorting expression should be applied to the prefetched data.
            </summary>
            <param name="sorter">Lambda expression specifying the field to filter on.</param>
            <returns>This instance to allow for method chaining.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Specifies that a sorting expression should be applied to the prefetched data in descending order.
            </summary>
            <param name="sorter">Lambda expression specifying the field to filter on.</param>
            <returns>This instance to allow for method chaining.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.SubPath(System.Func{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{`1},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{`1}})">
            <summary>
            Specifies a sub-path for the prefetch path.
            </summary>
            <param name="subPathSpecification">Delegate for creating the subpath.</param>
            <returns>
            This instance to allow for method chaining
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.SubPath``1(System.Func{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{``0},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{``0}})">
            <summary>
            Specifies a sub-path for the prefetch path. Use this overload to specify a subpath related to a subtype.
            </summary>
            <typeparam name="TSubPath">The type of the sub path node.</typeparam>
            <param name="subPathSpecification">Delegate for creating the subpath.</param>
            <returns>
            This instance to allow for method chaining
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.LimitTo(System.Int32)">
            <summary>
            The number of results returned should be limited to the specified number of items.
            </summary>
            <param name="limit">Number of items to which the resultset should be limited.</param>
            <returns>This instance to allow for method chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.Include(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Explicity Specifies fields on the prefetched data should be fetched from the database.
            </summary>
            <param name="toInclude">Expressions containing the fields to be included.</param>
            <returns>This instance to allow for method chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeParser`2.Exclude(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Specifies which fields on the prefetched data should not be fetched from the database.
            </summary>
            <param name="toExclude">Expressions containing the fields to be excluded</param>
            <returns>This instance to allow for method chaining.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Collections.Generic.List{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge},SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2"/> class.
            </summary>
            <param name="elementCreator">The element creator.</param>
            <param name="edges">The edges.</param>
            <param name="currentEdge">The current edge.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.FilterOn(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Specifies that the prefetch path should be filtered.
            </summary>
            <param name="predicate">Lambda expression specifying the filter</param>
            <returns>
            This instance to allow for method chaining.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.OrderBy(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Specifies that a sorting expression should be applied to the prefetched data.
            </summary>
            <param name="sorter">Lambda expression specifying the field to filter on.</param>
            <returns>This instance to allow for method chaining.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Specifies that a sorting expression should be applied to the prefetched data in descending order.
            </summary>
            <param name="sorter">Lambda expression specifying the field to filter on.</param>
            <returns>
            This instance to allow for method chaining.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.SubPath(System.Func{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{`1},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{`1}})">
            <summary>
            Specifies a sub-path for the prefetch path.
            </summary>
            <param name="subPathSpecification">Delegate for creating the subpath.</param>
            <returns>
            This instance to allow for method chaining
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.SubPath``1(System.Func{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{``0},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{``0}})">
            <summary>
            Specifies a sub-path for the prefetch path. Use this overload to specify a subpath related to a subtype.
            </summary>
            <typeparam name="TSubPath">The type of the sub path node.</typeparam>
            <param name="subPathSpecification">Delegate for creating the subpath.</param>
            <returns>
            This instance to allow for method chaining
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.LimitTo(System.Int32)">
            <summary>
            The number of results returned should be limited to the specified number of items.
            </summary>
            <param name="limit">Number of items to which the resultset should be limited.</param>
            <returns>
            This instance to allow for method chaining
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.Include(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Explicity Specifies fields on the prefetched data should be fetched from the database.
            </summary>
            <param name="toInclude">Expressions containing the fields to be included.</param>
            <returns>
            This instance to allow for method chaining
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.Exclude(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Specifies which fields on the prefetched data should not be fetched from the database.
            </summary>
            <param name="toExclude">Expressions containing the fields to be excluded</param>
            <returns>
            This instance to allow for method chaining.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.HandleIncludeExcludeFields(System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[],System.Boolean)">
            <summary>
            Handles the include exclude field specifications
            </summary>
            <param name="fieldExpressions">The field expressions.</param>
            <param name="exclude">if set to <c>true</c> [exclude].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.ComplexPathEdgeParser`2.ParseSorter(System.Linq.Expressions.LambdaExpression,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Parses the sorter expression lambda
            </summary>
            <param name="sorter">The sorter.</param>
            <param name="sortOperator">The sort operator.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric">
            <summary>
            Container of a pathedge without using generics.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric"/> class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.ChildEdges">
            <summary>
            Gets the list of child edges of this edge, which are the edges from the related entity further down the path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.FilterLambda">
            <summary>
            Gets the filter lambda for this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.PathElement">
            <summary>
            Gets the prefetch path element which specifies the entity collection or single entity to fetch with using this edge
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.Sorter">
            <summary>
            Gets the sorter to use when fetching the related entity/ies
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.SortClauseExpressions">
            <summary>
            Gets the sort clause expressions, which are created from the lambda expressions. Ignored if Sorter is set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.Limiter">
            <summary>
            Gets the limiter to limit the # of elements returned. 0 is all elements (default)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.SD#LLBLGen#Pro#LinqSupportClasses#IPathEdge#ChildEdges">
            <summary>
            Gets the list of child edges of this edge, which are the edges from the related entity further down the path.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.EndNodeType">
            <summary>
            Gets the end type of the node, the entity type which acts as the child/ren to fetch for the parent entity (the type of the related entity/ies)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathEdgeNonGeneric.FieldsToExcludeInclude">
            <summary>
            Gets the fields to exclude or include.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator">
            <summary>
            Creates IPrefetchPathElementCore instances based on a source type and a destination type.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator"/> class.
            </summary>
            <param name="elementCreator">The element creator.</param>
            <param name="destinationType">Type of the destination.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator.CreatePrefetchElement">
            <summary>
            Creates the prefetch path element.
            </summary>
            <returns>ready to use prefetch path element</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator.CreateEntityCollectionAdapter">
            <summary>
            Creates a new entity collection for the destination type for Adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator.CreateEntityCollectionSelfServicing">
            <summary>
            Creates a new entity collection for the destination type for selfservicing
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.PrefetchPathAPI.PathElementCreator.InstantiateInstances">
            <summary>
            Instantiates the instances.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase">
            <summary>
            Base class for scope handlers. Scope handlers are dispatch endpoints for expression handling inside a scope, e.g. inside an expression handler routine. 
            As C# doesn't support multiple dynamic dispatch, the expression call the handler themselves which is the foundation of the visitor pattern. As the 
            .NET expression classes don't have a Handle routine, a big switch/case statement is present to overcome this problem. This class contains no real logic,
            it just dispatches the call to Handle to the right routine which is then overriden in a subclass. 
            </summary>
            <remarks>Class is primarly meant to be used to remove switch/case blocks in the expression handlers.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.Expression)">
            <summary>
            Handles the specified linq expression. This is done by 2-stage dispatch: it will call (if it's our own expression class) its Handle method which
            through polymorphism will call this handler object's Handle routine back with the right type, so it will call the right routine. 
            </summary>
            <param name="toHandle">The linq expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">To handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression)">
            <summary>
            Handles the specified expression to handle.
            </summary>
            <param name="toHandle">expression to handle.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase.DefaultHandler(System.Linq.Expressions.Expression)">
            <summary>
            The default handler for a linq expression if there's no handler available. 
            </summary>
            <param name="toHandle">To handle.</param>
            <remarks>per scope handler this default handler should have either exception throw actions or no-ops. If code ends up here, it
            in general suggests either: the expression can be ignored (not likely) or an expression was encountered in a part of the tree where it was
            unexpected. By default this method throws an ORMQueryConstructionException and is called by all expression handle methods in this base class.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition">
            <summary>
            Projection definition for a projection of a list of data of one or more columns into a list of values or a set of objects.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition">
            <summary>
            Abstract base class of a projection definition. A projection definition defines the destination of the data, the projection result and, if required,
            the 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition.InitClass(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionType)">
            <summary>
            Inits the class.
            </summary>
            <param name="typeOfProjection">The type of projection.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition.TypeOfProjection">
            <summary>
            Gets the type of projection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition"/> class.
            </summary>
            <param name="destinationType">Type of the destination.</param>
            <param name="isSingleValueList">If set to true, the result will be a valuelist with a set of values instead of objects into which the result is projected.
            If the projection contains more than one datavalueprojector, this value is ignored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddFieldToProjection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Adds the specified field to the projection.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddProjectionListToProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionListExpression,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Adds the elements in the passed in ProjectionListExpression to this projection.
            </summary>
            <param name="toAdd">To add.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddNestedQueryToProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.String,System.Type,System.Boolean,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Adds the specified nested query to this projection under the name specified
            </summary>
            <param name="nestedQuery">The nested query.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementType">Type of the element.</param>
            <param name="addConstantHandlerToProjection">if set to true, the routine will add a delegate handler for the constant in the projection (the resultset)
            otherwise it wont (as other code will, depends on caller)</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.HandleConstantInProjection(SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,System.String,System.Object,System.Type,System.Boolean)">
            <summary>
            Handles the situation that a constant is in the projection. This routine adds a constant value to the query elements and the proper lambda to obtain
            that value from the results into the final destination during projection execution.
            </summary>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="elementName">Name of the element.</param>
            <param name="constantValue">The constant value.</param>
            <param name="elementType">Type of the element.</param>
            <param name="addConstantHandlerToProjection">if set to true, the routine will add a delegate handler for the constant in the projection (the resultset)
            otherwise it wont (as other code will, depends on caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddLambdaAsProducerFuncToProjection(System.String,System.Type,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Dictionary{System.Int32,System.Linq.Expressions.Expression},SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Adds the lambda as producer func to projection. It adds the lambda in compiled form to the datavalueprojectors and all gathered elements to
            the queryelements.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="targetType">Type of the target.</param>
            <param name="toAdd">The lambda to add.</param>
            <param name="gatheredElements">The gathered elements.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddFieldToProjection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Type)">
            <summary>
            Adds the specified field to the projection. This routine will both add the field to the query elements and also add a projector to the datavalueprojectors.
            </summary>
            <param name="field">The field.</param>
            <param name="targetType">Type of the target of the projection. This is specified separately as it can differ from the type of the field
            or the field can't have a type specified at this point because it's for example a db expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.AddFieldToQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Adds the field to queryelements, doesn't add the field to projectors
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.CreateAndAddDataValueProjectorToProjection(System.String,System.Type,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[])">
            <summary>
            Adds the data value projector to projection.
            </summary>
            <param name="targetName">Name of the target.</param>
            <param name="targetType">Type of the target.</param>
            <param name="valueIndex">Index of the value in the source. Ignored if valueProducerFunc isn't null</param>
            <param name="valueProducerFunc">The value producer func.</param>
            <param name="valueProducerFuncParameterIndices">The value producer func parameter indices.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.CreateClone">
            <summary>
            Creates a shallow clone of this projection, with new containers but the same elements referenced
            </summary>
            <returns>clone of this projection.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.PostProcessNestedQueries(SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Post-processes the nested queries in this projection. If there are nested queries, the correlationfilters are checked if this projection and
            the projection of each nested query needs fields which are specified in the correlationfilters but not in the query elements/projection of each
            nested query. It also produces in-memory lambda's for the routine which ties parent to child.
            </summary>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.QueryElements">
            <summary>
            Gets the fields for the query to produce. These fields form the select list for the query which is used as the source of the actual projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.DataValueProjectors">
            <summary>
            Gets or sets the data value projectors to use. These projectors are the elements fed to the projection engine to do the projection of the data
            resulted by the query. For every target element there's one DataValueProjector element defined. It can be that there are less or more elements
            in this list than there are in the QueryElements.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.DestinationType">
            <summary>
            Gets or sets the type of the destination.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.RelationsToUse">
            <summary>
            Relations collection for the relations to traverse to be able to fulfill the projection. These relations are from the fields in the 
            projection specification itself.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.IsSingleValueList">
            <summary>
            Gets the value indicating whether the result will be a valuelist with a set of values instead of objects into which the result is projected (true)
            or a set of objects (false). If the projection contains more than one datavalueprojector, this value is false no matter what value it is set to
            in the CTor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.NestedQueries">
            <summary>
            Gets the list of nested query specifications, which are to be fetched as child sets into this set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.ProjectionInstantiatorLambda">
            <summary>
            Gets or sets the projection instantiator function lambda. This function lambda is a modified version of the projection lambda and produces, when compiled,
            instances for this projection if the valuelistprojection is a multivalueprojection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ValueListProjectionDefinition.ProjectionFuncIndices">
            <summary>
            Gets the projection func indices to use with ProjectionInstantiator.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a projection. During the tree processing, this node gains more and
            more information.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression"/> class.
            </summary>
            <param name="projectionResultType">Type of the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.#ctor(System.Type,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression"/> class.
            </summary>
            <param name="projectionResultType">Type of the projection result.</param>
            <param name="projectionLambda">The projection lambda.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.AddRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the relation passed in to the RelationsToUse collection. 
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.AddRelation(SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation)">
            <summary>
            Adds the relation passed in to the RelationsToUse collection. 
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations passed in. Relations are added to this expression if a field in this projection is in a related entity and the
            relations contained inside this projection are required to access the field.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.ProjectionLambda">
            <summary>
            Gets or sets the projection lambda, which is the source for the data gathered in this projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.ProjectionToUse">
            <summary>
            Gets or sets the projection to use for the query in LLBLGen Pro. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.RelationsToUse">
            <summary>
            Relations collection for the relations to traverse to be able to fulfill the projection. These relations are from the projection specification
            itself.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.HandledProjectionLambdaBody">
            <summary>
            Gets or sets the handled projection lambda body. This is used to obtain the real values inside the lambda for later use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression.IgnoreWhenMergingInJoinResultScenarios">
            <summary>
            Gets or sets a value indicating whether this projection can be ignored when merging takes place (so should be considered null).
            This flag is used with JoinResultExpression merging into QueryExpressions: the projection inside the JoinResultExpression object has to be used
            if this flag inside that projection is false. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a JoinResult, which is a select and also a result of a join.
            The type is used to make a distinction between a normal select and a JoinResult with a projection: if the JoinSelectExpression is the source of a
            SelectExpression, or other expression which has a projection, the contained projection of this select is ignored. 
            This class is required because in Linq, a select's projection is combined with the join result projection if the join is followed by a select.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a SelectExpression node. 
            The SelectExpression class is used to specify a tree with a projection and an IQueryable source, as well as potentially joins, where etc. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.#ctor(System.Type,System.Linq.Expressions.ExpressionType)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
            <param name="typeOfExpression">The type of expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.AddSortClause(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Adds the sort clause.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.Projection">
            <summary>
            Gets or sets the projection of the select
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.Filter">
            <summary>
            Gets or sets the filter for the select
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.PrefetchPathDefinition">
            <summary>
            Gets or sets the prefetch path definition.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.ExcludeIncludeFields">
            <summary>
            gets or sets the excludeincludefields expression for the select.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.AllowDuplicates">
            <summary>
            Gets or sets a value indicating whether the select allows duplicate rows (no distinct) or not (distinct). 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.MaxNumberOfElementsToReturn">
            <summary>
            Gets or sets the max number of elements to return.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.PageSize">
            <summary>
            Gets or sets the size of the page for paging
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.PageNumber">
            <summary>
            Gets or sets the page number for paging.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.Sorter">
            <summary>
            Gets or sets the sort expression to use in this select.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.NumberOfRowsToSkip">
            <summary>
            Gets or sets the number of rows to skip. Set by a Skip() call.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.ThrowExceptionIfResultHasMoreThanOneElement">
            <summary>
            Flag to signal the execution engine (this flag is inherited by the resulting QueryExpression) that if there are more than one resulting element,
            the engine should throw an exception. Flag is required to handle Single() and SingleOrDefault()
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.ThrowExceptionIfResultHasLessThanOneElement">
            <summary>
            Flag to signal the execution engine (this flag is inherited by the resulting QueryExpression) that if there are less than one resulting element,
            the engine should throw an exception. Flag is required to handle Single().
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression.MergeIfSourceHasProjection">
            <summary>
            Gets or sets a flag which signals the query merger not to merge the source of this select into this select if this flag is false. Default: true.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression">
            <summary>
            Specific expression class which represents an LLBLGen Pro expression object. This could mean a simple Expression, a dbfunction call, a scalar query
            or other IExpression implementing classes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression"/> class.
            </summary>
            <param name="resultType">Type of the result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.#ctor(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression"/> class.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="expressionObject">The expression object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.CreateCloneWithDifferentType(System.Type)">
            <summary>
            Creates a clone of this LLBLGenProExpressionExpression with the same elements and a different Type
            </summary>
            <param name="newType">The new type.</param>
            <returns>
            clone of this LLBLGenProExpressionExpression with the same elements and a different Type
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations passed in. Relations are added to this entityfield expression if the field is in a related entity and the
            relations contained inside this field object are required to access the field.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.ExpressionObject">
            <summary>
            Gets or sets the Expression
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression.RelationsToUse">
            <summary>
            Gets the relations required to access the fields in this expression. Can be null (which means: no relations needed)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a Join node. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.#ctor(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
            <param name="left">The left side of the join.</param>
            <param name="right">The right side of the join.</param>
            <param name="leftSelector">The left selector for keys.</param>
            <param name="rightSelector">The right selector for keys.</param>
            <param name="resultProjection">The result projection for the joined set.</param>
            <param name="hintForJoinType">The hint for the join type to use for the relation build from this JoinExpression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.Left">
            <summary>
            Gets or sets the left side of the join
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.Right">
            <summary>
            Gets or sets the right side of the join
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.LeftSelector">
            <summary>
            Gets or sets the left selector for keys
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.RightSelector">
            <summary>
            Gets or sets the right selector for keys
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.ResultProjection">
            <summary>
            Gets or sets the result projection of the joined set
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression.HintForJoinType">
            <summary>
            Gets or sets the hint for the join type to use for the relation build from this JoinExpression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression">
            <summary>
            Class which represents a query for LLBLGen Pro. This expression type is used when the tree is reduced to a single query. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression"/> class.
            </summary>
            <param name="typeOfResultset">The type of resultset.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.AddPredicateToFilter(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds the predicate or predicate expression passed in to FilterToUse.
            </summary>
            <param name="toAdd">the predicate to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.MergeFilterExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression)">
            <summary>
            Adds the filter to query expression.
            </summary>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.MergeSortExpression(SD.LLBLGen.Pro.ORMSupportClasses.SortExpression)">
            <summary>
            Adds the sorter to query expression.
            </summary>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.MergeRelationCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Merges the relations specified into the relation collection of the query expression specified.
            </summary>
            <param name="mergeSource">The merge source.</param>
            <param name="insertUpFront">If set to true, the relations are merged upfront otherwise appended</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.MergeRelationCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,System.Boolean)">
            <summary>
            Merges the relations specified into the relation collection of the query expression specified.
            </summary>
            <param name="mergeSource">The merge source.</param>
            <param name="insertUpFront">If set to true, the relations are merged upfront otherwise appended</param>
            <param name="skipFirst">if set to true, the first is skipped. Used to skip correlationrelations if they're already used</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.InsertProjectionIfEmpty(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Inserts a new projection in this query expression if this query expression doesn't have a projection defined.
            </summary>
            <param name="aliasToUse">The alias to use.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.FindCorrelationFilterPredicates(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Finds the correlation filter predicates, which tie this query to a parent query, if applicable.
            These predicates are later on used to build in-memory delegates to tie parent to child queries.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <returns>List of correlation filter predicates</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.FilterOutNonUsablePredicates(SD.LLBLGen.Pro.LinqSupportClasses.PredicateWithAliasFinder,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Filters out the non usable predicates, so it keeps predicates which are targeting an outside source and which are usable for correlationpredicates.
            </summary>
            <param name="predicateAliasFinder">The predicate alias finder.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.FindPredicatesTargetingOutsideSource">
            <summary>
            Finds the predicates targeting a source which is outside the source of this expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.FindSourceAliases(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Finds the source aliases. Aliases are stored in SourceAliasesForQuery
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.IsScalarQuery">
            <summary>
            Determines whether this query is a scalar query or not. 
            </summary>
            <returns>true if the query is a scalar query, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>a shallow copy of this instnace</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.FilterToUse">
            <summary>
            Gets or sets the filter to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.RelationsToUse">
            <summary>
            Gets or sets the relations to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.GroupByToUse">
            <summary>
            Gets or sets the group by collection to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.SorterToUse">
            <summary>
            Gets or sets the sorter to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.PageSize">
            <summary>
            Gets or sets the size of the page for paging (0 == no paging)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.PageNumber">
            <summary>
            Gets or sets the page number for paging (0 == no paging)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.NumberOfRowsToSkip">
            <summary>
            Gets or sets the number of rows to skip. Set by a Skip() call.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.MaxNumberOfElementsToReturn">
            <summary>
            Gets or sets the max number of elements to return. (0 == all elements)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.Projection">
            <summary>
            Gets or sets the projection to perform to make this set an actual set. If null, no projection has been defined. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.AllowDuplicates">
            <summary>
            Gets or sets the flag to signal that duplicates are allowed or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.PrefetchPathToUse">
            <summary>
            Gets or sets the prefetch path to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.ExcludeIncludeFieldsListToUse">
            <summary>
            Gets or sets the exclude include fields list to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.DirectSourceForGroupBy">
            <summary>
            Gets the stack of derived table definitions which were the direct source of a groupby query. When an aggregate function which targets a GroupBy is handled,
            and its argument is an expression, the function is performed on a set which is defined by a derived table in the from clause. As all aggregates which
            target a groupby are in the projection of the groupby, the set they work on is in the derived table which is the source of the groupby. LLBLGen Pro 
            stores derived tables in a DynamicRelation in the relations collection of the QueryExpression created from the groupby. By storing the derived table
            created in such process on the stack of this property, we can keep track of that derived table and adjust it if necessary. Top of the stack is the most
            outer derived table. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.MergeIfSourceHasProjection">
            <summary>
            Gets or sets a flag which signals the query merger not to merge the source of the origin of this query into this query  if this flag is false. Default: true.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.NonMergableQuerySource">
            <summary>
            When this QueryExpression had to be merged with a source query expression and this wasn't possible, the source query is converted into a 
            derived table and placed inside a dynamic relation in the RelationsToUse collection. It is also placed, as QueryExpression into this 
            member so projection construction, if required, is possible with this query expression. This source always has a projection, otherwise
            the source was mergable.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.LastMergedSourceWithProjection">
            <summary>
            Gets or sets the last merged source which had a projection or was an entity. This is used in the case if this query gets merged into another
            query which doesn't have relations but does have a projection with the first field an expression field, so it doesn't have a real source. To prevent
            not having a source in the runtime (so no FROM clause is emitted), the first field object has to be replaced with a clone of the first field in the value of
            LastMergedSourceWithProjection (though it keeps its expression/aggregate of course). The field borrowed from LastMergedSourceWithProjection has the source
            information to target and the runtime will know the source. The runtime itself has code to find the source, but this can fail in some edge cases if
            the first field is a complicated CASE statement inside a function call, created by All()/Any() calls as last method in a query or a boolean expression in
            the projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.ThrowExceptionIfResultHasMoreThanOneElement">
            <summary>
            Flag to signal the execution engine (this flag is inherited by the resulting QueryExpression) that if there are more than one resulting element,
            the engine should throw an exception. Flag is required to handle Single() and SingleOrDefault()
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.ThrowExceptionIfResultHasLessThanOneElement">
            <summary>
            Flag to signal the execution engine (this flag is inherited by the resulting QueryExpression) that if there are less than one resulting element,
            the engine should throw an exception. Flag is required to handle Single().
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.PkFieldsOfLastCorrelationRelationMerged">
            <summary>
            Gets the pk fields of the last correlation relation merged into this query. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.TargetIsDerivedTable">
            <summary>
            Gets or sets a value indicating whether the target of the query is a derived table. This is important if this query gets an entity projection, which
            then has to be converted into a multi-field projection if the type is in an inheritance hierarchy.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.SourceAliasesOfQuery">
            <summary>
            Gets or sets the source aliases used in this query. Only set after <see cref="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression.FindSourceAliases(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)"/> has ran.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder">
            <summary>
            Specific expression handler which evaluates JoinExpression nodes and converts them into a RelationCollectionExpression object or JoinResultExpression
            objects. It also handles SelectExpressions and reduces the tree. This has to be combined together in one evaluator because the joinExpression nodes 
            can only be constructed if SelectExpressions (which can be one side of a join) can be reduced to full QueryExpressions.
            JoinResultExpressions are consumed by this same handler, if possible in the first take, into QueryExpressions. If the final query doesn't result in a
            QueryExpression, this class is used in a loop till it has resulted in a QueryExpression.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandlePathEdgeExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression)">
            <summary>
            Handles the path edge expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandlePrefetchPathExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PrefetchPathExpression)">
            <summary>
            Handles the prefetch path expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleExcludeIncludeFieldsExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExcludeIncludeFieldsExpression)">
            <summary>
            Handles the exclude include fields expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleTypeBinaryExpression(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Handles the type binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleUnaryNotExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled unary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleAggregateExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression)">
            <summary>
            Handles the aggregate expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>An LLBLGen Pro ScalarQueryExpression object wrapped in an LLBLGenProExpressionExpression object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleAggregateExpressionReferencingGroupBy(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the aggregate expression referencing a group by expression. This routine uses a different code path than the aggregate handler for a normal set,
            as the aggregate is replaced by a field reference and the aggregate information is inserted into the groupby object.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="handledSource">The handled source. THis is a SetReferenceExpression</param>
            <param name="handledSourceAsQuery">The handled source as query. This is the QueryExpression resulting from the GroupBy the source refers to.</param>
            <param name="handledArgument">The handled argument.</param>
            <param name="handledElementSelector">The handled element selector of the targeted groupby.</param>
            <returns>
            EntityFieldExpression which references the aggregating field in the projection of the GroupByExpression which forms a separate Query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.InsertAggregateFieldToGroupByProjection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.Type)">
            <summary>
            Inserts the aggregate field into the group by projection. The groupby is passed in as its QueryExpression handled result.
            </summary>
            <param name="aggregateField">The aggregate field.</param>
            <param name="groupByAsQuery">The group by as query.</param>
            <param name="aggregateResultType">Type of the aggregate result.</param>
            <returns>The field aggregated and inserted.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleAggregateExpressionReferencingNormalSet(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the aggregate expression referencing a normal set.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="handledSource">The handled source.</param>
            <param name="handledSourceAsQuery">The handled source as query.</param>
            <param name="handledArgument">The handled argument.</param>
            <returns>An LLBLGenProExpressionExpression which wraps the created ScalarQueryExpression object which represents the aggregate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleBinaryExpressionArithmeticOrBitOperator(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression with arithmetic or bit operator.
            </summary>
            <param name="expressionToHandle">The binary expression.</param>
            <returns>
            Expression which represents the interpreted binary expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleShiftOperatorInExpression(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ExpressionType)">
            <summary>
            Handles the shift operator in expression.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="valueToShift">The value to shift.</param>
            <param name="numberOfBits">The number of bits.</param>
            <param name="operatorToUse">The operator to use.</param>
            <returns>DbFunctionCallExpression</returns>
            <remarks>the passed in operands are already handled.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled binary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleGroupByKeyReferenceExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByKeyReferenceExpression)">
            <summary>
            Handles the group by key reference expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>if the key contains a single field, it returns an EntityFieldExpression, otherwise a New expression which represents a ctor call on
            the anonymous type</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleGroupByExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression)">
            <summary>
            Handles the group by expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleDbFunctionCallExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression)">
            <summary>
            Handles the DbFunctionCallExpression passed in
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>LLBLGenProExpressionExpression with inside its DbFunctionCall object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleWhereExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression)">
            <summary>
            Handles the where expression into a QueryExpression without projection. This is done by first producing a SelectExpression which is then handled
            by the SelectExpression handler. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled where expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleInClauseExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InClauseExpression)">
            <summary>
            Handles the in clause expression, which is an expression representing a call to Contains on a list of values.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>FilterExpression with the predicate expression representing this InClause.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleLikeExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LikeExpression)">
            <summary>
            Handles the like expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleExceptIntersectExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ExceptIntersectExpression)">
            <summary>
            Handles the except / intersect expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression, which is a QueryExpression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleContainsExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression)">
            <summary>
            Handles the contains expression. A ContainsExpression is always about a source S which is a SetExpression and an operand O which is 
            either an entity, constant or query.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateContainsExistFilterForContainsWithValuesOnProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates the contains exist filter for Contains call with a constant value or an object with properties as operand on a projection of a query on
            a set of entities where the projection contains 1 field or a construction of a similar object as the operand (multiple fields in projection)
            This is situation B for Contains calls on queries which work on entities or sets of entities:
            Source of ContainsExpression is query on entity set which produces a projection with 1 or more fields and operand of ContainsExpression 
            is value or object with values in properties
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="handledSource">The handled source.</param>
            <param name="handledOperand">The handled operand.</param>
            <param name="correlationRelationOfSource">The correlation relation of source.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateContainsExistFilterForContainsWithEntityOnSet(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ContainsExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates the contains exist filter for a Contains call with an entity as operand on a set of entities (entity collection) or query which produces
            an entity set. This is 'situation A' for Contains calls on queries which work on entities or sets of entities:
            Source of ContainsExpression is entity set and operand of ContainsExpression is an entity or producing an entity
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="handledSource">The handled source.</param>
            <param name="handledOperand">The handled operand.</param>
            <param name="correlationRelationOfSource">The correlation relation of source.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleAllAnyExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AllAnyExpression)">
            <summary>
            Handles all any expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleSortClauseExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SortClauseExpression)">
            <summary>
            Handles the sort clause expression into a QueryExpression without projection. THis is done by first producing a selectexpression which is then handled
            by the SelectExpression handler. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled sortclause expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleBinaryExpressionBooleanOperator(System.Linq.Expressions.BinaryExpression)">
            <returns>
            An expression representing the handled boolean operator. If the top of the stack is true, it treats the operator as an expression operator
            if the top of the stack is false, the operator is seen as a predicate operator and left alone. We need to make this distinction as LLBLGen Pro
            uses expressions and predicates differently.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleBinaryExpressionSeparateOperands(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the binary expression with boolean operator with two separate operands (so no AndAlso or OrElse operator)
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="leftSide">The left side. Assumed it's already handled.</param>
            <param name="rightSide">The right side. Assumed it's already handled.</param>
            <returns>the binary expression converted into a filter.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleBinaryExpressionCombinedExpressions(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the binary expression which has both sides as binary expressions themselves (e.g. operator is AndAlso or OrElse
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="handledLeftSide">The handled left side.</param>
            <param name="handledRightSide">The handled right side.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CoerceGroupByToFullQueryForProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupByExpression,System.Type,System.Type)">
            <summary>
            Coerces the set reference to a full query if it's a groupby expression. This is required if the setreference is in a projection.
            In that case, the groupby has to be converted into a nested query construct which returns a set of Grouping(Of TKey, TElement) elements.
            </summary>
            <param name="referencedGroupBy">The referenced group by which was referenced by a setreferenceexpression in a projection.</param>
            <param name="groupingType">Type of the grouping class to use.</param>
            <param name="keyType">Type of the groupby key.</param>
            <returns>
            The group by converted into a full queryexpression (without the groupby clause)
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleEntityFieldExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression)">
            <summary>
            Handles the entity field expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleEntityExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Handles the entity expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleNewArrayExpression(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Handles the new array expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleSetReferenceExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetReferenceExpression)">
            <summary>
            Handles the set reference expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleProjectionExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.ProjectionExpression)">
            <summary>
            Handles the projection expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted projection expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleGroupJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression)">
            <summary>
            Handles the groupjoin expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted groupjoin expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleLambdaExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Handles the lambda expression.
            </summary>
            <param name="expressionToHandle"></param>
            <returns>the handled lambda expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression)">
            <summary>
            Handles the join expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted join expression in LLBLGen Pro form, which is a JoinResultExpression, containing
            the relations of sources as the Source in a RelationCollectionExpression + the projection of the expression passed in.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.ProduceFilterFromExtractedWhereClauses(System.Collections.Generic.List{System.Linq.Expressions.Expression},SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@)">
            <summary>
            Produces the filter from extracted where clauses.
            </summary>
            <param name="extractedWhereClauses">The extracted where clauses.</param>
            <param name="extraRelations">The extra relations.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleJoinResultExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression)">
            <summary>
            Handles the JoinResult expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted select expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleSelectExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression)">
            <summary>
            Handles the select expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted select expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.ForceSetAliasOntoSourceOfQuery(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            forces the alias the query currently has as the source alias of the query elements.
            THis means that if the query passed in has no projection and the relation collection's SelectListAlias is empty, it is set to the alias of the query
            This is sometimes required (e.g. in Contains query elements) if the query will become a derived table and it has no projection nor relations set but
            DOES have a filter set. If this query would be the most outer query to execute, the projection would get the alias of the query as well, so this
            routine does this as well for the case if the query becomes a derived table, without forcing a projection onto the query.
            </summary>
            <param name="queryToExamine">The query to examine.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.ConvertExpressionToQueryExpression(System.Linq.Expressions.Expression)">
            <summary>
            Converts the passed in linq query into a QueryExpression. If the expression is already a query expression, nothing is done.
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>toConvert as QueryExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateDerivedTable(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.String)">
            <summary>
            Creates a derived table definition from the expression to convert.
            </summary>
            <param name="expressionToConvert">The expression to convert.</param>
            <param name="alias">The alias for the derived table.</param>
            <returns>ready to use derived table definition</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateDynamicRelation(System.Object,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a dynamic relation from the parameters passed in.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <param name="joinType">Type of the join.</param>
            <param name="aliasLeft">The alias of the left operand.</param>
            <param name="aliasRight">The alias of the right operand.</param>
            <param name="onClause">The on clause.</param>
            <returns>DynamicRelation object.</returns>
            <remark>left and right operands can be: DerivedTableDefinition, a Type (entity type) or a string (entity name)</remark>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateOnClausePredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection@,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection@)">
            <summary>
            Produces the predicate for the onClause. both sides have to be of the same type. If both are an entity field, create a field compare field (expression)
            predicate.
            </summary>
            <param name="handledLeftSelector">The handled left selector.</param>
            <param name="handledRightSelector">The handled right selector.</param>
            <param name="leftExtraRelations">The left extra relations.</param>
            <param name="rightExtraRelations">The right extra relations.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleOnClauseCreationSide(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection@)">
            <summary>
            Handles one side of the creation of an onClause.
            </summary>
            <param name="handledSide">The handled side.</param>
            <param name="extraRelations">The extra relations. Is reset to null first.</param>
            <returns>value to use in predicate for on clause for the side the caller called this routine for.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateDerivedTableForScalarTargetingGroupBy(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore@)">
            <summary>
            Creates a derived table definition for a scalar query which targets a groupby. This is necessary when the scalar is an aggregate function applied
            to a set and the set isn't a set of single field values, plus the aggregate function is part of a groupby.
            This means that the set producing query is wrapped as a derived table, which is used as the source for the scalar query.
            This method is typically the same as CreateDerivedTableForScalar, except it uses the groupby fields instead of the correlationRelation and it
            also does source folding (folds existing relations of the groupByQUery into the created derived table.
            </summary>
            <param name="llblExpression">The LLBL expression to wrap as projection in the derived table.</param>
            <param name="expressionCurrentlyHandled">The expression currently handled.</param>
            <param name="groupByQuery">The group by query.</param>
            <param name="fieldToAggregate">The field to aggregate by the caller.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateDerivedTableForScalar(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LLBLGenProExpressionExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore@)">
            <summary>
            Creates a derived table definition for a scalar query. THis is necessary when the scalar is an aggregate function applied to a set and the set
            isn't a set of single field values. This means that the set producing query is wrapped as a derived table, which is used as the source for the
            scalar query.
            </summary>
            <param name="llblExpression">The LLBL expression to wrap as projection in the derived table.</param>
            <param name="expressionCurrentlyHandled">The expression currently handled.</param>
            <param name="handledSourceAsQuery">The handled source of expressionCurrentlyHandled as queryexpression.</param>
            <param name="fieldToAggregate">The field to aggregate by the caller.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateSetFilterForCorrelatedSetWithEntities(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Type)">
            <summary>
            Creates the set filter for correlated set with entities.
            Based on the operand type, we've to either wrap the handledSource's result into a nested EXISTS query (if operand is a query) or simply use a
            filter on the PK of handledSource's result with the fields read from the operand (if operand is an entity instance, wrapped in a constant).
            </summary>
            <param name="handledOperand">The handled operand.</param>
            <param name="setFilter">The set filter.</param>
            <param name="sourceAliasToUse">The source alias to use.</param>
            <param name="entityTypeOfSourceSet">The entity type of source set.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateSetFilterForCorrelatedSetWithValues(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Creates the set filter for correlated set with values. 
            Based on the operand type, we either use simple field compare value predicates (operand is constant or object with fields), or 
            if operand is a query: a field compare Set predicate where a single field is compared (if operand query has 1 field in projection) or 
            a nested EXISTS query.
            </summary>
            <param name="handledOperand">The handled operand.</param>
            <param name="sourceAliasToUse">The source alias to use.</param>
            <param name="handledSourceAsQuery">The handled source as query.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.ProduceBooleanResultValueFromBinaryInMemoryExpression(System.Object,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            Produces the boolean result value from binary in memory expression.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="operatorToUse">The operator to use.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.GetFKFieldsFromCorrelationRelation(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression)">
            <summary>
            Gets the FK fields from the first correlation relation found in the expression tree passed in.
            </summary>
            <param name="expressionCurrentlyHandled">The expression currently handled.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.FindCorrelationRelationInExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Finds the first correlation relation in expression.
            </summary>
            <param name="expressionToTraverse">The expression to traverse.</param>
            <param name="removeFromExpressionIfFound">if set to <c>true</c> [remove from expression if found].</param>
            <returns>CorrelationRelation if found, otherwise null;</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CoerceToFilterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Coerces the passed in expression to a filter expression.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <returns>the passed in expression as a filterexpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateUniqueFieldAlias(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Creates the unique field alias to use for an aggregate field to add to the list of fields so it's unique
            </summary>
            <param name="existingFields">The existing fields.</param>
            <returns>name to use in field list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.CreateFieldFiltersForListOfFieldValues(System.Collections.IList,System.Object[][],SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates field filters for all different field values found for each field in the list of fields passed in. 
            If there's 1 field, an IN query is used, otherwise a set of OR queries which
            OR-s together a series of predicate expressions with AND, one predicate expression per set of field values (and inside the predicate expression
            a predicate per field): ((Field1=@val1) AND (Field2=@val2)) OR ((Field1=@val3) AND (FIeld2=@val4)) etc...
            </summary>
            <param name="fields">The fields.</param>
            <param name="fieldValues">The field values. Per ROW all values for the field [row index] are stored. Every column resembles 1 object..</param>
            <param name="objectAlias">The object alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.ProduceFilterForEntityInListOfEntitiesBasedOnPkFields(System.Type,System.Collections.IList,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Produces the filter for an entity in a list of entities based on the pk fields of the entity.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="listOfEntities">The list of entities.</param>
            <param name="objectAlias">The object alias.</param>
            <returns>ready to use filter.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleAndProcessJoinExpressionSide(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@,System.String@)">
            <summary>
            Handles and processes the passed in side of a join expression.
            </summary>
            <param name="side">The side.</param>
            <param name="sideSelector">The side selector.</param>
            <param name="handledSide">The handled side.</param>
            <param name="handledSideSelector">The handled side selector.</param>
            <param name="aliasSide">The alias of the side in string format.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.FlattenQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Flattens the query expression passed in.
            </summary>
            <param name="toFlatten">To flatten.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.ProducePredicateForInClauseBasedOnProjection(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore@)">
            <summary>
            Produces the predicate for in clause based on projection.
            </summary>
            <param name="projection">The projection.</param>
            <param name="sourceAlias">The source alias.</param>
            <param name="values">The values.</param>
            <param name="setField">The set field.</param>
            <returns>setFilter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandlePrefetchPathEdges(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Handles the prefetch path edges.
            </summary>
            <param name="edgeExpressions">The edge expressions.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.QueryExpressionBuilder.HandleAggregateFunctionNoArgumentTargetingQuery(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.AggregateExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Handles the aggregate function with no argument which is targeting a full query.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="handledSourceAsQuery">The handled source as query.</param>
            <param name="scalarRelations">The scalar relations.</param>
            <returns>
            The aggregate field which should contain the aggregate function.
            </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor">
            <summary>
            Specific expression handler which converts various method calls into their special Expression classes and it also collects and assigns
            source - alias combinations.
            </summary>
            <remarks>This is the first step in the evaluation of the expression tree.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.TraceInitialExpression(System.Linq.Expressions.Expression)">
            <summary>
            Traces the initial expression to the trace output, if linq tracing is enabled.
            </summary>
            <param name="initialExpression">The initial expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleLinqExpressionAsSetExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression)">
            <summary>
            Handles the LinqExpression as set expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleExpression(System.Linq.Expressions.Expression)">
            <summary>
            Handles the expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            the result expression after the expression has been handled.
            </returns>
            <remarks>Handling an expression is like Visiting a node in a graph using the visitor pattern. However, as the code
            in Linq's Expression trees isn't really capable of to be used with visitors (as the expression objects can't call a passed in visitor, as there's
            no mechanism to do so), the handler is placed outside the expression tree and not really in a visitor pattern way.
            This routine is the central dispatcher for the expression nodes found in the expression tree.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleInMemoryEvalCandidateExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.InMemoryEvalCandidateExpression)">
            <summary>
            Handles the in memory eval candidate expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleBinaryExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handles the binary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled binary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleUnaryExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled unary expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleUnaryArrayLength(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the length of the unary array.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleUnaryConvertExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary convert expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted unary convert expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleConditionalExpression(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Handles the conditional expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>The handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleNewExpression(System.Linq.Expressions.NewExpression)">
            <summary>
            Handles the NewExpression expression
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the access to a member of a type or instance. This version only converts member access to objects into constants.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Handles the constant expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallToString(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Handles the method call to a ToString method.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="declaringType">Type of the declaring.</param>
            <returns>DbFunctionCallExpression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallExceptIntersect(System.Linq.Expressions.MethodCallExpression,System.Boolean)">
            <summary>
            Handles the method call expression for a call to Queryable.Except or to Queryable.Intersect
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="isExcept">if true, the call is to Except, otherwise to Intersect</param>
            <returns>ExceptExpression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallEquals(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the call to the method Equals, in whatever type it is defined in. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallContains(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to a Contains method, be it on Queryable, IList, string or other type.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>based on the declaring type, it will return a ContainsExpression, LikeExpression or InClause expression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallAllAny(System.Linq.Expressions.MethodCallExpression,System.Boolean)">
            <summary>
            Handles the method call expression for a call to Queryable.All or Queryable.Any.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="isAll">if set to <c>true</c> [is all].</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallGroupBy(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.GroupBy
            if an element selector has been specified, it can be ignored. If a projection has been specified, this groupby marks a scope. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>GroupByExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleSortClauseMethodCall(System.Linq.Expressions.MethodCallExpression,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Handles the method call expression for a call to OrderBy, OrderByDescending, ThenBy and ThenByDescending
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="operatorToUse">The operator to use.</param>
            <returns>SortClauseExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleAggregateFunctionMethodCall(System.Linq.Expressions.MethodCallExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Handles the method call expression for a call to Queryable.Count.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="function">The aggregate function representing the method.</param>
            <returns>AggregateExpression instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallDefaultIfEmpty(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.DefaultIfEmpty.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>DefaultIfEmptyExpression instance. It will reference the MemberExpression which leads to the right side of a group join.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallSelectMany(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.SelectMany
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>JoinExpression, with LeftSelector and RightSelector set to null, as it implies a cross  join.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallCast(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Cast. This method call is used to cast from one entity type to another. 
            All other casts in a query are done by Convert.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>WhereExpression as a Cast is a typefilter for an entity type. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleExcludeIncludeFieldsMethodCall(System.Linq.Expressions.MethodCallExpression,System.Boolean)">
            <summary>
            Handles the method calls to IQueryable.ExcludeFields or IQueryable.IncludeFields
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="containsExcludedFields">if set to true, the method call was ExcludeFields, otherwise IncludeFields</param>
            <returns>ExcludeIncludeFieldsExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallOfType(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.OfType. This method call is used to filter on a given entity type. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>WhereExpression, as an OfType call is a typefilter for an entity.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallTake(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Take.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>SelectExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallSkip(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Skip. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>SelectExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallFirstSingle(System.Linq.Expressions.MethodCallExpression,System.Boolean,System.Boolean)">
            <summary>
            Handles the method call expression for a call to Queryable.First.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="isSingle">if set to true, the call is a call to Queryable.Single, otherwise a call to Queryable.First</param>
            <param name="isDefault">if set to true, the call is a call to Queryable.SingleOrDefault or Queryable.FirstOrDefault</param>
            <returns>SelectExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallElementAt(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.ElementAt(OrDefault). This is handled by doing a page fetch of size 1. The page number
            is the parameter value specified (+1, as ElementAt is 0 based).
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallTakePage(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.TakePage. TakePage is our own extension method for Queryable.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>SelectExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallWithPath(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.WithPath
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>SelectExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallDistinct(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Distinct.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>SelectExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallSelect(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Select.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Linq expresison which represents the Select call</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallWhere(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Where.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Linq expression which represents the Where call.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallJoin(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.Join
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Linq expression which represents the Join expression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallGroupJoin(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method call expression for a call to Queryable.GroupJoin
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>Linq expression which represents the GroupJoin expression.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMethodCallPerType(System.Linq.Expressions.MethodCallExpression,System.Type)">
            <summary>
            Handles the passed in method call based on the type it's defined on. 
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="declaringType">Type of the declaring.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.GetAliasOfContainedMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the alias of the member contained in the memberAccess specified, or an empty alias if not found
            </summary>
            <param name="memberAccess">The member access.</param>
            <returns>the alias of the member contained in the memberAccess specified, or an empty alias if not found </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleQueryableExtensionMethod(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the queryable extension methods, except 'Contains'.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleMemberIsPartOfConstant(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the member which is part of a constant expression's value.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <returns>The handling result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleDefaultOperatorOverloadMethod(System.Linq.Expressions.MethodCallExpression,SD.LLBLGen.Pro.LinqSupportClasses.StandardOperatorType)">
            <summary>
            Handles the default operator overload method call. This is for String.==/!= overloads, which result in op_Equality and op_Inequality calls.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="operatorType">Type of the operator.</param>
            <returns>
            Linq expression which represents the method with the operator type specified, either a UnaryExpression or a BinaryExpression or simply the operand,
            in the case of the UnaryPlus operator. 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleStringMethods(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles the method calls to string methods
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.CreateDbFunctionCallExpression(System.Linq.Expressions.MethodCallExpression,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping)">
            <summary>
            Creates a DbFunctionCallExpression out of the parameters passed in and handles the arguments first (as they otherwise stay unhandled and the
            arguments are stored in a readonly collection.)
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="mapping">The function mapping to use.</param>
            <returns>Ready to use DbFunctionCallExpression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.FindInMemoryEvaluationCandidates(System.Linq.Expressions.Expression)">
            <summary>
            Finds the in memory evaluation candidates and wraps them into InMemoryEvalCandidateExpression instances
            </summary>
            <param name="toProcess">To process.</param>
            <returns>toProcess with every expression which is an in-memory evaluation candidate wrapped into InMemoryEvalCandidateExpression instances</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.MakeProjectionExpression(SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Makes a new projection expression from the passed in lambda and the passed in aliases are used for assigning a connection with them and the
            parameters of the lambda. This routine is used for projections join-like expressions
            </summary>
            <param name="leftAlias">The left alias.</param>
            <param name="rightAlias">The right alias.</param>
            <param name="resultProjectionLambda">The result projection lambda.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.HandleJoinSide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression@,System.Linq.Expressions.LambdaExpression@)">
            <summary>
            Handles the side of a join passed in.
            </summary>
            <param name="side">The side.</param>
            <param name="sideSelector">The side selector of the side in the join expression.</param>
            
            <param name="handledSide">The handled side expression.</param>
            <param name="handledSideSelector">The handled side selector.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.ProcessSelectManySide(System.Linq.Expressions.Expression)">
            <summary>
            Processes the passed in SelectMany side and returns the processed expression. The passed in expression is assumbed to be already handled
            </summary>
            <param name="handledSide">The handled side.</param>
            <returns>processed result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.PreProcessor.CreatePagingSelectExpression(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression,System.Int32,System.Int32)">
            <summary>
            Creates a paging select expression.
            </summary>
            <param name="destinationType">Type of the destination.</param>
            <param name="source">The source.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator">
            <summary>
            Specific expression handler for converting expressions in the expression tree into entity field and entity type expressions, which are
            later on reduced by various handlers to LLBLGen Pro oriented elements. 
            As it's the last step before the QueryExpressionBuilder step, it also does some fore-work for expressions which aren't really handled here, like the 
            groupjoin's right-side expression extraction. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator"/> class.
            </summary>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleDefaultIfEmptyExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DefaultIfEmptyExpression)">
            <summary>
            Handles the default if empty expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted defaultifempty expression.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleUnaryTypeAsExpression(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Handles the unary type as expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleGroupJoinExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.GroupJoinExpression)">
            <summary>
            Handles the groupjoin expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>
            Expression which represents the interpreted groupjoin expression in LLBLGen Pro form
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleLinqExpressionAsSetExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.LinqExpressionAsSetExpression)">
            <summary>
            Handles the LinqExpression as set expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleParameterExpression(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Handles the parameter expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleMemberExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member expression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handled expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleMemberIsPartOfSelect(System.Linq.Expressions.MemberExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SelectExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Handles the member is part of select.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <param name="memberAlias">The member alias.</param>
            <returns>
            Select expression which wraps the select expression passed in
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleMemberIsPartOfEntityField(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the member which is part of an entity field's value or a functioncall's result. This is typical a property read on a value, e.g. 
            the length of a string. This is handled via a function call mapping, if available.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleMemberIsPartOfParameterValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            Handles the member which is part of a parameter value.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <returns>the handling result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleMemberIsPartOfSet(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Handles the member which is part of a set, represented by a SetExpression.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <param name="memberAlias">The member alias.</param>
            <returns>the handling result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.HandleMemberIsPartOfEntity(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Handles the member which is part of an entity.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <returns>the handling result</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionHandlers.MemberAccessEvaluator.FromToAliasesForDefaultIfEmptysFound">
            <summary>
            Gets the list of from-to alias pairs for DefaultIfEmpty expressions found which will be replaced with a set with a different alias
            This list is used to correct elements which refer to the DefaultIfEmpty's alias.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression">
            <summary>
            Specific expression class which represents a relation collection, one or more relation objects. This collection is simple, it just contains
            the relation collections and has no real type. It's used as an intermediate result for joinexpression evaluation if more than one join is present
            and is also the source of a selectexpression, the final result of a joinexpression hierarchie.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Expressions.ConstantExpression"/> class.
            </summary>
            <param name="resultingType">type the expression results in. This is actually the type of the join result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations passed in.
            </summary>
            <param name="relationsToAdd">the relations to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.AddRelation(SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation)">
            <summary>
            Adds the relation.
            </summary>
            <param name="relationToAdd">The relation to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.AddRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the relation.
            </summary>
            <param name="relationToAdd">The relation to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.RelationCollectionExpression.RelationsToUse">
            <summary>
            Gets the relations of this RelationCollectionExpression object. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression">
            <summary>
            Specific expression class which represents an EntityField(2) object. 
            It could be that the field is in a related entity (e.g. od.Order.Customer.Country), and relations are necessary to access the
            field. These relations are then part of this entityfield expression.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="aliasOfContainingSet">The alias of containing set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Type,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="dataType">Type of the data.</param>
            <param name="aliasOfContainingSet">The alias of containing set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.CreateCloneWithDifferentType(System.Type)">
            <summary>
            Creates a clone of this EntityFieldExpression with the same elements and a different Type
            </summary>
            <param name="newType">The new type.</param>
            <returns>
            clone of this EntityFieldExpression with the same elements and a different Type
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations passed in. Relations are added to this entityfield expression if the field is in a related entity and the
            relations contained inside this field object are required to access the field.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.GetFieldObjectWithProperObjectAlias">
            <summary>
            Gets the field object with proper object alias. It will apply the set AliasOfContainingSet if the field object's ObjectAlias is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.FieldObject">
            <summary>
            Gets or sets the Field
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.AliasOfContainingSet">
            <summary>
            Gets or sets the alias of the field containing set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.FieldAsString">
            <summary>
            Gets the field as string.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityFieldExpression.RelationsToUse">
            <summary>
            Gets the relations required to access this field. Can be null (which means: no relations needed)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent an entity type node. This can be a set or a single entity. 
            The expression type is set to the type represented by this expression in the tree. The EntityType property is set to the type of the entity
            represented by this expression. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression"/> class.
            </summary>
            <param name="representedType">The type this expression represents in the expression tree (e.g. entity or entitycollection)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression"/> class.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="representedType">The type this expression represents in the expression tree (e.g. entity or entitycollection)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations passed in. 
            </summary>
            <param name="relations">The relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.AddRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the relation. The relation passed in is necessary to reach this entity from the root entity of the query.
            </summary>
            <param name="relationToAdd">The relation to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.CreateCloneWithDifferentEntityType(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression,System.Type)">
            <summary>
            Creates a clone of the passed in entityexpression with a different entity type
            </summary>
            <param name="source">The source.</param>
            <param name="newType">The new type.</param>
            <returns>clone of source with newType as its type.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.RelationsToUse">
            <summary>
            Gets the relations required to access this entity. Can be null (which means: no relations needed)
            This collection is filled if the entity represented by this expression is a related entity so a relation is required to reach that entity.
            The relations in this collection are always IEntityRelation, as dynamic relations aren't the result of an access of a related entity/collection,
            which are the source of the relations in this set.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.CorrelationRelation">
            <summary>
            Gets the relation which connects the set defined by this entity type and a containing query. This is normally the first relation in 
            the relationsToUse list, as that relation ties the relations in the RelationsToUse to the outer query. 
            A correlated subquery is a normal subquery with a predicate which ties subquery set and outer query together. This predicate
            is createable from the entity relation by simply creating FieldCompareExpression predicates from the field(s) of fk and pk. Aliases for the
            fields have to be set to the aliases of pk/fk side in the relation.
            Can be null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression.EntityType">
            <summary>
            Gets or sets the type of the entity as represented by this EntityExpression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression">
            <summary>
            Special expression class which is used in expression tree handling to represent a filter node. A filter node is a node which contains a predicate
            expression and 0 or more relations, which are the basis for the filter (so if specified, the relations are required to reach the element(s) to filter on
            by the predicate(expression) inside the filter.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression"/> class.
            </summary>
            <param name="predicateElement">The predicate element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression"/> class.
            </summary>
            <param name="predicateElement">The predicate element.</param>
            <param name="relationCollectionElement">The relation collection element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.AddPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator)">
            <summary>
            Adds the predicate.
            </summary>
            <param name="toAdd">To add.</param>
            <param name="operatorToUse">The operator to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.PredicateElement">
            <summary>
            Gets or sets the predicate element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.FilterExpression.RelationCollectionElement">
            <summary>
            Gets or sets the relation collection element.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DataSource`1">
            <summary>
            Container class for LLBLGen Pro classes (Entities, TypedLists and TypedViews) which are through this class available in Linq queries.
            </summary>
            <typeparam name="T">The class to target in the Linq query</typeparam>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1">
            <summary>
            Container class for LLBLGen Pro classes (Entities, TypedLists and TypedViews) which are through this class available
            in Linq queries.
            </summary>
            <typeparam name="T">The class to target in the Linq query</typeparam>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.IDataSource">
            <summary>
            Interface which is implemented by the DataSource(2)(Of T) classes, and which is used to access the datasource objects without the generic parameter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IDataSource.ElementType">
            <summary>
            Gets the type of the element in the datasource
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.IDataSource.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ILLBLGenProQuery">
            <summary>
            Interface which is implemented on LLBLGenProQuery(Of T), which is the type of the object returned from the construction of a linq query with
            the LLBLGenPro meta data as source. This interface can be used to execute the query without the enumerator retrieval. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ILLBLGenProQuery.Execute">
            <summary>
            Executes the query this object represents.
            </summary>
            <returns>The query execution result.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ILLBLGenProQuery.Execute``1">
            <summary>
            Executes the query this object represents
            </summary>
            <typeparam name="TResult">The type of the query result</typeparam>
            <returns>the query execution result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.SD#LLBLGen#Pro#LinqSupportClasses#ILLBLGenProQuery#Execute">
            <summary>
            Executes the query this object represents.
            </summary>
            <returns>The query execution result.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.SD#LLBLGen#Pro#LinqSupportClasses#ILLBLGenProQuery#Execute``1">
            <summary>
            Executes the query this object represents
            </summary>
            <typeparam name="TResult">The type of the query result</typeparam>
            <returns>the query execution result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.ConstructQuery">
            <summary>
            Constructs the query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.Execute">
            <summary>
            Executes the query this object represents.
            </summary>
            <returns>The query execution result.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.System#Linq#IQueryable#ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is
            executed.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.System#Linq#IQueryable#Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.System#Linq#IQueryable#Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.SD#LLBLGen#Pro#LinqSupportClasses#IDataSource#ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSourceBase`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSource`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataSource`1"/> class.
            </summary>
            <param name="transactionToUse">The transaction to use.</param>
            <param name="creator">The creator to create project elements.</param>
            <param name="customFunctionMappings">The custom function mappings.</param>
            <param name="contextToUse">The context to use for entity fetches.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSource`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DataSource2`1">
            <summary>
            Container class for LLBLGen Pro classes (Entities, TypedLists and TypedViews) which are through this class available in Linq queries.
            </summary>
            <typeparam name="T">The class to target in the Linq query</typeparam>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DataSource2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator2,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.DataSource`1"/> class.
            </summary>
            <param name="adapterToUse">The adapter to use.</param>
            <param name="creator">The creator to create project elements.</param>
            <param name="customFunctionMappings">The custom function mappings.</param>
            <param name="contextToUse">The context to use for entity fetches.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.DataSource2`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition">
            <summary>
            Projection definition for a projection of entity data. This is equal to a normal entity fetch
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition.#ctor(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition"/> class.
            </summary>
            <param name="typeOfEntity">Type of the entity.</param>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition.TypeOfEntity">
            <summary>
            Gets or sets the type of entity to project the data onto.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.EntityProjectionDefinition.Alias">
            <summary>
            Gets or sets the set alias.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils">
            <summary>
            Class which embeds utility methods for linq support
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.#cctor">
            <summary>
            Initializes the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateDbFunctionCallAsLLBLExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.DbFunctionCallExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Object[])">
            <summary>
            Creates a new DbFunctionCall object and wraps it inside a LLBLGenProExpressionExpression object.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="extraRelations">The extra relations.</param>
            <param name="dbFunctionCallParameters">The db function call parameters.</param>
            <returns>new DBFunctionCall object wrapped inside a LLBLGenProExpressionExpression object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GrabFirstUsuableFieldInProjection(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Grabs the first usable field in the projection definition passed in. For entity projections, this is the *last* field as due to inheritance
            it can be the first field is in the root of the hierarchy. For the caller this shouldn't matter.
            </summary>
            <param name="projectionDefinition">The projection definition.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>
            First field object in the projection passed in.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateDbFunctionCallAsLLBLExpression(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Object[])">
            <summary>
            Creates a new DbFunctionCall object and wraps it inside a LLBLGenProExpressionExpression object.
            </summary>
            <param name="returnType">Type of the return value of the function.</param>
            <param name="mapping">The mapping.</param>
            <param name="extraRelations">The extra relations.</param>
            <param name="dbFunctionCallParameters">The db function call parameters.</param>
            <returns>
            new DBFunctionCall object wrapped inside a LLBLGenProExpressionExpression object.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreatePkFilterFromEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,System.Boolean)">
            <summary>
            Creates a pk filter on the PK fields of the passed in entity with the values in the passed in entity. The objectAlias is the alias of the set to filter.
            </summary>
            <param name="entityInstance">The entity instance.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="creator">The creator.</param>
            <param name="selfServicing">if set to true, the provider is for selfservicing, otherwise for adapter</param>
            <returns>
            PredicateExpression with 1 or more FieldCompareValuePredicate instances
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreatePkfieldPkFieldFilterFromEntity(System.Type,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Boolean)">
            <summary>
            Creates a filter which compares the PK fields of the entity type passed in, for both aliases passed in, so:
            aliasWrappedSet.PkField1 = aliasNestedSet.PkField1
            AND
            ...
            aliasWrappedSet.PkFieldn = aliasNestedSet.PkFieldn
            </summary>
            <param name="entityTypeOfSourceSet">The entity type of source set.</param>
            <param name="aliasWrappingSet">The alias of the wrapping set.</param>
            <param name="aliasNestedSet">The alias of the nested set.</param>
            <param name="frameworkCreator">The framework creator.</param>
            <param name="elementCreator">The element creator.</param>
            <param name="selfServicing">if set to true, the provider is for selfservicing, otherwise for adapter</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetAllPkFieldsOfEntity(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Boolean)">
            <summary>
            Gets all pk fields of entity.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="creator">The creator.</param>
            <param name="selfServicing">if set to true, the provider is for selfservicing, otherwise for adapter</param>
            <returns>list of all the PK fields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetAllPkFieldsOfEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Boolean)">
            <summary>
            Gets all the pk fields of entity.
            </summary>
            <param name="entityInstance">The entity instance.</param>
            <param name="selfServicing">if set to true, the provider is for selfservicing, otherwise for adapter</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetTypeOfValue(System.Object)">
            <summary>
            Gets the type of value.
            </summary>
            <param name="value">The value.</param>
            <returns>the type of the value passed in or type of DBNull.Value if the value is null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CloneField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Clones the field passed in.
            </summary>
            <param name="toClone">To clone.</param>
            <returns>a clone of the field passed in with the expression / aggregate function equal to the passed in field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CloneField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Boolean)">
            <summary>
            Clones the field passed in.
            </summary>
            <param name="toClone">To clone.</param>
            <param name="resetExpressionAggregate">flag to signal whether expression and aggregatefunction have to be reset</param>
            <returns>clone of passed in field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateUsableDbFunctionCallParameterValue(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Creates a usable db function call parameter value from the expression passed in.
            </summary>
            <param name="toConvert">To convert.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="functionMappings">The function mappings.</param>
            <returns>
            usable parameter for LLBLGen Pro DbFunctionCall usage.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateEntityInstanceFromEntityType(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Creates a new entity instance from the type specified. This routine uses a factory related to the type, not Activator, as some abstract entities
            may be used which don't have a public ctor. Falls back to activator if type is a custom type derived from an entity class. 
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>ready to use entity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetFieldObjectAndSetObjectAlias(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Gets the field object from the entity passed in and sets its ObjectAlias to the alias passed in.
            </summary>
            <param name="entityInstance">The entity instance.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias.</param>
            <returns>
            the Field object with the name specified, or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetFieldObject(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Gets the field object with the name passed in from the entity specified.
            </summary>
            <param name="entityInstance">The entity instance.</param>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetFieldObject(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String,System.Boolean)">
            <summary>
            Gets the field object with the name passed in from the entity specified.
            </summary>
            <param name="entityInstance">The entity instance.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="entityIsSelfServicing">if set to true, entityInstance is assumed to be an IEntity. This flag is used to optimize frequent calls to
            this routine.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ObtainPkValuesFromListOfEntities(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>
            Obtains the pk values from list of entities. It creates a new array, with listOfEntities.Count rows and fields.Count columns.
            </summary>
            <param name="listOfEntities">The list of entities.</param>
            <param name="pkFields">The pk fields.</param>
            <param name="selfServicing">if set to true, the provider is for selfservicing, otherwise for adapter</param>
            <returns>
            per column the PK field values for the entity corresponding with that row in listOfEntities. Per row, the pk values
            of the field at the same index in fields are stored (so if there is just 1 pk, the array has 1 array of values).
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineComparisonOperatorForPredicate(System.Linq.Expressions.ExpressionType,System.Boolean)">
            <summary>
            Determines the comparison operator for predicate from the operands passed in.
            </summary>
            <param name="nodeType">Type of the node.</param>
            <param name="operandsSwapped">if true, the operator has to be the opposite as the operands were swapped</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ObtainObjectValuesFromListOfObjects(System.Collections.IList,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Obtains the object values for all fields in the list of fields specified from list of objects passed in.
            </summary>
            <param name="listOfObjects">The list of objects.</param>
            <param name="listOfFields">The list of fields.</param>
            <returns>Per field in ListOfFields a row is specified in the array returned which contains per slot the value of the property corresponding with
            that field in the object at that index in the list of objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetEntityName(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the name of the entity. If value is a string, value is returned as the string, if value is a type, GetEntityNameFromType
            is used to obtain the name
            </summary>
            <param name="value">The value to use to obtain the entity name.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>the name of the entity as represented by value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetEntityNameFromType(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the name of the entity of the entity which type has been passed in.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>name of entity, e.g. 'CustomerEntity'</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetEntityTypeEnumAsIntFromType(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the EntityType enum value as integer of the entity with the type specified.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineEntityTypeFromEntityCollectionType(System.Type)">
            <summary>
            Determines the type of the entity type from entity collection.
            </summary>
            <param name="entityCollectionType">Type of the entity collection.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateObjectCreatorFuncInstance``1">
            <summary>
            Creates the object creator func instance for instantiating objects of type TObject using the default constructor
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <returns>
            an instance of the ObjectCreatorFunc for the TObject type so quickly new TObject instances can be created..
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateObjectCreatorFuncInstance``1(System.Reflection.ConstructorInfo)">
            <summary>
            Creates the object creator func instance for instantiating objects of type TObject using the constructor passed in.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="constructor">The constructor to use for creating the delegate.</param>
            <returns>an instance of the ObjectCreatorFunc for the TObject type so quickly new TObject instances can be created..</returns>
            <remarks>Thanks to Roger Alsing for the idea: http://rogeralsing.com/</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetAllFieldsForEntity(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets all fields for entity.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineEntityTypeFromSetExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.SetExpression)">
            <summary>
            Determines the entity type from passed in set expression.
            </summary>
            <param name="expressionToCheck">The expression to check.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.AddRelationsRangeToRelationsCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations range in source to the relations collection called destination. If destination is null and source is not empty, 
            a new relationcollection is returned with source's relations added to it.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <returns>destination with the relations of source added to it, or a new relationcollection instance if destination is empty and source isn't empty
            or null if destination is null and source is empty</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ObtainRealValueFromConstantWrapped(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)">
            <summary>
            Obtains the real value from constant expression and wrap it again in a ConstantExpression. The 'real' value is the value of the object referred to
            by the constant, e.g. an object property.
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ReplaceFirstFieldInProjection(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Replaces the first field in project.
            </summary>
            <param name="projection">The projection.</param>
            <param name="fieldToSetAsFirstField">The field to set as first field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetFirstFieldInProjection(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets the first field in projection.
            </summary>
            <param name="projection">The projection.</param>
            <param name="elementCreator">The element creator.</param>
            <returns>the first field in the projection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetAllFieldsFromProjection(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Gets all fields from projection.
            </summary>
            <param name="projection">The projection.</param>
            <param name="elementCreator">The element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreatePredicateExpressionFromCorrelationRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Creates a predicate expression from the correlation relation passed in. It aliases all fields to the start/end alias set, and creates
            field compare field predicates (FieldCompareExpression instances) which are added with AND to the expression to return
            </summary>
            <param name="correlationRelation">The correlation relation.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <returns>
            a PredicateExpression with predicates which can be used to tie a correlated subquery to the outer query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreatePredicateExpressionFromCorrelationRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore}@)">
            <summary>
            Creates a predicate expression from the correlation relation passed in. It aliases all fields to the start/end alias set, and creates
            field compare field predicates (FieldCompareExpression instances) which are added with AND to the expression to return
            </summary>
            <param name="correlationRelation">The correlation relation.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="pkFieldsOfcorrelation">The pk fields ofcorrelation.</param>
            <returns>
            a PredicateExpression with predicates which can be used to tie a correlated subquery to the outer query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreatePredicate(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates a predicate based on the imput specified.
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreatePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates a predicate based on the imput specified.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateConstantBoolPredicate(System.Boolean,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates a constant false predicate. This predicate results in a @param=0 predicate, where the param has a value of 1.
            </summary>
            <param name="result">the result the predicate should deliver</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns>
            1==0 comparing predicate if the result should be false, a 1==1 comparing predicate if the result should be true
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ObtainValidFieldFromEntity(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Obtains a valid field from the entity of which the type is passed in. A valid field is a field which is located in that entity and also defined in that
            entity so not inherited from a supertype.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>valid field of entity.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateDerivedTable(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates a derived table definition from the expression to convert.
            </summary>
            <param name="expressionToConvert">The expression to convert.</param>
            <param name="alias">The alias for the derived table.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns>ready to use derived table definition</returns>
            <remarks>Assumes expressionToConvert has been flattened to a single query expression.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateProperReferenceFieldFromSourceFieldFromProjection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Boolean,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates the proper reference field from source field from projection.
            </summary>
            <param name="targetField">The target field.</param>
            <param name="targetSetAlias">The target set alias.</param>
            <param name="targetIsDerivedTable">if set to true, the target is assumed to be a derived table (so the result field will be a derived table
            targeting field)</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineSetElementType(System.Type)">
            <summary>
            Determines the type of the elements in the set which type is passed in.
            </summary>
            <param name="setType">Type of the set.</param>
            <returns>the type of the element of the set, if determinable, otheriwse settype</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateDerivedTableAdapter(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates the derived table definition for adapter.
            </summary>
            <param name="expressionToConvert">The expression to convert.</param>
            <param name="alias">The alias for the derived table.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns>ready to use derived table definition</returns>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateDerivedTableSelfServicing(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates the derived table definition for selfservicing.
            </summary>
            <param name="expressionToConvert">The expression to convert.</param>
            <param name="alias">The alias for the derived table.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns>ready to use derived table definition</returns>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ObtainTypeFilterForEntity(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Obtains the type filter for the entity with the type specified.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.IsNullableOfT(System.Type)">
            <summary>
            Determines whether the passed in type is a nullable(Of T) type. If so, true is returned, otherwise false
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns>true if passed in type is Nullable(Of T), otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.SafeExpressionToString(System.Linq.Expressions.Expression)">
            <summary>
            returns the string representation of the element passed in or "(null)" if null.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CoerceBooleanExpressionToDbFunctionCallParameter(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Coerces the boolean expression to a db function call parameter.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="functionMappings">The function mappings.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CoercePredicateToPredicateExpression(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Coerces the predicate to predicate expression.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ProduceBooleanProducerLambdaFromBooleanTypedExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,System.Collections.Generic.Dictionary{System.Int32,System.Linq.Expressions.Expression}@)">
            <summary>
            Produces the boolean producer lambda from boolean typed expression (which can be a filter or an LLBLGen expression with boolean operator)
            boolean expression in projection means it has to be wrapped inside a scalarquery expression which should be wrapped inside a field which then
            should be the parameter of a dbfunction call which represents a CASE statement. This db function call's result has to be processed by
            a lambda which checks if the dbfunction call's case statement returned 1 or 0 and returns true or false.
            </summary>
            <param name="booleanTypedExpression">The boolean typed expression.</param>
            <param name="functionMappings">The function mappings.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="boolProducerArguments">The bool producer arguments.</param>
            <returns>
            Lambda which can be used to obtain a boolean value from a resultset from a projectionfetch.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ProduceInvocationLambdaFromInvocationExpression(System.Linq.Expressions.InvocationExpression,System.Collections.Generic.Dictionary{System.Int32,System.Linq.Expressions.Expression})">
            <summary>
            Produces an invocation lambda from the invocation expression passed in.
            It wraps the realLambda into a (values, indices) =&gt; realLambda(values[indexes[0]], values[indexes[1]], ...) call.
            </summary>
            <param name="toConvert">To convert.</param>
            <param name="invocationArguments">The invocation arguments.</param>
            <returns>Lambda which is usable in a projection.</returns>
            <remarks>The passed in expression is already handled.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateBoolProducerLambda">
            <summary>
            Creates a bool producer lambda which is usable in projections via the ProjectionValueProducerFunc delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CheckIfImplicitCast(System.Type,System.Type)">
            <summary>
            Checks if the cast from fromType to toType is an implicit cast.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
            <returns>true if the cast is an implicit cast, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.FillTypeGroupsLookup">
            <summary>
            Fills the type groups lookup.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.FindTypeGroup(System.Type)">
            <summary>
            Finds the type group the passed in type is in. 
            </summary>
            <param name="toFind">To find.</param>
            <returns>the typegroup of toFind or false if not found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.AddPathEdgesToPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore,System.Collections.Generic.List{SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression})">
            <summary>
            Adds the path edge to the prefetch path passed in.
            </summary>
            <param name="path">The path.</param>
            <param name="edges">The edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.AddPathEdgesToPrefetchPathElement(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Collections.Generic.List{SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.PathEdgeExpression})">
            <summary>
            Adds the path edges as elements to prefetch path element.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="edges">The edges.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineEntityTypeFromType(System.Type)">
            <summary>
            Determines the type of the entity type from the type passed in.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <returns>sourceType if sourceType is an entity type. if sourceType is a generic type which has an entity type as generic argument,
            the generic argument is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.AddFieldToProjectionIfNotPresent(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Adds the field to projection if not present already. Uses field alias checks. If the projection is an entity projection, this routine is a no-op
            </summary>
            <param name="fieldToCheck">The field to check.</param>
            <param name="projection">The projection.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>index of the field in the projection.</returns>
            <remarks>assumes fieldToCheck has already been cloned</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ValuesAreEqual(System.Object,System.Object)">
            <summary>
            Compares two values based on their values using the ORMSupportClasses routine in FieldUtilities. This method is here to avoid breakage of Linq code
            without noticing it if the signature of the ORMSupportClasses routine changes. This routine has no code of its own, it simply calls into the 
            FieldUtilities.ValuesAreEqual routine
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
            <remarks>Changing this method's signature will break code. Do a search for methodinfo retrieval of this method before changing this methods signature</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.RemovePredicatesFromFilter(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate},SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Removes the passed in predicates from the filter to clean.
            </summary>
            <param name="predicatesToRemove">The predicates to remove.</param>
            <param name="filterToClean">The filter to clean.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineDifferentValuesForNestedQueryFilter(System.Collections.Generic.List{System.Object[]},SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification)">
            <summary>
            Determines the different values for nested query filter. This set of values is then used to build a parameterized query if possible.
            </summary>
            <param name="currentLevelData">The current level data.</param>
            <param name="nestedQuery">The nested query.</param>
            <returns>list of different values, per row in currentLevelData. It uses a string-based key where the values are stored as strings to
            avoid complex hashing algorithms to match duplicates.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CalculateRowHashesForSpecifiedValues(SD.LLBLGen.Pro.LinqSupportClasses.HierarchyFetchResults,System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates the hashes for the values in valuesToHash's raw row results for the values in the rows at the indices specified. The hashes are stored
            using a key calculated from the indices in the valuesToHash object
            </summary>
            <param name="valuesToHash">The values to hash.</param>
            <param name="valueIndices">The value indices.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CalculateRowHashForSpecifiedValues(System.Object[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Calculates the row hash from the values at the specified indices
            </summary>
            <param name="rowData">The row data.</param>
            <param name="valueIndices">The value indices.</param>
            <returns>Hashvalue for the row for the fields at the specified fields.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateHashValueKeyFromIndices(System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates the hash value key from indices.
            </summary>
            <param name="valueIndices">The value indices.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.WrapProjectionElementInSelectIfRequired(System.Linq.Expressions.Expression)">
            <summary>
            Wraps the projection element in select passed in if required. This is necessary if the expression is an entity expression and it has a correlationrelation
            which means that the projection element contains a reference to a related entity which will result in a nested query.
            </summary>
            <param name="toCheck">To check.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateScalarQueryFromQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Creates a scalarqueryexpression object from the query passed in. 
            </summary>
            <param name="queryToConvert">The query to convert.</param>
            <returns></returns>
            <remarks>Assumes query passed in is a scalar query with a valuelistprojection of 1 field</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CoerceToType(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Coerces the linq expression to the targettype.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <param name="targetType">Type of the target.</param>
            <returns>toCoerce if toCoerce's type is equal to targetType, otherwise it's wrapped in a Convert</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.StripOutProjectionFromJoinResultExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression)">
            <summary>
            Strips out the projection from join result expression.
            </summary>
            <param name="toStrip">To strip.</param>
            <returns>JoinResultExpression without the projection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.GetElementCreator(System.Linq.IQueryable)">
            <summary>
            Gets the element creator stored in the provider in the passed in queryable.
            </summary>
            <param name="query">The query from which the elementcreator instance should be obtained.</param>
            <returns>the elementcreator object inside the provider inside the passed in query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ConvertLocalExpressionToRealObject(System.Linq.Expressions.Expression)">
            <summary>
            Converts the local expression to a real object. This is done by a trick: we'll compile the whole expression as a lambda and run it. 
            this will return the object, including initialization results and completely materialized as we want it. The passed in expression is for example a 
            list or array initialization / ctor call. To utilize the in-memory object, we've to run this ctor to be able to use the values. This routine takes care 
            of that.
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>The result of the expression after running it wrapped in a ConstantExpression. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CoerceToSet(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,System.Boolean)">
            <summary>
            Coerces the passed in linq expression to setexpression. If the passed in expression is a parameter, it will convert it to a setreference expression
            otherwise it will try to cast it to a setexpression. If this can't be done, in the situation where tocoerce isn't a setexpression, null is returned.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="throwOnFailure">if set to true, it will throw an exception</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CheckifJoinIsFullQuery(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinExpression)">
            <summary>
            Checks if the passed in join is a full query or just a join. 
            It's a full query if the projection lambda has as output type not a type which is build from the two input types.
            </summary>
            <param name="joinExpression">The join expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.SetProperHintForJoin(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Sets the proper hint for join in the relation passed in. It will set it to left join if the start entity is the fk side and the fk is nullable
            it will set it to right join if the end entity is the fk side and the fk is nullable. In all other cases the hint stays inner join.
            </summary>
            <param name="relation">The relation.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CheckIfFieldsFormNullableFK(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Checks if the set of fields form together a nullable FK.
            </summary>
            <param name="fkFields">The fk fields.</param>
            <returns>true if the fields passed in form a nullable FK, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.HandleMemberMappedOnRelationIsPartOfEntity(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Handles the member which is mapped onto a relation and which is part of an entity
            </summary>
            <param name="expressionToHandle">The expression to handle.</param>
            <param name="memberContainer">The member container.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>
            The handling result or null if the expression to handle couldn't be handled.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.DetermineEntityTypeFromMemberExpression(System.Linq.Expressions.MemberExpression,System.Type)">
            <summary>
            Gets the entity type from member. Assumes the member is either an entity or a collection and the member is defined on an entity
            </summary>
            <param name="member">The member.</param>
            <param name="containingType">Type of the containing type of the member.</param>
            <returns>
            The entity type we're interested in which is represented by the member passed in.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CheckAndFixJoinType(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Checks the jointype if it has to be altered because it would otherwise ruin a left/right join
            </summary>
            <param name="relation">The relation to check.</param>
            <param name="relationsToCheckWith">The relations to check with. It's assumed this list is already correct</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CoerceLinqExpressionToProjectionListExpression(System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker,SD.LLBLGen.Pro.LinqSupportClasses.FunctionMappingsContainer)">
            <summary>
            Coerces the handled expression to a projection list expression. It converts the expression into a lambda which is compiled into a func which is
            usable to instantiate the projection  result.
            </summary>
            <param name="toCoerce">To coerce.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
            <param name="functionMappings">The function mappings.</param>
            <returns>
            projectionlist expression which represents the new expression passed in.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.RemoveUnaryQuoteExpressionWrappers(System.Linq.Expressions.Expression)">
            <summary>
            Removes the unary quote expression wrappers. Some unary expressions are wrapped in Unary expressions which are of type Quote, and which
            simply wrap an inner expression. This method unwraps the inner expression, as we're not interested in the wrapper.
            </summary>
            <param name="toUnwrap">To unwrap.</param>
            <returns>the inner expression without the quote wrapper(s). if there are more nested quote wrappers, all are removed.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.RemoveConvertExpressionWrappers(System.Linq.Expressions.Expression)">
            <summary>
            Removes the convert expression wrappers, which are Unary expression which are simply Convert expression but don't do anything really useful.
            </summary>
            <param name="toUnwrap">To unwrap.</param>
            <returns>the inner expression of the convert expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CoerceSetReferenceExpressionToEntityFieldExpressionIfRequired(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Coerces the set reference expression to entity field expression if required.
            </summary>
            <param name="target">The target of toCoerce.</param>
            <param name="toCoerce">To coerce.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns>
            toCoerce if it's not a setreference expression, otherwise the first field in the projection of handledLeft, if it's a query
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateProjectionForQueryIfNoProjectionAvailable(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Creates a projection for the query passed in, if it doesn't have a projection yet.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CreateProjectionForQueryIfNoProjectionAvailable(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates a projection for the query passed in, if it doesn't have a projection yet.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="aliasToUse">The alias to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ProduceValueListProjectionToTargetQuery(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Produces the value list projection to target query.
            </summary>
            <param name="queryToTarget">The query to target.</param>
            <param name="aliasToUse">The alias to use.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.CorrectAliasesOfDefaultIfEmptyElements(System.Linq.Expressions.Expression,System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias})">
            <summary>
            Corrects the aliases of default if empty elements in the QueryExpression passed in. 
            </summary>
            <param name="handledExpression">The handled expression.</param>
            <param name="replacementSet">The replacement set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.IsSingleValueType(System.Type)">
            <summary>
            Determines whether the type passed in is a value type or a type which is a single value and thus should be considered a type a field could have.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>
            true if the type is a single value type or false if not.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LinqUtils.ConvertQueryExpressionToScalarInsideLLBLExpression(System.Linq.Expressions.Expression)">
            <summary>
            Converts the query expression to scalar inside LLBL gen pro expression.
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>
            ScalarQueryExpression wrapped in a LLBLGenProExpressionExpression if toConvert is a QueryExpression, otherwise it will return toConvert
            </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ILinqMetaData">
            <summary>
            Interface which is implemented on the LinqMetaData class in the generated code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ILinqMetaData.GetQueryableForEntity(System.Int32)">
            <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
            <param name="typeOfEntity">the type of the entity to get the datasource for</param>
            <returns>the requested datasource</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider">
            <summary>
            Selfservicing specific LLBLGenPro Linq provider class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase">
            <summary>
            Abstract base class for llblgen pro providers for Linq.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase"/> class.
            </summary>
            <param name="creator">The creator.</param>
            <param name="customFunctionMappings">The custom function mappings.</param>
            <param name="selfServicing">if set to true, this provider is for selfservicing, false otherwise</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the result of executing the specified query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.HandleExpressionTree(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the expression tree.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.GetAllFunctionMappings">
            <summary>
            Gets all function mappings defined by the DQE and combines them with the custom function mappings specified. 
            </summary>
            <returns>container with functionmapping stores with the known function mappings.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.ExecuteExpression(System.Linq.Expressions.Expression)">
            <summary>
            Executes the expression.
            </summary>
            <param name="handledExpression">The handled expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.EvaluateExpressionTree(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the expression tree.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.MaterializeCurrentLevelData(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Collections.Generic.List{System.Object[]})">
            <summary>
            Materializes the current level data into objects and returns them in an Ilist. Data is stored in the target of the projector passed in.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector.</param>
            <param name="currentLevelData">The current level data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.CheckProjection(SD.LLBLGen.Pro.LinqSupportClasses.ProjectionDefinition)">
            <summary>
            Checks the projection. Throws a query construction exception if the projection can't be used to  instantiate instances
            </summary>
            <param name="toCheck">To check.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.ProduceNestedQueryAdditionalFilter(System.Collections.Generic.List{System.Object[]},SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification,System.Int32,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Produces the additional filter for the nested query so the nested query's results are filtered on the current level's results so only the results
            which possibly match a fetched element on the current level are retrieved.
            </summary>
            <param name="currentLevelData">The current level data.</param>
            <param name="currentLevelFilter">The current level filter, used to fetch the current level data.</param>
            <param name="currentLevelRelations">The current level relations.</param>
            <param name="nestedQuery">The nested query.</param>
            <param name="parameterizedPrefetchPathThreshold">The parameterized prefetch path threshold.</param>
            <param name="frameworkSpecificCreator">The framework specific creator.</param>
            <returns>the filter to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.CreateMultiValueProjector(System.Type,System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[])">
            <summary>
            Creates the custom list or entity collection projector for a multi-value projection
            </summary>
            <param name="containerElementType">Type of the container element.</param>
            <param name="results">The results.</param>
            <param name="projectionInstantiator">The projection instantiator.</param>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.CreateResultsContainer(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Creates the results container for a multi-value projection
            </summary>
            <param name="containerElementType">Type of the container element.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.FixupFieldIfNoSourceFound(System.Collections.IEnumerable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Linq.Expressions.Expression,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Checks if the first field in the list of fields points to a source (if no relations are specified. If relations are specified, this routine is a no-op).
            If no source is found, the first field in the lastMergedSourceWithProjection is used instead.
            </summary>
            <param name="fields">The fields.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="lastMergedSourceWithProjection">The last merged source with projection.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.ExecuteEntityProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Executes the query expression which contains an entity projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>the result of the execution of the query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.ExecuteValueListProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Executes the QueryExpression which contains a multi value list projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>the result of the execution of the query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.GetDQEFunctionMappings">
            <summary>
            Gets the function mappings defined by the DQE.
            </summary>
            <returns>The function mapping store as defined inside the DQE or null if none found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.CreateTemplateGroupCreator">
            <summary>
            Creates the template group creator for this provider.
            </summary>
            <returns>ready to use creator</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.CheckPagingParameters(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Checks the paging parameters inside the query to execute. If skip was specified and not takepage, paging parameters will be calculated from MaxNumberOf..
            and NumberOfRowsToSkip. If MaxNumberOfElementsToReturn isn't a divider of NumberOfRowsToSkip, an exception is thrown. 
            </summary>
            <param name="toCheck">To check.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query.
            </summary>
            <typeparam name="TElement">The type of the element.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.PostProcessQueryResult(System.Object,System.Type)">
            <summary>
            Postprocesses the query result passed in
            </summary>
            <param name="results">The results.</param>
            <param name="resultType">Type of the result.</param>
            <returns>the post-processing result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An <see cref="T:System.Linq.Expressions.Expression"/> that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the result of executing the specified query.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.Creator">
            <summary>
            Gets the creator.
            </summary>
            <value>The creator.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProviderBase.CustomFunctionMappings">
            <summary>Gets or sets the custom function mappings to use. These take higher precedence than the ones in the DQE to use</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider"/> class.
            </summary>
            <param name="transactionToUse">The transaction to use.</param>
            <param name="creator">The creator to create project elements.</param>
            <param name="customFunctionMappings">The custom function mappings.</param>
            <param name="contextToUse">The context to use for entity fetches.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.CreateTemplateGroupCreator">
            <summary>
            Creates the template group creator for this provider.
            </summary>
            <returns>ready to use creator</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ExecuteEntityProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Executes the query expression which contains an entity projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>the result of the execution of the query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ExecuteValueListProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Executes the QueryExpression which contains a multi value list projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>the result of the execution of the query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ExecuteHierarchicalValueListProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Executes a hierarchical value list projection. It's assumed that toExecute is a query which has 1 or more nested queries in the projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="additionalFilter">The additional filter to use. This filter is used in fetching the data of this level. This filter is
            normally a filter based on the parent's filter/data. Is null if this is the first level/call.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns>result of projection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.GetDQEFunctionMappings">
            <summary>
            Gets the function mappings defined by the DQE.
            </summary>
            <returns>
            The function mapping store as defined inside the DQE or null if none found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.SetupProjectionElementsForExecution(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Sets up the projection elements for execution of the query passed in. The elements to use are stored in the returned object
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>bucket with the elements to use for a successful execution of the query passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.GetElementCreator">
            <summary>
            Gets the element creator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.CreateRelationCollectionToPass(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Creates the relation collection to pass.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.CreateRelationCollectionToPass(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates the relation collection to pass.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="aliasSuggestion">The alias suggestion.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.TransactionToUse">
            <summary>
            Gets or sets the transaction to use.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements">
            <summary>
            simple bucket for the elements necessary to execute a projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements.ValueProjectors">
            <summary>
            Gets or sets the value projectors.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements.Projector">
            <summary>
            Gets or sets the projector.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements.Results">
            <summary>
            Gets or sets the results.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements.Relations">
            <summary>
            Gets or sets the relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider.ProjectionExecutionElements.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2">
            <summary>
            Adapter specific LLBLGenPro Linq provider class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator2,SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2"/> class.
            </summary>
            <param name="adapterToUse">The adapter to use.</param>
            <param name="creator">The creator to create project elements.</param>
            <param name="customFunctionMappings">The custom function mappings.</param>
            <param name="contextToUse">The context to use for entity fetches.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.CreateTemplateGroupCreator">
            <summary>
            Creates the template group creator for this provider.
            </summary>
            <returns>ready to use creator</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ExecuteEntityProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Executes the query expression which contains an entity projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>the result of the execution of the query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ExecuteValueListProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Executes the QueryExpression which contains a multi value list projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>the result of the execution of the query</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.GetDQEFunctionMappings">
            <summary>
            Gets the function mappings defined by the DQE.
            </summary>
            <returns>
            The function mapping store as defined inside the DQE or null if none found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ExecuteHierarchicalValueListProjection(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Executes a hierarchical value list projection. It's assumed that toExecute is a query which has 1 or more nested queries in the projection.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="additionalFilter">The additional filter to use. This filter is used in fetching the data of this level. This filter is
            normally a filter based on the parent's filter/data. Is null if this is the first level/call.</param>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <returns>result of projection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProduceNestedQueryAdditionalFilter(System.Collections.Generic.List{System.Object[]},SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket,SD.LLBLGen.Pro.LinqSupportClasses.NestedQuerySpecification,SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator)">
            <summary>
            Produces the additional filter for the nested query so the nested query's results are filtered on the current level's results so only the results
            which possibly match a fetched element on the current level are retrieved.
            </summary>
            <param name="currentLevelData">The current level data.</param>
            <param name="currentLevelFilter">The current level filter, used to fetch the current level data.</param>
            <param name="nestedQuery">The nested query.</param>
            <param name="frameworkSpecificCreator">The framework specific creator.</param>
            <returns>the filter to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.SetupProjectionElementsForExecution(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Sets up the projection elements for execution of the query passed in. The elements to use are stored in the returned object
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>bucket with the elements to use for a successful execution of the query passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.CreateRelationPredicateBucketFromSetFilterElements(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Creates the relation predicate bucket from set filter elements.
            </summary>
            <param name="toExecute">To execute.</param>
            <returns>RelationPredicateBucket instance with the predicate and relations elements from the queryexpression specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.CreateRelationPredicateBucketFromSetFilterElements(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates the relation predicate bucket from set filter elements.
            </summary>
            <param name="toExecute">To execute.</param>
            <param name="aliasSuggestion">The alias suggestion.</param>
            <returns>
            RelationPredicateBucket instance with the predicate and relations elements from the queryexpression specified.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.GetElementCreator">
            <summary>
            Gets the element creator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.AdapterToUse">
            <summary>
            Gets or sets the adapter to use for executing the query.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProjectionExecutionElements">
            <summary>
            simple bucket for the elements necessary to execute a projection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProjectionExecutionElements.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProjectionExecutionElements.ValueProjectors">
            <summary>
            Gets or sets the value projectors.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProjectionExecutionElements.Projector">
            <summary>
            Gets or sets the projector.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProjectionExecutionElements.Results">
            <summary>
            Gets or sets the results.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProProvider2.ProjectionExecutionElements.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1">
            <summary>
            Generic query class which is returned from the Linq query source's CreateQuery method. This object is the result of the <i>linq statement</i> in C#/VB.NET code
            and which is the start point of the actual expression tree evaluation and execution.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>the Execution result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.SingleEnumerator(`0)">
            <summary>
            Returns a single value
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.EmptyEnumerator">
            <summary>
            Returns an empty enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.SD#LLBLGen#Pro#LinqSupportClasses#ILLBLGenProQuery#Execute">
            <summary>
            Executes the query this object represents.
            </summary>
            <returns>The query execution result.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.SD#LLBLGen#Pro#LinqSupportClasses#ILLBLGenProQuery#Execute``1">
            <summary>
            Executes the query this object represents
            </summary>
            <typeparam name="TResult">The type of the query result</typeparam>
            <returns>the query execution result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.System#Linq#IQueryable#ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is 
            executed.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.LLBLGenProQuery`1.System#Linq#IQueryable#Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods">
            <summary>
            Class for the LLBLGen Pro extension methods for Queryable. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.ExcludeFields``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Specifies a list of fields to exclude for an entity fetch. 
            </summary>
            <typeparam name="TSource">The type of the source</typeparam>
            <param name="source">The source to specify the fields to exclude for</param>
            <param name="fieldSpecifications">The fields to exclude</param>
            <returns>An IQueryable(Of T) that has the fields to exclude set</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.IncludeFields``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Specifies a list of fields to include for an entity fetch. All fields not specified aren't fetched (fields which are required like fk fields are always
            fetched)
            </summary>
            <typeparam name="TSource">The type of the source</typeparam>
            <param name="source">The source to specify the fields to include for</param>
            <param name="fieldSpecifications">The fields to include</param>
            <returns>An IQueryable(Of T) that has the fields to include set</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.WithPath``1(System.Linq.IQueryable{``0},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdge[])">
            <summary>
            Specifies a prefetch path with the edges specified when fetching source.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="pathEdges">The path edges.</param>
            <returns>An IQueryable(Of T) that has the specified path with the edges fetched as related entities, using prefetch paths.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.WithPath``1(System.Linq.IQueryable{``0},System.Func{SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{``0},SD.LLBLGen.Pro.LinqSupportClasses.IPathEdgeRootParser{``0}})">
            <summary>
            Specifies a prefetch path with the path edges specified in the form of a chain of method calls using lambda expressions.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="edgeSpecifierFunc">The edge specifier func.</param>
            <returns>
            An IQueryable(Of T) that has the specified path with the edges fetched as related entities, using prefetch paths.
            </returns>
            <example>
            (some query).WithPath(path=&gt;path.Prefetch&lt;OrderEntity&gt;(c=&gt;c.Order).Excluding(o=&gt;o.RequiredDate, o=&gt;o.ShippedDate);
            </example>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.WithPath``1(System.Linq.IQueryable{``0},SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore)">
            <summary>
            Specifies a prefetch path for the source. Use this overload if you have existing code which produces prefetch path objects for you
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="path">The path to use with source.</param>
            <returns>An IQueryable(Of T) that has the specified path set as the prefetch path to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.TakePage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Returns the <i>pageNumber</i>-th page of size <i>pageSize</i> from the sequence the method is applied on.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>An IQueryable(Of T) that contains the specified page of the specified size.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.CountColumn``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            returns the number of values in the set specified by selector which is 1 column wide.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector. A projection function to apply to each element.</param>
            <returns>The number of values.</returns>
            <remarks>doesn't apply DISTINCT to the set to count. If you want the total of distinct values, use the overload which accepts a boolean.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.CountColumn``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            returns the number of distinct values in the set specified by selector which is 1 column wide
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector. A projection function to apply to each element.</param>
            <param name="applyDistinct">if set to true, DISTINCT is applied on the set to count.</param>
            <returns>The number of distinct values.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.StandardDeviation``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            returns the standard deviation over the column specified by selector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <remarks>doesn't apply DISTINCT. If you want the standard deviation over only distinct values, use the overload which accepts a boolean.</remarks>
            <returns>The standard deviation over the values in the column specified by selector.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.StandardDeviation``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            returns the standard deviation over the column specified by selector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="applyDistinct">if set to true, DISTINCT is applied on the set the standarddeviation is applied on</param>
            <returns>The standard deviation over the values (distinct values if applyDistinct is true) in the column specified by selector.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.Variance``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            returns the variance over the column specified by selector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <remarks>doesn't apply DISTINCT. If you want the variance over only distinct values, use the overload which accepts a boolean.</remarks>
            <returns>The variance over the values in the column specified by selector.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.Variance``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            returns the variance over the column specified by selector.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="applyDistinct">if set to true, DISTINCT is applied on the set the variance is applied on</param>
            <returns>The variance over the values (distinct values if applyDistinct is true) in the column specified by selector.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.CreateExcludeIncludeFieldsCallExpression``1(System.Linq.IQueryable{``0},System.Reflection.MethodInfo,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Creates the exclude include fields call expression for ExcludeFields and IncludeFields.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="methodCalled">The method called.</param>
            <param name="fieldSpecifications">The field specifications.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.CreateAggregateCallExpressionNonDistinct``2(System.Reflection.MethodInfo,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates the aggregate call expression for non distinct aggregate calls
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="methodCalled">The method called.</param>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <returns>
            Linq expression call to an aggregate method, namely the method represented by methodCalled.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryableExtensionMethods.CreateAggregateCallExpressionDistinct``2(System.Reflection.MethodInfo,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Creates the aggregate call expression for non distinct aggregate calls
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TColumnType">The type of the column type.</typeparam>
            <param name="methodCalled">The method called.</param>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="applyDistinct">if set to <c>true</c> [apply distinct].</param>
            <returns>
            Linq expression call to an aggregate method, namely the method represented by methodCalled.
            </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.OwnExpressionExtensions">
            <summary>
            Extension method class for own Expressionclasses
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.OwnExpressionExtensions.IsLLBLGenProExpression(System.Linq.Expressions.ExpressionType)">
            <summary>
            Determines whether the passed in expression type is an LLBLGenProExpressionType enum value
            </summary>
            <param name="expressionType">Type of the expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.OwnExpressionExtensions.GetLLBLGenProExpressionType(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the LLBLGenProExpressionType enum value
            </summary>
            <param name="expressionType">Type of the expression.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.OwnExpressionExtensions.GetNodeTypeAsString(System.Linq.Expressions.ExpressionType)">
            <summary>
            Gets the node type as string.
            </summary>
            <param name="expressionType">Type of the expression.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions">
            <summary>
            Extensin method class for classes in the ORMSupportClasses.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.IsEmpty(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Determines whether the specified relation collection is empty. A null passed in is also considered empty.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if the collection passed in is null or has no elements, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.IsEmpty(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Determines whether the specified sortexpression is empty. A null passed in is also considered empty.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if the sortexpression passed in is null or has no elements, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.IsEmpty(SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Determines whether the specified groupbycollection is empty. A null passed in is also considered empty.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if the groupbycollection passed in is null or has no elements, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.IsEmpty(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Determines whether the specified predicate or predicate expression is empty. A null passed in is also considered empty
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if the predicate passed in is null or has no elements, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.Last(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets the last relation in the passed in relations collection or null if it's empty
            </summary>
            <param name="relations">The relations.</param>
            <returns>
            the last relation in the passed in relations collection or null if it's empty
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.RemoveLast(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Removes the last relation from the passed in relationcollection. Assumes last entry is an entity relation
            </summary>
            <param name="relations">The relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ORMClassExtensions.CloneWithoutFirst(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Clones the relationcollection without the first relation.
            </summary>
            <param name="toClone">To clone.</param>
            <returns>
            the relationcollection without the first relation.
            </returns>
            <remarks>Used in situations where a set of relations have to be added to a relationcollection but not the correlation relation (which is the first one).
            if there are more than one relations in the passed in collection, all are returned.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.DotNetFrameworkExtensions">
            <summary>
            Class with .NET framework extension methods, specific for this library
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DotNetFrameworkExtensions.AddAliasToContainer(System.Collections.Generic.Stack{SD.LLBLGen.Pro.LinqSupportClasses.AliasContainer},SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Adds the alias passed in to the first container found on the stack passed in/
            </summary>
            <param name="containerStack"></param>
            <param name="toAdd"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DotNetFrameworkExtensions.ToReadOnlyCollection``1(System.Collections.IEnumerable)">
            <summary>
            Converts the list to a readonly collection.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.DotNetFrameworkExtensions.IsEnumerableType(System.Type)">
            <summary>
            Determines whether the type this method is called on is an enumerable type. if t is of type string, it returns false. 
            </summary>
            <param name="t">The type.</param>
            <returns>
            	true if t implements IEnumerable and isn't of type string, false otherwise
            </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener">
            <summary>
            Class which merges a hierarchy with at the top a Queryexpression and its source set to a Linq expression, into a single queryexpression. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.#ctor(SD.LLBLGen.Pro.LinqSupportClasses.ITemplateGroupSpecificCreator,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,SD.LLBLGen.Pro.LinqSupportClasses.MappingTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener"/> class.
            </summary>
            <param name="frameworkElementCreator">The framework element creator.</param>
            <param name="generatedCodeElementCreator">The generated code element creator.</param>
            <param name="trackedMappings">The tracked mappings.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.FlattenHierarchy(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Flattens the hierarchy this queryexpression is the root of. It merges all expressions referenced by Source into this expression
            so the complete hierarchy is referable by this query.
            </summary>
            <param name="toFlatten">To flatten.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeEntityExpressionIntoQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.EntityExpression)">
            <summary>
            Merges the EntityExpression into this QueryExpression. If this query expression has a projection, this method
            is void, as the projection determines in LLBLGen Pro what the source is, if there are no relations specified and no correlationRelation is specified.
            If this query expression doesn't require a projection, this merge is void, as the mergeSource isn't used by mergeDestination.
            If mergeSource has a CorrelationRelation set, it will be converted into a predicate which is added with AND to the mergeDestination's filter, plus
            PkFieldsOfLastCorrelationRelationMerged will contain the PK fields of said correlation relation.
            If mergeSource has relations defined, these are inserted in front of the mergeDestination relations.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.CheckIfQueriesAreMergable(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Checks if queries are mergable. Queries which aren't mergable will cause that mergeSource becomes a derived table from which mergeDestination
            will obtain its data.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
            <returns>true if the queries are mergable, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeJoinResultIntoQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.JoinResultExpression)">
            <summary>
            Merges the JoinResult into the QueryExpression. Only relations are merged, the rest is ignored, as the caller would otherwise have converted
            it into a QueryExpression
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeQueryIntoQueryExpression(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the queryexpression mergeSource into the query expression mergeDestination.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
            <returns>true if source was merged into destination, false if it was wrapped into a derived table.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeExcludedIncludedFieldsLists(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the excluded included fields lists.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergePrefethPaths(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the prefeth paths of source and destination. Merging isn't really taken place: if destination has a path, nothing is done. If 
            destination doesn't have a path and source does, source's path becomes destination's path. 
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeGroupBy(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the group by collections. Add mergeSource's fields into mergeDestination's groupby collection
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeSorter(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the sorters of mergeSource into mergeDestination. mergeSource is the parent of the mergeDestination in this case. 
            (sort clauses of mergeSource have to be placed in front of mergeDestination)
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergePagingAndLimitData(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the paging and limit data.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeAllowDuplicates(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the AllowDuplicates flags
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeRelations(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the relations. 
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeFilters(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the filters. Merging filters is equal to: source filter AND destination filter becomes destination filter.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.QueryExpressionHierarchyFlattener.MergeProjections(SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression,SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.QueryExpression)">
            <summary>
            Merges the projections.
            </summary>
            <param name="mergeDestination">The merge destination.</param>
            <param name="mergeSource">The merge source.</param>
            <remarks>Assumes projections are mergable</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator">
            <summary>
            Class which creates elements specifically for selfservicing, like EntityField objects, predicates for selfservicing etc.
            It assumes fields for predicates already have an object alias set.
            </summary>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreatePrefetchPathObject(System.Int32)">
            <summary>
            Creates a new prefetch path object for the entity type specified.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns>ready to use prefetch path object. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateFieldCompareValuePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            Creates a new FieldCompareValuePredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateFieldCompareRangePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Collections.IList)">
            <summary>
            Creates a new FieldCompareRangePredicate instance.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="valueRange">The value range for the IN clause.</param>
            <returns>ready to use FieldCompareRangePredicate </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateFieldCompareExpressionPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Creates a new FieldCompareExpressionPredicate
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="predicateOperator">The predicate operator.</param>
            <param name="compareOperand">The compare operand.</param>
            <returns>ready to use predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateFieldCompareNullPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Creates a new FieldCompareNullPredicate.
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <returns>ready to use FieldCompareNull predicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateFieldLikePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Creates a new FieldLikePredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="pattern">The pattern.</param>
            <returns>ready to use fieldLikePredicate instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateExpressionField(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type)">
            <summary>
            Creates a new EntityField(2) object which contains the expression passed in. The name is artificial.
            </summary>
            <param name="expressionToWrapInField">The expression to wrap in field.</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateNewArtificialFieldName">
            <summary>
            Creates a new artificial field name 
            </summary>
            <returns>the new field name to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateDerivedTableReferencingField(System.String,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias,System.Type)">
            <summary>
            Creates a new derived table referencing field, of type EntityField(2).
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias (alias of set the field to refer to is in).</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateDerivedTableReferencingField(System.String,System.String,System.Type)">
            <summary>
            Creates a new derived table referencing field, of type EntityField(2).
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias (alias of set the field to refer to is in).</param>
            <param name="dataType">.NET Type of the data.</param>
            <returns>ready to use entity field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateSortClause(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,SD.LLBLGen.Pro.LinqSupportClasses.SetAlias)">
            <summary>
            Creates a new SortClause instance
            </summary>
            <param name="fieldToSort">The field to sort.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="objectAlias">The object alias.</param>
            <returns>ready to use SortClause instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.SelfServicingSpecificCreator.CreateFieldCompareSetPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int64,System.String,System.Boolean)">
            <summary>
            Creates a new FieldCompareSetPredicate instance
            </summary>
            <param name="fieldToCompare">The field to compare.</param>
            <param name="setField">The set field.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="setFilter">The set filter.</param>
            <param name="setRelations">The set relations.</param>
            <param name="setSorter">The set sorter.</param>
            <param name="setGroupBy">The set group by.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="negate">if set to true, the predicate will be negated.</param>
            <returns>ready to use FieldCompareSetPredicate</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression">
            <summary>
            Expression class which define a where expression, as a replacement for a MethodCallExpression representing a call to Queryable.Where and the complete subtree
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression"/> class.
            </summary>
            <param name="setElementType">Type of the set element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression.Handle(SD.LLBLGen.Pro.LinqSupportClasses.ScopeHandlers.ScopeHandlerBase)">
            <summary>
            Handles this instance using the specified handler.
            </summary>
            <param name="handler">The handler to handle this instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.LinqSupportClasses.ExpressionClasses.WhereExpression.FilterLambda">
            <summary>
            Gets or sets the filter lambda, which is the lamdba passed into the where method call
            </summary>
        </member>
    </members>
</doc>
