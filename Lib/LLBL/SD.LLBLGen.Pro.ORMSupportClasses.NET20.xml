<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SD.LLBLGen.Pro.ORMSupportClasses.NET20</name>
    </assembly>
    <members>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase">
            <summary>
            Base class for DAA classes which are generated.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter">
            <summary>
            Interface for Data Access Adapter (DAA) objects. Instances of this interface are used as 'adapters' to work with databases. 
            Adapter specific.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore">
            <summary>
            Core interface for data-access logic which is used by all template groups' core persistence classes (DataAccessAdapterBase, DaoBase)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore.CallActionStoredProcedure(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Calls the specified action stored procedure in the database. If a transaction is in progress, it will participate in that transaction.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to pass</param>
            <returns>the number of rows affected. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataTable)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the specified datatable. Will participate in the transaction if a
            transaction is in progress.</summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="tableToFill">Datatable to fill by the stored procedure</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the
            specified DataSet. Will participate in the transaction if a transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore.GetDbProviderFactoryInstance">
            <summary>
            Gets the DB provider factory instance. 
            </summary>
            <returns>ready to use Db provider factory instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore.GetDbSpecificCreatorInstance">
            <summary>
            Gets the db specific creator instance for the database this object targets.
            </summary>
            <returns>ready to use creator</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.CreatePrimaryKeyFilter(System.Collections.IList)">
            <summary>
            Creates a new predicate expression which filters on the primary key fields and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="primaryKeyFields">ArrayList with IEntityField2 instances which form the primary key for which the filter has to be constructed</param>
            <returns>filled in predicate expression or null if no primary key fields are specified.</returns>
            <remarks>Call this method passing IEntity2.Fields.PrimaryKeyFields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="fieldsToFill">The IEntityFields2 object to store the fetched data in</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects for the fieldsToFill fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 or more rows.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="entityFactory">the factory object which can produce the entities this method has to fill.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="fieldsPersistenceInfo">The persistence information for the fields of the entity created by entityFactory</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results as a datatable using the passed in data-adapter. 
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>DataTable with the rows requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results in thedatatable specified using the passed in data-adapter. 
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="tableToFill">DataTable to fill</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.StartTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Starts a new transaction. All database activity after this call will be ran in this transaction and all objects will participate
            in this transaction until its committed or rolled back. 
            If there is a transaction in progress, an exception is thrown.
            Will create and open a new connection if a transaction is not open and/or available.
            </summary>
            <param name="isolationLevelToUse">The isolation level to use for this transaction</param>
            <param name="name">The name for this transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already in progress.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveTransaction(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself.
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. 
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling SaveTransaction(savePointName)
            </summary>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <param name="savePointName">name of the savepoint to roll back to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OpenConnection">
            <summary>
            Opens the active connection object. If the connection is already open, nothing is done.
            If no connection object is present, a new one is created
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.CloseConnection">
            <summary>
            Closes the active connection. If no connection is available or the connection is closed, nothing is done.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Saves the passed in entity to the persistent storage. Will <i>not</i> refetch the entity after this save.
            The entity will stay out-of-sync. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is new.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is new.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. 
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object). All fields specified in excludedFields are excluded from the fetch so the entity won't
            get any value set for those fields. <b>excludedFields</b> can be null or empty, in which case all fields are fetched (default).
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <returns>The new entity fetched.</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>The new entity fetched.</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to
            OutOfSync.
            Will use the current transaction if a transaction is in progress.
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to
            OutOfSync.
            Will use the current transaction if a transaction is in progress.
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            It will apply paging and it will from there use a prefetch path fetch using the read page. It's important that pageSize
            is smaller than the set ParameterisedPrefetchPathThreshold. It will work, though if pagesize is larger than the limits set for
            the ParameterisedPrefetchPathThreshold value, the query is likely to be slower than expected.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">Prefetch path to use.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            It will apply paging and it will from there use a prefetch path fetch using the read page. It's important that pageSize
            is smaller than the set <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ParameterisedPrefetchPathThreshold"/>. If pagesize is larger than the limits set for
            the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ParameterisedPrefetchPathThreshold"/> value, the query is likely to be slower than expected, though will work.
            If pageNumber / pageSize are set to values which disable paging, a normal prefetch path fetch will be performed. 
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">Prefetch path to use.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
            <remarks>Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for the paging optimization code.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Will not refetch saved entities and will not recursively save the entities.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <param name="refetchSavedEntitiesAfterSave">Refetches a saved entity from the database, so the entity will not be 'out of sync'</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by the entities inside collectionToSave also.</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Deletes all dirty objects inside the collection passed from the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Entities which are physically deleted from the persistent storage are marked with the state 'Deleted' but are not
            removed from the collection.
            If the passed in entity has a concurrency predicate factory object, the returned predicate expression is used to restrict the delete process.		
            </summary>
            <param name="collectionToDelete">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of physically deleted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntitiesDirectly(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Deletes all entities of the name passed in as <i>entityName</i> (e.g. "CustomerEntity") from the persistent storage if they match the filter
            supplied in <i>filterBucket</i>.
            </summary>
            <param name="entityName">The name of the entity to retrieve persistence information. For example "CustomerEntity". This name can be
            retrieved from an existing entity's Name property.</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <returns>the amount of physically deleted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntitiesDirectly(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Deletes all entities of the name passed in as <i>entityName</i> (e.g. "CustomerEntity") from the persistent storage if they match the filter
            supplied in <i>filterBucket</i>.
            </summary>
            <param name="typeOfEntity">The type of the entity to retrieve persistence information. </param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <returns>the amount of physically deleted entities</returns>
            <remarks>Not supported for entities which are in a TargetPerEntity hierarchy.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.UpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Updates all entities of the same type of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. 
            </summary>
            <param name="entityWithNewValues">Entity object which contains the new values for the entities of the same type and which match the filter
            in filterBucket. Only fields which are changed are updated.</param>
            <param name="filterBucket">filter information to filter out the entities to update.</param>
            <returns>the amount of physically updated entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return, does allow duplicates.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Fetches the typed view, using the query specified. 
            </summary>
            <param name="typedViewToFill">The typed view to fill.</param>
            <param name="queryToUse">The query to use.</param>
            <remarks>Used with stored procedure calling IRetrievalQuery instances to fill a typed view mapped onto a resultset. Be sure
            to call Dispose() on the passed in query, as it's not disposed in this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2)">
            <summary>
            Fetches the Typed View passed in from the persistent storage
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting. Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.CommandBehavior)">
            <summary>
            Executes the passed in retrievalquery and returns an open, ready to use IDataReader. The datareader's command behavior is set to the 
            readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction. 
            </summary>
            <param name="queryToExecute">The query to execute.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in retrievalquery and projects the resultset using the value projectors and the projector specified.
            IF a transaction is in progress, the command is wired to the transaction and executed inside the transaction. The projection results
            will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="queryToExecute">The query to execute.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Data.IDataReader)">
            <summary>
            Projects the current resultset of the passed in datareader using the value projectors and the projector specified. The reader will be left open
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="reader">The reader which points to the first row of a resultset</param>
            <remarks>Use this overload together with FetchDataReader if your datareader contains multiple resultsets, so you have fine-grained
            control over how you want to project which resultset in the datareader</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into the entity passed in. 
            </summary>
            <param name="entity">The entity to load the excluded field data into.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into all the entities in the entities collection passed in.
            </summary>
            <param name="entities">The entities to load the excluded field data into. The entities have to be either of the same type or have to be 
            in the same inheritance hierarchy as the entity which factory is set in the collection.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in collection. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.
            This routine batches fetches to have at most 5*ParameterisedPrefetchPathThreshold of parameters per fetch. Keep in mind that most databases have a limit
            on the # of parameters per query. 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ParameterisedPrefetchPathThreshold">
            <summary>
            Gets or sets the parameterised prefetch path threshold. This threshold is used to determine when the prefetch path logic should switch to a 
            subquery or when it should use a WHERE field IN (value1, value2, ... valueN) construct, based on the # of elements in the parent collection.
            If that # of elements exceeds this threshold, a subquery is constructed, otherwise field IN (value1, value2, ...) construct is used.
            The default value is 50. On average, this is faster than using a subquery which returns 50 elements. Use this to tune prefetch path fetch logic
            for your particular needs. 
            <br/><br/>
            This threshold is also used to determine if paging is possible. A page size bigger than this threshold will disable the paging functionality
            when using paging + prefetch paths. 
            </summary>
            <remarks>Testing showed that values larger than 300 will be slower than a subquery.
            <br/><br/>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code. 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.IsTransactionInProgress">
            <summary>
            Gets IsTransactionInProgress. True when there is a transaction in progress.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.TransactionIsolationLevel">
            <summary>
            Gets / sets the isolation level a transaction should use. 
            Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.TransactionName">
            <summary>
            Gets the name of the transaction. Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ConnectionString">
            <summary>
            Gets / sets the connection string to use for the connection with the database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.KeepConnectionOpen">
            <summary>
            Gets / sets KeepConnectionOpen, a flag used to keep open connections after a database action has finished.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.CommandTimeOut">
            <summary>
            Gets / sets the timeout value to use with the command object(s) created by the adapter.
            Default is 30 seconds
            Set this prior to calling a method which executes database logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.InComPlusTransaction">
            <summary>
            Returns true if this DataAccessAdapter is hosted inside an IComPlusAdapterContext implementing object.
            This means that all transactions by this DataAccessAdapter object are routed through COM+ and not controlled by ADO.NET.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.InSystemTransaction">
            <summary>
            Gets a value indicating whether a System.Transactions transaction is going on. If not, false is returned.
            </summary>
            <value><c>true</c> if [in system transaction]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FunctionMappings">
            <summary>
            Gets the function mappings for the DQE related to this object. These function mappings are static and therefore not changeable.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionNotification">
            <summary>
            Interface which defines the core elements of an LLBLGen Pro transaction manager object. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionNotification.NotifyCommit">
            <summary>
            Will notify all transaction participating entities that the transaction they're in, has been committed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionNotification.NotifyRollback">
            <summary>
            Will notify all transaction participating entities that the transaction they're in, has been rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider)">
            <summary>
            CTor
            </summary>
            <param name="persistenceInfoProvider">The persistence info provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider)">
            <summary>
            CTor
            </summary>
            <param name="comPlusContextHost">the COM+ context host for this adapter instance.</param>
            <param name="persistenceInfoProvider">The persistence info provider.</param>
            <remarks>do not call this from your code</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CallActionStoredProcedure(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Calls the specified action stored procedure in the database. If a transaction is in progress, it will participate in that transaction.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to pass</param>
            <returns>the number of rows affected. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataTable)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the specified datatable. Will participate in the transaction if a
            transaction is in progress.</summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="tableToFill">Datatable to fill by the stored procedure</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the
            specified DataSet. Will participate in the transaction if a transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="fieldsToFill">The IEntityFields2 object to store the fetched data in</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects for the fieldsToFill fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 or more rows.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="entityFactory">the factory object which can produce the entities this method has to fill.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="fieldsPersistenceInfo">The persistence information for the fields of the entity created by entityFactory</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results as a datatable using the passed in data-adapter.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>DataTable with the rows requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results in thedatatable specified using the passed in data-adapter. 
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="tableToFill">DataTable to fill</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.WireTransaction(SD.LLBLGen.Pro.ORMSupportClasses.IQuery)">
            <summary>
            Wires an active transaction to the command object of the passed in query. If no transaction is in progress, nothing is wired.
            </summary>
            <param name="queryToWire">Query to wire up with the passed in transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.StartTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Starts a new transaction. All database activity after this call will be ran in this transaction and all objects will participate
            in this transaction until its committed or rolled back. 
            If there is a transaction in progress, an exception is thrown.
            Will create and open a new connection if a transaction is not open and/or available.
            </summary>
            <param name="isolationLevelToUse">The isolation level to use for this transaction</param>
            <param name="name">The name for this transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already in progress.</exception>
            <remarks>If this DataAccessAdapter is in a System.Transactions.Transaction, no real ado.net transaction will be started, as a transaction is already 
            in progress. In that situation, this method will just open the connection if required.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. Will close the connection.
            If in a COM+ transaction: it will flag the context to commit. It will NOT set the done bit.
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. 
            If in a COM+ transaction: it will flag the context to abort. It will NOT set the done bit.
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OpenConnection">
            <summary>
            Opens the active connection object. If the connection is already open, nothing is done.
            If no connection object is present, a new one is created
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CloseConnection">
            <summary>
            Closes the active connection. If no connection is available or the connection is closed, nothing is done.
            If there is a transaction in progress, it's rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Saves the passed in entity to the persistent storage. Will <i>not</i> refetch the entity after this save.
            The entity will stay out-of-sync. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. 
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored if the entity is new. This
            predicate is used instead of a predicate produced by a set ConcurrencyPredicateFactory.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored if the entity is new. This
            predicate is used instead of a predicate produced by a set ConcurrencyPredicateFactory.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PersistQueue(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}},System.Boolean,System.Int32@)">
            <summary>
            Persists the queue passed in. The queue contains ActionQueueElements and is in the right order, just save it from front to back
            </summary>
            <param name="queueToPersist">Queue to persist.</param>
            <param name="insertActions">if true, the actions to perform are insert actions, otherwise update actions</param>
            <param name="totalAmountSaved">The total amount saved.</param>
            <returns>bool if the actions all went ok.</returns>
            <remarks>It assumes a transaction, if needed, is already created and opened, as well as a connection. All exceptions are bubbled upwards</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise try to emit DISTINCT (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise try to emit DISTINCT (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise try to emit DISTINCT (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction.
            </summary>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise try to emit DISTINCT (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchDataReader(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.CommandBehavior)">
            <summary>
            Executes the passed in retrievalquery and returns an open, ready to use IDataReader. The datareader's command behavior is set to the 
            readerBehavior passed in. If a transaction is in progress, the command is wired to the transaction. 
            </summary>
            <param name="queryToExecute">The query to execute.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the dataaccessadapter's connection is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in retrievalquery and projects the resultset using the value projectors and the projector specified.
            IF a transaction is in progress, the command is wired to the transaction and executed inside the transaction. The projection results
            will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="queryToExecute">The query to execute.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Collections.Generic.Dictionary{System.Int32,System.ComponentModel.TypeConverter})">
            <summary>
            Executes the passed in retrievalquery and projects the resultset using the value projectors and the projector specified.
            IF a transaction is in progress, the command is wired to the transaction and executed inside the transaction. The projection results
            will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="queryToExecute">The query to execute.</param>
            <param name="typeConvertersToRun">The type converters to use for the query. The key is the index in the result row, the value is the type converter
            to run on that value. These type converters have to run prior to the projectors will run.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Data.IDataReader)">
            <summary>
            Projects the current resultset of the passed in datareader using the value projectors and the projector specified. The reader will be left open
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="reader">The reader which points to the first row of a resultset</param>
            <remarks>Use this overload together with FetchDataReader if your datareader contains multiple resultsets, so you have fine-grained
            control over how you want to project which resultset in the datareader</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object). 
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <returns>The new entity fetched.</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>The new entity fetched.</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity``1(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            specified generic type. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <typeparam name="TEntity">The type of entity to fetch</typeparam>
            <remarks>TEntity can't be a type which is an abstract entity. If you want to fetch an instance of an abstract entity (e.g. polymorphic fetch)
            please use the overload which accepts an entity factory instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to OutOfSync.
            Will use the current transaction if a transaction is in progress.
            If the passed in entity has a concurrency predicate factory object, the returned predicate expression is used to restrict the delete process.		
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to
            OutOfSync.
            Will use the current transaction if a transaction is in progress.
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException">Will throw an ORMConcurrencyException if the delete fails.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            It will apply paging and it will from there use a prefetch path fetch using the read page. It's important that pageSize
            is smaller than the set <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold"/>. If pagesize is larger than the limits set for
            the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold"/> value, the query is likely to be slower than expected, though will work.
            If pageNumber / pageSize are set to values which disable paging, a normal prefetch path fetch will be performed. 
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">Prefetch path to use.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            It will apply paging and it will from there use a prefetch path fetch using the read page. It's important that pageSize
            is smaller than the set <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold"/>. If pagesize is larger than the limits set for
            the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold"/> value, the query is likely to be slower than expected, though will work.
            If pageNumber / pageSize are set to values which disable paging, a normal prefetch path fetch will be performed. 
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">Prefetch path to use.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
            <remarks>Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for the paging optimization code.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Will not refetch saved entities and will not recursively save the entities.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <param name="refetchSavedEntitiesAfterSave">Refetches a saved entity from the database, so the entity will not be 'out of sync'</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by the entities inside collectionToSave also.</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Deletes all dirty objects inside the collection passed from the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Entities which are physically deleted from the persistent storage are marked with the state 'Deleted' but are not
            removed from the collection.
            </summary>
            <param name="collectionToDelete">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of physically deleted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntitiesDirectly(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Deletes all entities of the name passed in as <i>entityName</i> (e.g. "CustomerEntity") from the persistent storage if they match the filter
            supplied in <i>filterBucket</i>.
            </summary>
            <param name="entityName">The name of the entity to retrieve persistence information. For example "CustomerEntity". This name can be
            retrieved from an existing entity's LLBLGenProEntityName property.</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <returns>the amount of physically deleted entities</returns>
            <remarks>Not supported for entities which are in a TargetPerEntity hierarchy.
            <br/>
            This overload doesn't support Authorization or Auditing. It's recommended, if you want to use authorization and/or auditing on this method, 
            use the overload of DeleteEntitiesDirectly which accepts a type.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntitiesDirectly(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Deletes all entities of the name passed in as <i>entityName</i> (e.g. "CustomerEntity") from the persistent storage if they match the filter
            supplied in <i>filterBucket</i>.
            </summary>
            <param name="typeOfEntity">The type of the entity to retrieve persistence information. </param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <returns>the amount of physically deleted entities</returns>
            <remarks>Not supported for entities which are in a TargetPerEntity hierarchy.
            <br/>
            This overload performs authorization. Use this overload instead of the one which accepts a name instead of a type instance if you want to 
            have authorization support at runtime.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.UpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated. 
            </summary>
            <param name="entityWithNewValues">Entity object which contains the new values for the entities of the same type and which match the filter
            in filterBucket. Only fields which are changed are updated.</param>
            <param name="filterBucket">filter information to filter out the entities to update.</param>
            <returns>the number of physically updated entities. Use this number only to test if the update succeeded (so value is &gt; 0).</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into the entity passed in. 
            </summary>
            <param name="entity">The entity to load the excluded field data into.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into all the entities in the entities collection passed in.
            </summary>
            <param name="entities">The entities to load the excluded field data into. The entities have to be either of the same type or have to be
            in the same inheritance hierarchy as the entity which factory is set in the collection.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in collection. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.
            This routine batches fetches to have at most 5*ParameterizedThreshold of parameters per fetch. Keep in mind that most databases have a limit
            on the # of parameters per query.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return, does allow duplicates.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Fetches the typed view, using the query specified. 
            </summary>
            <param name="typedViewToFill">The typed view to fill.</param>
            <param name="queryToUse">The query to use.</param>
            <remarks>Used with stored procedure calling IRetrievalQuery instances to fill a typed view mapped onto a resultset. Be sure
            to call Dispose() on the passed in query, as it's not disposed in this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2)">
            <summary>
            Fetches the Typed View passed in from the persistent storage
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting. Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <remarks>To fill a DataTable with entity rows, you could use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveTransaction(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is already a savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling SaveTransaction(savePointName)
            </summary>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is no savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <param name="savePointName">name of the savepoint to roll back to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreatePrimaryKeyFilter(System.Collections.IList)">
            <summary>
            Creates a new predicate expression which filters on the primary key fields and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="primaryKeyFields">ArrayList with IEntityField2 instances which form the primary key for which the filter has to be constructed</param>
            <returns>filled in predicate expression or null if no primary key fields are specified.</returns>
            <remarks>Call this method passing IEntity2.Fields.PrimaryKeyFields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreatePrimaryKeyFilters(System.Collections.IList)">
            <summary>
            Creates for each entity which PK field(s) are in the passed in arraylist a new predicate expression which filters on the 
            primary key fields of that entity and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="primaryKeyFields">ArrayList with IEntityField2 instances which form the primary key for which the filter has to be constructed</param>
            <returns>ArrayList with for each entity a filled in predicate expression or null if no primary key fields are specified. PK filters
            are stored in the same order as entities appear in the pkfields, which is the same order in which entities are located in the hierarchy
            (from root to leaf)</returns>
            <remarks>Call this method passing IEntity2.Fields.PrimaryKeyFields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateStoredProcedureCallCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Creates the stored procedure call command for the stored proc specified.
            </summary>
            <param name="storedProcedureToCall">The stored procedure to call.</param>
            <param name="parameters">array of parameters to pass</param>
            <returns>ready to use DbCommand</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateCorrectStoredProcedureName(System.String)">
            <summary>
            Creates the correct stored procedure name, i.e. with catalog / schema name replaced properly.
            </summary>
            <param name="storedProcedureToCall">The stored procedure to call.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateConnection">
            <summary>
            Creates a new connection object using the current connection string value
            </summary>
            <remarks>Will close and dispose an active connection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetActiveConnection">
            <summary>
            Returns the active connection object. If no connection object is present, a new one will be created.
            </summary>
            <returns>The active connection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Retrieves the persistence info for the field passed in. 
            </summary>
            <param name="field">Field which fieldpersistence info has to be retrieved</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Retrieves the persistence info objects for the fields of the entity passed in.
            </summary>
            <param name="entity">Entity object which fields the persistence information should be retrieved for</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(System.String)">
            <summary>
            Retrieves the persistence info objects for the fields of the entity passed in.
            </summary>
            <param name="entityName">Entity name for entity type which fields the persistence information should be retrieved for</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbProviderFactoryInstance">
            <summary>
            Gets the DB provider factory instance. 
            </summary>
            <returns>ready to use Db provider factory instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbSpecificCreatorInstance">
            <summary>
            Gets the db specific creator instance for the database this object targets.
            </summary>
            <returns>ready to use creator</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PerformExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.CommandBehavior)">
            <summary>
            Performs the execute single row retrieval query action. This method simply calls Execute on the queryToExecute passed in. 
            </summary>
            <param name="queryToExecute">The query to execute.</param>
            <param name="behavior">The commandbehavior to pass to Execute.</param>
            <returns>live datareader created by the execute method</returns>
            <remarks>Use this method to pass a different command behavior to queryToExecute.Execute(), which is necessary for ASE sybase for example, as the 
            Sybase ASE provider has a critical bug in some versions where SingleRow doesn't work but SingleResult will</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateNewPhysicalConnection(System.String)">
            <summary>
            Creates a new physical connection object.
            </summary>
            <param name="connectionString">Connectionstring to use for the new connection object</param>
            <returns>DbConnection implementing connection object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateNewPhysicalTransaction">
            <summary>
            Creates a new physical transaction object over the created connection. The connection is assumed to be open.
            </summary>
            <returns>a physical transaction object, like an instance of SqlTransaction.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateNewPhysicalDataAdapter">
            <summary>
            Creates a new .NET DataAdapter for the database system this DataAccessAdapter object is targeting. 
            </summary>
            <returns>New .NET DataAdapter object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDynamicQueryEngine">
            <summary>
            Creates a new Dynamic Query engine object
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PostProcessNewDynamicQueryEngine(SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase)">
            <summary>
            Post-processes a new dynamic query engine object, which is passed in. 
            </summary>
            <param name="toProcess">To process.</param>
            <returns>the dqe passed in, post-processed and ready to be used.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnInsertPersistenceObjects(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Method which is called from the default clause of the InsertPersistenceInfoObjects(predicateexpression) routine, which is useful for people who
            implement their own Predicate objects.
            </summary>
            <param name="currentPredicate">The current predicate object to fill the persistence info of.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnGetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Called right before the actual scalar query is executed
            </summary>
            <param name="scalarQuery">RetrievalQuery object which will be executed</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual Save action is executed.
            </summary>
            <param name="saveQuery">the ActionQuery object which will be executed</param>
            <param name="entityToSave">the entity which will be saved by saveQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right after the actual Save action was executed.
            </summary>
            <param name="saveQuery">the ActionQuery object which will be executed</param>
            <param name="entityToSave">the entity which is saved by saveQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of the SaveEntityCollection() method
            </summary>
            <param name="entityCollectionToSave">the entity collection to save</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of the SaveEntityCollection() method
            </summary>
            <param name="entityCollectionToSave">the entity collection which was saved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual delete action is executed
            </summary>
            <param name="deleteQuery">the ActionQuery object which will be executed</param>
            <param name="entityToDelete">the entity which will be deleted by deleteQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual delete action is executed
            </summary>
            <param name="deleteQuery">the ActionQuery object which will be executed</param>
            <param name="entityToDelete">the entity which was deleted by deleteQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of the DeleteEntityCollection method
            </summary>
            <param name="entityCollectionToDelete">the entity collection to delete</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of the DeleteEntityCollection method
            </summary>
            <param name="entityCollectionToDelete">the entity collection which was delete</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual delete query is executed
            </summary>
            <param name="deleteQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntitiesDirectlyComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual delete query is executed
            </summary>
            <param name="deleteQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Called right before the actual fetch is executed.
            </summary>
            <param name="selectQuery">the RetrievalQuery which will be executed</param>
            <param name="fieldsToFetch">the IEntityFields2 object which will be filled by selectQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Called right after the actual fetch is executed.
            </summary>
            <param name="selectQuery">the RetrievalQuery which was executed</param>
            <param name="fieldsToFetch">the IEntityFields2 object which was filled by selectQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery which will be executed</param>
            <param name="entityCollectionToFetch">the entity collection to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery which was executed</param>
            <param name="entityCollectionToFetch">the entity collection which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object to execute</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedListComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object which was executed</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object to execute</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedViewComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object which was executed</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnUpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual update query is executed
            </summary>
            <param name="updateQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnUpdateEntitiesDirectlyComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right after the actual update query is executed
            </summary>
            <param name="updateQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnBeforeEntitySave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Called from PersistQueue, the internal queue processing routine, before the entity is validated and before the entity 
            is used to create a query and actually saved. The entity passed in as entitySaved is already added to the transaction.
            </summary>
            <param name="entitySaved">Entity to be saved.</param>
            <param name="insertAction">if true, the entity is in the insertqueue, otherwise the update queue.</param>
            <remarks>If not overriden calls the entity's OnBeforeEntitySave method. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnBeforeTransactionCommit">
            <summary>
            Called right before the Commit() method starts its logic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnAfterTransactionCommit">
            <summary>
            Called right after the Commit() method has performed its logic and the commit was succesful.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnBeforeTransactionRollback">
            <summary>
            Called right before the Rollback() method starts its logic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnAfterTransactionRollback">
            <summary>
            Called right after the Rollback() method has performed its logic and the rollback was succesful.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Inserts the persistence info objects on all objects referenced by the passed in field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Inserts in each predicate expression element the persistence info object for the field used. If there is already a fieldpersistenceinfo 
            element for a given field, it is skipped. 
            </summary>
            <param name="expression">IPredicateExpression object which has predicate elements whose persistence info objects have to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Inserts in each entityrelation object the persistence info objects for the fields referenced.
            </summary>
            <param name="relations">IRelationCollection object which has entityrelation objects whose fields' persistence info objects have to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition)">
            <summary>
            Inserts the persistence info objects into the objects of the passed in derived table.
            </summary>
            <param name="derivedTable">The derived table.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Inserts in each SortClause object the persistence info object for the field referenced.
            </summary>
            <param name="sortClauses">ISortExpression object which has SortClause objects whose fields persistence info object has to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall)">
            <summary>
            Inserts the persistence info objects into the function call object passed in, for every field object present as parameter in the function call.
            </summary>
            <param name="functionCall">The function call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression)">
            <summary>
            Inserts the persistence info objects into the scalar query expression object passed in.
            </summary>
            <param name="scalarQuery">The scalar query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inserts for each entityfield in the collection the persistence info object 
            </summary>
            <param name="groupByClause">IGroupByCollection object which has IEntityField(2) objects whose persistence info object has to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Inserts for each entityfield in the expression the persistence info object 
            </summary>
            <param name="expression">IExpression object which has IEntityField(2) objects whose persistence info object has to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Creates a new insert DQ for the entity passed in.
            </summary>
            <param name="entityToSave">the entity to create the Insert query for</param>
            <param name="persistenceInfoObjects">persistence objects for the entity</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Creates a new Update DQ for the entity passed in.
            </summary>
            <param name="entityToSave">the entity to create the Update query for</param>
            <param name="persistenceInfoObjects">persistence objects for the entity</param>
            <param name="pkFilters">List, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate},SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update DQ for the entity passed in.
            </summary>
            <param name="entityWithNewValues">the entity to with new values to use for the SET clauses</param>
            <param name="persistenceInfoObjects">persistence objects for the fields in entityWithNewValues</param>
            <param name="pkFilters">List, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalFilter">The additional filter to use in the update query, used for concurrency purposes</param>
            <param name="relationsToWalk">Relations to walk to fulfill the filter</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select DQ for the fields passed in using the parameters specified.
            </summary>
            <param name="fieldsToFetch">fields to fetch using the select</param>
            <param name="persistenceInfoObjects">persistence info objects for the fields</param>
            <param name="filter">filter to use for the where clause</param>
            <param name="maxNumberOfItemsToReturn">max. amount of rows to return</param>
            <param name="sortClauses">sort clause specifications to use</param>
            <param name="relationsToWalk">relations to walk to build the FROM clause</param>
            <param name="allowDuplicates">flag to specify if duplicates should be returned</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <param name="pageNumber">The page number to retrieve</param>
            <param name="pageSize">the page size to retrieve</param>
            <returns>ready to use query to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateRowCountDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new RowCount DQ for the query build with the elements passed in
            </summary>
            <param name="fieldsToFetch">fields to fetch using the select</param>
            <param name="persistenceInfoObjects">persistence info objects for the fields</param>
            <param name="filter">filter to use for the where clause</param>
            <param name="relationsToWalk">relations to walk to build the FROM clause</param>
            <param name="allowDuplicates">flag to specify if duplicates should be returned</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>ready to use query to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="pkFilters">List, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalDeleteFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Retrieves the persistence info for the fields passed in. 
            </summary>
            <param name="fields">Fields for which the persistence info has to be determined</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollectionInternal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket@,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance. This instance is assumed to be a clone, if not null so it can be altered.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
            <remarks>Internal version. This version alters filterBucket if the entity to fetch is in a hierarchy: it adds hierarchy relations to
            the filter passed. Calling methods should first clone the filter passed in before calling this method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateQueryFromElements(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[]@,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery@)">
            <summary>
            Creates a retrieval query from elements.
            </summary>
            <param name="fieldCollectionToFetch">The field collection to fetch.</param>
            <param name="filterBucket">The filter bucket.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="persistenceInfo">The persistence info.</param>
            <param name="selectQuery">The select query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PreprocessQueryElements(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[]@,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@)">
            <summary>
            Preprocesses the query elements which are to be used for constructing a query. 
            </summary>
            <param name="filterBucket">The filter bucket.</param>
            <param name="fieldCollectionToFetch">The field collection to fetch.</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="persistenceInfo">The persistence info to pass for the persistence info of the fields</param>
            <param name="expressionToPass">The expression to pass for the filter of the query.</param>
            <returns>the relationpredicatebucket to use, which contains the relations to use for the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntityInternal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket@,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
            <remarks>Internal version. This version alters filterBucket if the entity to fetch is in a hierarchy: it adds hierarchy relations to
            the filter passed. Calling methods should first clone the filter passed in before calling this method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.AddTransactionParticipant(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the passed in entity as a participant of this transaction. 
            </summary>
            <param name="participant">The participant which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InterpretFilterBucket(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean@,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@)">
            <summary>
            Interprets the passed in filterbucket and returns information determined after interpreting the data inside the IRelationPredicateBucket object.
            The Relations and predicate expression are initialized with field persistence info objects
            </summary>
            <param name="filterBucket">The IRelationPredicateBucket object with the filter information to interepret</param>
            <param name="relationsPresent">Ref parameter which will be true if there are relation objects specified inside filterBucket</param>
            <param name="expressionToPass">Ref parameter which will be the predicate expression to pass to query construction code</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingFilter(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using the filter specified.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <param name="filter">The filter to use.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>
            true if the Fetch was succesful, false otherwise
            </returns>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingFilter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches an entity from the persistent storage using the filter specified.
            </summary>
            <param name="fieldsToFetch">The EntityFields2 object to store the entity data in</param>
            <param name="persistenceInfos">the field persistence infos for the fields passed in..</param>
            <param name="filter">The filter to use to retrieve one entity. If the filter matches more than 1 entity, the first entity read will be used.</param>
            <returns>true if fetch succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.RemoveElementsFromTransaction(SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove)">
            <summary>
            Removes all participating elements from this transaction and sends them a commit or rollback signal, based on the passed in boolean Commit.
            This action will make the participating objects to take care of their own connections again.
            </summary>
            <param name="action">Action to perform on each removed element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Reset">
            <summary>
            Resets the transaction object. All participants will be notified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchOneRow(System.Data.IDataReader,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Fetches one row from the open data-reader and places that row into the passed in object rowDestination. rowDestination
            should match the format of the rows read by DataSource. Will only read the current row.
            </summary>
            <param name="dataSource">The open datareader used to fetch the data</param>
            <param name="rowDestination">The IEntityFields2 implementing object where the data should be stored.</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects for the rowDestination fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ReadRowIntoFields(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}},SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Fetches the values passed in into the rowDestination. 
            </summary>
            <param name="values">the values to read into rowDestination</param>
            <param name="rowDestination">The IEntityFields2 implementing object where the data should be stored.</param>
            <param name="fieldIndexToOrdinal">list with pairs with per fieldIndex the ordinal position in values.</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects used for the fields to produce the query. They're in the same order
            as the values in 'values', and values[0] belongs to fieldsPersistenceInfo[0]. Used for type converters.</param>
            <remarks>Override this routine if you want to perform string / value caching.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="rootEntities">EntityCollection object containing one or more root objects which will contain the entities to fetch (and their paths)
            defined in the prefetch path.</param>
            <param name="filterBucket">filter information used to retrieve the root entities.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return limit used to retrieve the root entities.</param>
            <param name="sortClauses">SortClause expression which was applied to the query executed to retrieve the root entities</param>
            <param name="prefetchPath">the PrefetchPath which defines the graph of objects to fetch.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,System.Boolean)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="rootEntities">EntityCollection object containing one or more root objects which will contain the entities to fetch (and their paths)
            defined in the prefetch path.</param>
            <param name="filterBucket">filter information used to retrieve the root entities.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return limit used to retrieve the root entities.</param>
            <param name="sortClauses">SortClause expression which was applied to the query executed to retrieve the root entities</param>
            <param name="prefetchPath">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="forceParameterizedPPath">if set to true, it always will use a parameterized prefetch path, no matter what. Used for paging
            scenario's</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.MergeManyToMany(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Merges the entities fetched in currentElement.RetrievalCollection with the rootEntities for a many to many relation
            </summary>
            <param name="currentElement">Current element.</param>
            <param name="elementFilter">Element filter.</param>
            <param name="maxNumberOfItemsToReturn">Max number of items to return.</param>
            <param name="rootEntities">Root entities.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.HandleValueReadErrors(System.Data.IDataReader,System.Object[],System.Exception)">
            <summary>
            Routine which is meant to handle value read errors when GetValues is called on the passed in reader. This routine is only called when the
            GetValues() method on the passed in reader throws an exception. Implementors of this routine thus have to call different methods to retrieve
            the values for the current row. The data has to be read into the toFill array.
            </summary>
            <param name="openReader">The open datareader, positioned at the current active row</param>
            <param name="toFill">array to fill with the current row's values</param>
            <param name="ex">The exception thrown by GetValues(toFill)</param>
            <returns>
            true if the values are succesfully read, false otherwise. By default this routine returns false. If false is returned, 
            ex is bubbled upwards by the caller. 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ReadHandleSchemaNameSettingFromConfig(SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable)">
            <summary>
            Reads the value of the setting with the key SchemaNameUsageSetting from the *.config file and stores that value as the
            active setting for schemaNameUsageSetting for this instance, IF specified. If specified, a key with the name SchemaNameToUse is
            expected as well.
            </summary>
            <param name="schemaNameOverwrites">Schema name overwrites to fill.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ReadHandleCatalogNameSettingFromConfig(SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable)">
            <summary>
            Reads the value of the setting with the key CatalogNameUsageSetting from the *.config file and stores that value as the
            active setting for catalogNameUsageSetting for this instance, IF specified. If specified, a key with the name CatalogNameToUse is
            expected as well.
            </summary>
            <param name="catalogNameOverwrites">The catalog name overwrites.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InitClassPhase2(System.String,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage,SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable,SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable)">
            <summary>
            Performs the second phase of the initialization. Done from derived classes.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="keepConnectionOpen">if set to <see langword="true"/> [keep connection open].</param>
            <param name="catalogNameUsageSetting">The catalog name usage setting.</param>
            <param name="schemaNameUsageSetting">The schema name usage setting.</param>
            <param name="catalogNameToUse">The catalog name to use.</param>
            <param name="schemaNameToUse">The schema name to use.</param>
            <param name="catalogNameOverwrites">The catalog name overwrites.</param>
            <param name="schemaNameOverwrites">The schema name overwrites.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.QueueAuditorForCommitFlush(SD.LLBLGen.Pro.ORMSupportClasses.IAuditor)">
            <summary>
            Queues the auditor for audit entity flush at commit time. If no transaction is going on, it will flush the entities now
            in a separate transaction
            </summary>
            <param name="auditor">The auditor.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.NotifyAuditorsForCommit">
            <summary>
            Notifies the auditors that the transaction was committed. This means they should clean up any audit entities they contain.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GatherAndFlushAuditData">
            <summary>
            Gathers the audit entities to save and then saves them in 1 go.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DisposePostponedDisposeCandidates">
            <summary>
            Disposes the postponed dispose candidates. Postponed dispose candidates are queries which couldn't be disposed when it was required and are disposed
            later on: when the connection is closed or when this adapter is disposed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateActiveConnectionInQueryIfRequired(SD.LLBLGen.Pro.ORMSupportClasses.IQuery,System.Boolean)">
            <summary>
            Creates the active connection and sets it in the query passed in if required.
            </summary>
            <param name="queryToExecute">The query to execute.</param>
            <param name="forceConnectionSet">if set to true it will set the connection regardless if it is set</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CloseConnectionIfPossible">
            <summary>
            Closes the connection if possible (i.e. when keepConnectionOpen is false and isTransactionInProgress is false
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PrepareQueryExecution(SD.LLBLGen.Pro.ORMSupportClasses.IQuery,System.Boolean)">
            <summary>
            Prepares the query for execution.
            </summary>
            <param name="queryToExecute">The query to execute.</param>
            <param name="forceConnectionSet">if set to true it will set the connection regardless if it is set</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PrepareRestrictionFilterRelations(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate}@,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@)">
            <summary>
            Prepares the restriction filter relations.
            </summary>
            <param name="entity">The entity.</param>
            <param name="restriction">The restriction.</param>
            <param name="typeOfHierarchy">The type of hierarchy.</param>
            <param name="pkFilters">The pk filters.</param>
            <param name="relations">The relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateEntityInstanceFromReaderRow(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}}},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2@)">
            <summary>
            Creates an entity instance from the reader row passed in as valuesOfRow
            </summary>
            <param name="entityFactory">The entity factory.</param>
            <param name="fieldsPersistenceInfo">The fields persistence info.</param>
            <param name="numberOfFieldsInQuery">The number of fields in query.</param>
            <param name="typeOfHierarchy">The type of hierarchy.</param>
            <param name="hierarchyFieldAliasesToOrdinals">The hierarchy field aliases to ordinals.</param>
            <param name="fieldIndexToOrdinal">The field index to ordinal.</param>
            <param name="entityFieldStartIndexesPerEntity">The entity field start indexes per entity.</param>
            <param name="hasExcludedFields">if set to <c>true</c> [has excluded fields].</param>
            <param name="persistenceInfosForRowReader">The persistence infos for row reader.</param>
            <param name="valuesOfRow">The values of row.</param>
            <param name="entityFactoryToUse">The entity factory to use.</param>
            <returns>
            the newly created entity instance with the values set into its fields
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.AddQueueElementsToTransaction(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}})">
            <summary>
            Adds the queue elements to transaction.
            </summary>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateQueryForEntityToSave(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Creates the query for entity to save.
            </summary>
            <param name="insertActions">if set to <c>true</c> [insert actions].</param>
            <param name="entityToSave">The entity to save.</param>
            <param name="updateRestriction">The update restriction.</param>
            <param name="typeOfHierarchy">The type of hierarchy.</param>
            <param name="persistenceInfoObjects">The persistence info objects.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchAdditionalPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches the additional prefetch path for the entity fetched.
            </summary>
            <param name="prefetchPath">The prefetch path.</param>
            <param name="contextToUse">The context to use.</param>
            <param name="fetchedEntity">The fetched entity.</param>
            <param name="filterToUse">The filter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType)">
            <summary>
            Gets the field persistence infos for the entity passed in.
            </summary>
            <param name="entityWithNewValues">The entity with new values.</param>
            <param name="typeOfHierarchy">The type of hierarchy.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchExcludedFieldsBatches(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Fetches the excluded fields batches.
            </summary>
            <param name="entities">The entities.</param>
            <param name="dummy">The dummy.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="numberOfPkFields">The number of pk fields.</param>
            <param name="numberOfBatches">The number of batches.</param>
            <param name="filter">The filter.</param>
            <param name="excludedFieldsToUse">The excluded fields to use.</param>
            <param name="resultFields">The result fields.</param>
            <param name="persistenceInfos">The persistence infos.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider)">
            <summary>
            Inits the class.
            </summary>
            <param name="comPlusContextHost">Com plus context host.</param>
            <param name="persistenceInfoProvider">The persistence info provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionNotification#NotifyCommit">
            <summary>
            Will notify all transaction participating entities that the transaction they're in, has been committed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionNotification#NotifyRollback">
            <summary>
            Will notify all transaction participating entities that the transaction they're in, has been rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Dispose">
            <summary>
            Implements the IDispose' method Dispose.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality. If a transaction is in progress, it will rollback that transaction.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold">
            <summary>
            Gets or sets the parameterised prefetch path threshold. This threshold is used to determine when the prefetch path logic should switch to a 
            subquery or when it should use a WHERE field IN (value1, value2, ... valueN) construct, based on the # of elements in the parent collection.
            If that # of elements exceeds this threshold, a subquery is constructed, otherwise field IN (value1, value2, ...) construct is used.
            The default value is 50. On average, this is faster than using a subquery which returns 50 elements. Use this to tune prefetch path fetch logic
            for your particular needs. 
            <br/><br/>
            This threshold is also used to determine if paging is possible. A page size bigger than this threshold will disable the paging functionality
            when using paging + prefetch paths. 
            </summary>
            <remarks>Testing showed that values larger than 300 will be slower than a subquery.
            <br/><br/>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code. 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.IsTransactionInProgress">
            <summary>
            Gets IsTransactionInProgress. True when there is a transaction in progress.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.TransactionIsolationLevel">
            <summary>
            Gets / sets the isolation level a transaction should use. 
            Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.TransactionName">
            <summary>
            Gets the name of the transaction. Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ConnectionString">
            <summary>
            Gets / sets the connection string to use for the connection with the database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.KeepConnectionOpen">
            <summary>
            Gets / sets KeepConnectionOpen, a flag used to keep open connections after a database action has finished.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PhysicalTransaction">
            <summary>
            The physical transaction object used over the current ActiveConnection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CommandTimeOut">
            <summary>
            Gets / sets the timeout value to use with the command object(s) created by the adapter.
            Default is 30 seconds
            Set this prior to calling a method which executes database logic.
            </summary>
            <remarks>Setting it to 0 won't have any effect: the commandtimeout is then not set. Set it to a value larger than 0.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InComPlusTransaction">
            <summary>
            Returns true if this DataAccessAdapter is hosted inside an IComPlusAdapterContext implementing object.
            This means that all transactions by this DataAccessAdapter object are routed through COM+ and not controlled by ADO.NET.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InSystemTransaction">
            <summary>
            Gets a value indicating whether a System.Transactions transaction is going on. If not, false is returned.
            </summary>
            <value><c>true</c> if [in system transaction]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FunctionMappings">
            <summary>
            Gets the function mappings for the DQE related to this DataAccessAdapter. These function mappings are static and therefore not changeable.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.StringCacheForFetcher">
            <summary>
            Gets or sets the string cache for the fetcher. This string cache is used to keep just 1 instance of a given string value in memory. Strings are 
            unmutable objects, and during a fetch multiple instances of the same string value can be read. Using this string cache, only one instance is kept
            which saves a lot of memory during fetches with a lot of duplicate strings.
            </summary>
            <remarks>Setting this property will make the fetch logic use the stringcache you passed in. Keeping the cache around in-between adapter instances
            can be efficient if you re-fetch the same sets over and over again. This form of value uniquing is preferred over making strings 'interned' as
            interned strings have the disadvantage that they stay around for the lifetime of the application. Strings uniqued with this list are kept
            alive as long as their container and as long as the string cache is kept alive. String uniquing with the UniqueList is very fast, so fetches
            aren't really affected in performance. </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CatalogNameUsageSetting">
            <summary>
             Configurates this data access adapter object how to threat catalog names in persistence information.
            </summary>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CatalogNameToUse">
            <summary>
             The name to use if catalogNameUsageSetting is set to ForceName. Ignored otherwise.
            </summary>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CatalogNameOverwrites">
            <summary>
             The from-to name value pairs and setting for the overwriting of catalog names.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SchemaNameOverwrites">
            <summary>
             The from-to name value pairs and setting for the overwriting of schema names.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove">
            <summary>
            Enum which is used to signal the element removal routine what to do while removing hte elements.
            This is a performance issue, now the loop has to be run just once
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove.SendCommit">
            <summary>
            Call ITransactionalElement.TransactionCommit()
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove.SendRollback">
            <summary>
            Call ITransactionalElement.TransactionRollback()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionNonGeneric">
            <summary>
            EntityCollection implementation which is used for backwards compatibility and for design time databinding. This EntityCollectionNonGeneric
            is an EntityCollectionBase2(Of EntityBase2)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1">
            <summary>
            Implementation of the entity collection base class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1">
            <summary>
            Generic base class for the entity collection classes used by Selfservicing and adapter. This class is mainly written to 
            be able to tap into Add/Remove/Insert etc. without problems: the shipped collection classes in .NET don't have the ability to
            override Add etc. 
            </summary>
            <typeparam name="T">The type this collection is of (the type of the contained objects.) </typeparam>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore">
            <summary>
            Interface used as the base for all entity collections. (adapter and selfservicing).
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.Sort(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting like IBindingList.ApplySort, on the field with the index fieldIndex and with the direction specified.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.Sort(System.String,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="propertyName">property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.FindMatches(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets all indices of all the entities in the current order of this collection which match the passed in filter. 
            </summary>
            <param name="filter">The filter the entity has to match with. If null, all entities match and every index is returned</param>
            <returns>List of indices of all entities matching the filter</returns>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.EntityRemoving">
            <summary>
            Event which is raised at the start of the Remove or RemoveAt(index) routine. To cancel the remove action, set cancel to true.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.EntityRemoved">
            <summary>
            Event which is raised at the End of the Remove or RemoveAt(index) routine.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.EntityAdding">
            <summary>
            Event which is raised at the start of the Add or Insert(index) routine. To cancel the addition action, set cancel to true.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.EntityAdded">
            <summary>
            Event which is raised at the End of the Add or Insert(index) routine.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.ListChanged">
            <summary>
            Event which is raised when the collection changed: an item changed, an item was removed, added, or the collection was cleared. 
            If possible, use one of the Entity* events of this collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.AllowNew">
            <summary>
            Default: true. If set to false, no new entities will be added through databinding. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.AllowRemove">
            <summary>
            Default: false. If set to true, entities can be removed through databinding.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.AllowEdit">
            <summary>
            Default: true. If set to false, entities inside this collection won't be editable in a complex databinding scenario.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.IsReadOnly">
            <summary>
            Get / set the readonly flag for this collection. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.Item(System.Int32)">
            <summary>
            Simple indexer. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore.Count">
            <summary>
            The amount of IEntity2 elements in this entity collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCoreInternal">
            <summary>
            Internal interface for entity collections.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCoreInternal.PrepareForFetchOperation">
            <summary>
            Prepares the collection for fetch operation.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCoreInternal.CompleteFetchOperation">
            <summary>
            Completes the fetch operation.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCoreInternal.PerformRelatedEntityRemoval(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Boolean)">
            <summary>
            Performs the related entity removal.
            </summary>
            <param name="toRemove">To remove.</param>
            <param name="signalRelatedEntityManyToOne">if set to <c>true</c> [signal related entity many to one].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCoreInternal.GetCachedPkHashes">
            <summary>
            Gets the cached pk hashes, if available, otherwise null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCoreInternal.SetCachedPkHashes(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}})">
            <summary>
            Sets the cached pk hashes to the passed dictionary
            </summary>
            <param name="pkHashes">The pk hashes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.#ctor">
            <summary>
            empty ctor.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization CTor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">item is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the range of objects passed in. 
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type TEntity cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. 
            This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Sort(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting like IBindingList.ApplySort, on the field with the index fieldIndex and with the direction specified.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Sort(System.String,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="propertyName">property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.FindMatches(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets all indices of all the entities in the current order of this collection which match the passed in filter. 
            </summary>
            <param name="filter">The filter the entity has to match with. If null, all entities match and every index is returned</param>
            <returns>List of indices of all entities matching the filter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">value is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="isDisposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.InitCoreClass(System.Int32)">
            <summary>
            Inits the core class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Called when [list changed].
            </summary>
            <param name="index">The index.</param>
            <param name="typeOfChange">The type of change.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnEntityRemoving(`0)">
            <summary>
            Called at the start of a remove routine which removes an entity from this collection. Will raise EntityRemoving event. 
            </summary>
            <param name="entityToRemove">The entity to remove.</param>
            <returns>true if the remove action can continue (e.g. the event wasn't canceled) otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnEntityRemoved(`0)">
            <summary>
            Called at the end of a remove routine which removes an entity from this collection. Will raise EntityRemoved event. 
            </summary>
            <param name="entityToRemove">The entity to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnEntityAdding(`0)">
            <summary>
            Called at the start of the Add or Insert routine which adds an entity to this collection. Will raise EntityAdding event.
            </summary>
            <param name="entityToAdd">The entity to add.</param>
            <returns>
            true if the add action can continue (e.g. the event wasn't canceled) otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnEntityAdded(`0)">
            <summary>
            Called at the end of the Add or Insert routine which adds an entity to this collection. Will raise EntityAdded event.
            </summary>
            <param name="entityToAdd">The entity to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnEntityInListOnEntityContentsChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the EntityContentsChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called at the end of GetObjectData. Method is used when this object is serialized. Override this method to 
            tap into the serialization sequence. (binary/soap formatter specific).
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.OnDeserialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called at the end of the deserialization constructor. Method is used when this object is deserialized. Override this method to 
            tap into the deserialization sequence. (binary/soap formatter specific).
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SilentRemove(`0)">
            <summary>
            Removes the passed in entity from the collection without notifying the entity to remove that it has been removed from this collection.
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Sort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="descriptor">descriptor for property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
            <remarks>For backwards compatibility</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.RebuildEntityIndex">
            <summary>
            Rebuilds the index which contains per objectid the index in this collection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.AddNew">
            <summary>
            Will add a new entity to the list, will set its parent collection property so CancelEdit will remove
            it from the list again, and will set its flag that it is added by databinding. 
            </summary>
            <remarks>Do not call this method from your own code. This is a databinding ONLY method.</remarks>
            <exception cref="T:System.InvalidOperationException">If this collection is set to ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.PerformSetRelatedEntity(`0)">
            <summary>
            Performs the set related entity action on the passed in entity. This action is delegated to an inheritor.
            </summary>
            <param name="entity">The entity to perform the setrelated entity action on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.PerformUnsetRelatedEntity(`0)">
            <summary>
            Performs the unset related entity action on the passed in entity. This action is delegated to an inheritor.
            </summary>
            <param name="entity">The entity to perform the unsetrelated entity action on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.PerformAddToActiveContext(`0)">
            <summary>
            Performs the add action to the active context for this collection
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.GetEntityDescription(`0,System.Boolean)">
            <summary>
            Gets the entity description for the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <param name="switchFlag">if true, the method will produce TEntity.GetEntityDescription, otherwise it's a no-op</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.PlaceInRemovedEntitiesTracker(`0)">
            <summary>
            Places the item in the set RemovedEntitiesTracker.
            </summary>
            <param name="item">The item to add to the tracker.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.InitCoreClass">
            <summary>
            Inits the core class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.UnsetEntityEventHandlers(`0)">
            <summary>
            Unsets the entity event handlers. This prevents the entities keeping a reference to this collection.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SetEntityEventHandlers(`0)">
            <summary>
            Sets the entity event handlers so this collection listens to events happening to an entity inside this collection.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.PerformAdd(`0)">
            <summary>
            Performs the add.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCore#FindMatches(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets all indices of all the entities in the current order of this collection which match the passed in filter. 
            </summary>
            <param name="filter">The filter the entity has to match with. If null, all entities match and every index is returned</param>
            <returns>List of indices of all entities matching the filter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCoreInternal#PrepareForFetchOperation">
            <summary>
            Prepares the collection for fetch operation.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCoreInternal#CompleteFetchOperation">
            <summary>
            Completes the fetch operation.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCoreInternal#PerformRelatedEntityRemoval(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Boolean)">
            <summary>
            Performs the related entity removal.
            </summary>
            <param name="toRemove">To remove.</param>
            <param name="signalRelatedEntityManyToOne">if set to <c>true</c> [signal related entity many to one].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCoreInternal#GetCachedPkHashes">
            <summary>
            Gets the cached pk hashes, if available, otherwise null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCoreInternal#SetCachedPkHashes(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}})">
            <summary>
            Sets the cached pk hashes to the passed dictionary
            </summary>
            <param name="pkHashes">The pk hashes.</param>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Disposed">
            <summary>
            IComponent's Disposed event. 
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.ListChanged">
            <summary>
            Event which is used in complex databinding.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.EntityRemoving">
            <summary>
            Event which is raised at the start of the Remove or RemoveAt(index) routine. To cancel the remove action, set cancel to true.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.EntityRemoved">
            <summary>
            Event which is raised at the End of the Remove or RemoveAt(index) routine.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.EntityAdding">
            <summary>
            Event which is raised at the start of the Add or Insert(index) routine. To cancel the addition action, set cancel to true.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.EntityAdded">
            <summary>
            Event which is raised at the End of the Add or Insert(index) routine.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during a GetMulti() call or when AddNew is called.
            </summary>
            <remarks>Deprecated. Please use the new Dependency injection mechanism to inject factories, validators and other objects into entities</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.DoNotPerformAddIfPresent">
            <summary>
            When set to true, an entity passed to Add() or Insert() will be tested if it's already present. If so, the index is returned and the
            object is not added again. If set to false (default: true) this check is not performed. Setting this property to true can slow down fetch logic.
            DataAccessAdapter's fetch logic sets this property to false during a multi-entity fetch.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.AllowNew">
            <summary>
            Default: true. If set to false, no new entities will be added through databinding. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.AllowRemove">
            <summary>
            Default: false. If set to true, entities can be removed through databinding.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.AllowEdit">
            <summary>
            Default: true. If set to false, entities inside this collection won't be editable in a complex databinding scenario.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Capacity">
            <summary>
            Gets / sets the initial capacity of the entity collection. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.Items">
            <summary>
            Items contained by this collection. Returns simply this instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty. 
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.DeserializationInProgress">
            <summary>
            Gets or sets a value indicating whether [deserialization in progress].
            </summary>
            <value>
            	<c>true</c> if [deserialization in progress]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SuppressListChangedEventsInternal">
            <summary>
            Gets or sets a value indicating whether [surpress list changed events].
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.EntityValidatorToUse">
            <summary>
            Obsolete. Collections don't store validator objects anymore. Present to make sure users can continue designing their forms in vs.net
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.ValidatorToUse">
            <summary>
            Obsolete. Collections don't store validator objects anymore. Present to make sure users can continue designing their forms in vs.net
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionCore#Item(System.Int32)">
            <summary>
            Simple indexer. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore`1.CachedPkHashes">
            <summary>
            Gets / sets the CachedPkHashes. This is a dictionary with the PK hashes for the entities in this collection. This is set during a 
            prefetch path fetch, to cache already calculated PK side hashes.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess2">
            <summary>
            Internal interface for entity collection method access when the type of the collection isn't known.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance">
            <summary>
            Internal maintenance interface for collections. This interface is necessary so methods can be called by casting to this interface without
            needing the type of the element used in the collection when the collection is for example passed in with just IEntityCollection or IEntityCollection2.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.ResetCachedPkHashes">
            <summary>
            Resets the CachedPkHashes. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.Clear">
            <summary>
            Clears this instance. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.CreateDummyInstance">
            <summary>
            Creates a dummy instance using the entity factory stored in an inherited collection. This dummy instance is then used to produce
            property descriptors.
            </summary>
            <returns>Dummy instance of entity contained in this collection, using the set factory.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            </summary>
            <param name="switchFlag">switch flag.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.RaiseListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Raises the list changed event, with the parameters passed in.
            </summary>
            <param name="index">The index.</param>
            <param name="typeOfChange">The type of change.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.SilentRemove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Removes the passed in entity from the collection without notifying the entity to remove that it has been removed from this collection.
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.DeserializationInProgress">
            <summary>
            Gets / sets the DeserializationInProgress flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ICollectionMaintenance.SurpressListChangedEvents">
            <summary>
            Gets or sets a value indicating whether [surpress list changed events].
            </summary>
            <value>
            	<c>true</c> if [surpress list changed events]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess2.EntityCollection2Xml(System.String,System.Xml.XmlWriter,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Boolean,System.Boolean)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities,
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="writer">The writer to write the output to.</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="emitFactory">if set to true, the XML will contain the factory name, otherwise it won't. Used in Compact25 format</param>
            <param name="isRootElement">if set to true, the start element produced is the absolute root element of the xml to produce.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess2.Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess2.Xml2EntityCollection(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data.
            </summary>
            <param name="reader">The reader to read xml from.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
            <remarks>Assumes Compact25 formatted xml is present in the reader.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2">
            <summary>
            Interface for entitycollection2 objects which are usable with the fast serializer
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2">
            <summary>
            Interface for the EntityCollection2 type. The collection defines typed basic collection behavior. 
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds an IEntity2 object to the list.
            </summary>
            <param name="entityToAdd">Entity2 to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.AddRange(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the range of objects passed in. Objects have to be IEntity2 implementing objects
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Inserts an IEntity2 on position Index
            </summary>
            <param name="index">Index where to insert the Object Entity</param>
            <param name="entityToAdd">Entity2 to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Remove given IEntity2 instance from the list.
            </summary>
            <param name="entityToRemove">Entity2 object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.RemoveAt(System.Int32)">
            <summary>
            Removes the IEntity instance at the index given.
            </summary>
            <param name="index">Index in list to remove the element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns true if the list contains the given IEntity2 Object
            </summary>
            <param name="entityToFind">Entity2 object to check.</param>
            <returns>true if Entity2 exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns index in the list of given IEntity2 object.
            </summary>
            <param name="entityToFind">Entity2 Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2[],System.Int32)">
            <summary>
            copy the complete list of IEntity2 objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity2 Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain EntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the containing entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Converts this entity collection to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String)">
            <summary>
            Converts this entity collection to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateHierarchicalProjection(System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, a new datatable is created inside destination or if one with the name of the entity is already present, 
            that one is used. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this 
            collection, using the collectionProjections data passed in. Per entity type found, a new datatable is created inside destination or if one with 
            the name of the entity is already present, that one is used.
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateHierarchicalProjection(System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, an entry is stored inside the destination dictionary. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this collection,
            using the collectionProjections data passed in. Per entity type found, an entry is stored inside the destination dictionary. 
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateView">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with no filter nor sorter applied.
            </summary>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter applied
            </summary>
            <param name="filter">The filter.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter and sorter applied to it.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter and sorter applied to it and the 
            dataChangeAction set to the passed in value.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.DefaultView">
            <summary>
            Gets the default view for this entitycollection. The returned value is the same instance every time this property is read. 
            It's a new entity view without a filter or a sorter.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.EntityFactoryToUse">
            <summary>
            The EntityFactory2 to use when creating entity objects when bound to a control and AddNew is enabled.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Item(System.Int32)">
            <summary>
            Simple indexer. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty. 
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.DoNotPerformAddIfPresent">
            <summary>
            When set to true, an entity passed to Add() or Insert() will be tested if it's already present. If so, the index is returned and the
            object is not added again. If set to false (default: true) this check is not performed. Setting this property to true can slow down fetch logic.
            DataAccessAdapter's fetch logic sets this property to false during a multi-entity fetch.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during an entity collection fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Capacity">
            <summary>
            Gets / sets the initial capacity of the entity collection. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.RemovedEntitiesTracker">
            <summary>
            Gets or sets the entity collection which should be used as removed entities tracker. If this property is set to an IEntityCollection2 instance,
            all entities which are removed from this collection are marked for deletion and placed in this removed entities tracker collection.
            This collection can then later on be used to delete these entities from the database in one go.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable">
            <summary>
            Interface which allows a class to save/retrieve their internal data to/from an existing SerializationWriter/SerializationReader.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable.SerializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter to use</param>
            <param name="context">Optional context to use as a hint as to what to store (BitVector32 is useful)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable.DeserializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Object)">
            <summary>
            Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader">The SerializationReader to use</param>
            <param name="context">Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2.GetSerializationFlags(System.Boolean,System.Boolean)">
            <summary>
            Gets the serialization flags.
            </summary>
            <param name="parseEntityList">If set to true, serialization flags are parsed</param>
            <param name="includeEntityMemberCollections">If set to true, entity menber collections are included as well. </param>
            <returns>Bitvector with the serialization flags</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2.Add(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2.InitClassInternal">
            <summary>
            Inits the class
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2.ContainingEntityMappedFieldInternal">
            <summary>
            Gets or sets the containing entity mapped field
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.#ctor">
            <summary>
            CTor
            </summary>
            <remarks>En</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            CTor
            </summary>
            <param name="entityFactoryToUse">The entity factory object to use when this collection has to construct new objects.
            This is the case when the collection is bound to a grid-like control for example.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            CTor
            </summary>
            <param name="initialContents">initial contents for this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.AddNew">
            <summary>
            Will add a new entity to the list, will set its parent collection property so CancelEdit will remove
            it from the list again, and will set its flag that it is added by databinding. 
            </summary>
            <remarks>Do not call this method from your own code. This is a databinding ONLY method.</remarks>
            <exception cref="T:System.InvalidOperationException">If this collection is set to ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain EntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the related entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateHierarchicalProjection(System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, a new datatable is created inside destination or if one with the name of the entity is already present, 
            that one is used. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateHierarchicalProjection(System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, an entry is stored inside the destination dictionary. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this 
            collection, using the collectionProjections data passed in. Per entity type found, a new datatable is created inside destination or if one with 
            the name of the entity is already present, that one is used.
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates a hierarchical projection of all the data in this view and for each type in the complete graph found starting with each entity in this view,
            using the viewProjections data passed in. Per entity type found, an entry is stored inside the destination dictionary. 
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.BuildCollectionProjectors(System.Collections.Generic.ICollection{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2}@)">
            <summary>
            Builds the collection projectors for this collection.
            </summary>
            <param name="collectionProjections">The collection projections.</param>
            <param name="entitiesPerType">Type of the entities per.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateHierarchicalProjectionInternal(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet,System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates the hierarchical projection for the entities per type passed in into the destination specified.
            </summary>
            <param name="collectionProjections">The collection projections.</param>
            <param name="destination">The destination.</param>
            <param name="entitiesPerType">Type of the entities per.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateHierarchicalProjectionInternal(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates the hierarchical projection for the entities per type passed in into the destination specified.
            </summary>
            <param name="collectionProjections">The collection projections.</param>
            <param name="destination">The destination.</param>
            <param name="entitiesPerType">Type of the entities per.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateView">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with no filter nor sorter applied.
            </summary>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter applied
            </summary>
            <param name="filter">The filter.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter and sorter applied to it.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter and sorter applied to it and the 
            dataChangeAction set to the passed in value.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Converts this entity collection to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String)">
            <summary>
            Converts this entity collection to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity collection and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ReadXml(System.Xml.XmlNode,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity collection and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ReadXml(System.Xml.XmlReader,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">The reader.</param>
            <param name="format">The format the xml of the reader is in.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.EntityCollection2Xml(System.String,System.Xml.XmlWriter,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Boolean,System.Boolean)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities,
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="writer">The writer to write the output to.</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="emitFactory">if set to true, the XML will contain the factory name, otherwise it won't. Used in Compact25 format</param>
            <param name="isRootElement">if set to true, the start element produced is the absolute root element of the xml to produce.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            It will produce "EntityCollectionBase2", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityCollectionBase2" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.Xml2EntityCollection(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data.
            </summary>
            <param name="reader">The reader to read xml from.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
            <remarks>Assumes Compact25 formatted xml is present in the reader.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
            <remarks>Assumes Verbose or Compact formatted xml is present in the reader</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#SilentRemove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Removes the passed in entity from the collection without notifying the entity to remove that it has been removed from this collection.
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#RaiseListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Raises the list changed event, with the parameters passed in.
            </summary>
            <param name="index">The index.</param>
            <param name="typeOfChange">The type of change.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#ResetCachedPkHashes">
            <summary>
            Resets the CachedPkHashes. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            </summary>
            <param name="switchFlag">switch flag.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#CreateDummyInstance">
            <summary>
            Creates a dummy instance using the entity factory stored in an inherited collection. This dummy instance is then used to produce
            property descriptors.
            </summary>
            <returns>
            Dummy instance of entity contained in this collection, using the set factory.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionAccess2#EntityCollection2Xml(System.String,System.Xml.XmlWriter,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Boolean,System.Boolean)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities,
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="writer">The writer to write the output to.</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="emitFactory">if set to true, the XML will contain the factory name, otherwise it won't. Used in Compact25 format</param>
            <param name="isRootElement">if set to true, the start element produced is the absolute root element of the xml to produce.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionAccess2#Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionAccess2#Xml2EntityCollection(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data.
            </summary>
            <param name="reader">The reader to read xml from.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
            <remarks>Assumes Compact25 formatted xml is present in the reader.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.PerformSetRelatedEntity(`0)">
            <summary>
            Performs the set related entity action on the passed in entity. This action is delegated to an inheritor.
            </summary>
            <param name="entity">The entity to perform the setrelated entity action on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.PerformUnsetRelatedEntity(`0)">
            <summary>
            Performs the unset related entity action on the passed in entity. This action is delegated to an inheritor.
            </summary>
            <param name="entity">The entity to perform the unsetrelated entity action on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.PerformAddToActiveContext(`0)">
            <summary>
            Performs the add action to the active context for this collection
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.GetEntityDescription(`0,System.Boolean)">
            <summary>
            Gets the entity description for the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <param name="switchFlag">if true, the method will produce TEntity.GetEntityDescription, otherwise it's a no-op</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.PlaceInRemovedEntitiesTracker(`0)">
            <summary>
            Places the item in the set RemovedEntitiesTracker.
            </summary>
            <param name="item">The item to add to the tracker.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.AddContainedEntitiesToContext">
            <summary>
            Adds the contained entities to the active set context.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.DetermineEntityFactory">
            <summary>
            Determines the entity factory based on TEntity's value.
            </summary>
            <returns>the entity factory to set</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Inits the class
            </summary>
            <param name="entityFactoryToUse">The EntityFactory2 to use when creating entity objects when a bound control is adding a new entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.InitClass">
            <summary>
            Inits the class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this collection,
            using the collectionProjections data passed in. Per entity type found, a new datatable is created inside destination.
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this collection,
            using the collectionProjections data passed in. Per entity type found, an entry is stored inside the destination dictionary. 
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds an IEntity2 object to the list.
            </summary>
            <param name="entityToAdd">Entity2 to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#AddRange(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the range of objects passed in. Objects have to be IEntity2 implementing objects
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Inserts an IEntity2 on position Index
            </summary>
            <param name="index">Index where to insert the Object Entity</param>
            <param name="entityToAdd">Entity2 to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Remove given IEntity2 instance from the list.
            </summary>
            <param name="entityToRemove">Entity2 object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns true if the list contains the given IEntity2 Object
            </summary>
            <param name="entityToFind">Entity2 object to check.</param>
            <returns>true if Entity2 exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns index in the list of given IEntity2 object.
            </summary>
            <param name="entityToFind">Entity2 Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2[],System.Int32)">
            <summary>
            copy the complete list of IEntity2 objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity2 Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CreateView">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with no filter nor sorter applied.
            </summary>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter applied
            </summary>
            <param name="filter">The filter.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter and sorter applied to it.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Creates a new EntityView2 object of the right type on this collection with the passed in filter and sorter applied to it and the 
            dataChangeAction set to the passed in value.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
            <returns>new EntityView2 on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.GetList">
            <summary>
            Returns an <see cref="T:System.Collections.IList"></see> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList"></see> itself.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IList"></see> that can be bound to a data source from the object.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact25 | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact25 | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.GetSerializationFlags(System.Boolean,System.Boolean)">
            <summary>
            Gets the serialization flags.
            </summary>
            <param name="parseEntityList">If set to true, serialization flags are parsed</param>
            <param name="includeEntityMemberCollections">If set to true, entity menber collections are included as well.</param>
            <returns>Bitvector with the serialization flags</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SerializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            Method which restores owned data - i.e. considered private to this collection
            and not shared with any external object
            </summary>
            <param name="writer">SerializationWriter</param>
            <param name="context">The serialization flags (previously constructed)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.DeserializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Object)">
            <summary>
            Method which restores owned data - i.e. considered private to this entity
            and not shared with any external object
            </summary>
            <param name="reader">The SerializationReader containing the serialized data</param>
            <param name="context">The serialization flags (previously read)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.AreEntityTypesCommon">
            <summary>
            Ares the entity types common.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IFastSerializableEntityCollection2#GetSerializationFlags(System.Boolean,System.Boolean)">
            <summary>
            Gets the serialization flags.
            </summary>
            <param name="parseEntityList">If set to true, serialization flags are parsed</param>
            <param name="includeEntityMemberCollections">If set to true, entity menber collections are included as well.</param>
            <returns>Bitvector with the serialization flags</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IFastSerializableEntityCollection2#Add(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IFastSerializableEntityCollection2#InitClassInternal">
            <summary>
            Inits the class
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IOwnedDataSerializable#SerializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter to use</param>
            <param name="context">Optional context to use as a hint as to what to store (BitVector32 is useful)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IOwnedDataSerializable#DeserializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Object)">
            <summary>
            Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader">The SerializationReader to use</param>
            <param name="context">Optional context to use as a hint as to what to retrieve (BitVector32 is useful)</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#SurpressListChangedEvents">
            <summary>
            Gets or sets a value indicating whether [surpress list changed events].
            </summary>
            <value>
            	<c>true</c> if [surpress list changed events]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#DeserializationInProgress">
            <summary>
            Gets / sets the DeserializationInProgress flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty.
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#DefaultView">
            <summary>
            Gets the default view for this entitycollection. The returned value is a new instance every time this property is read. It's a new entity view without a 
            filter or a sorter.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection2#Capacity">
            <summary>
            Gets / sets the initial capacity of the entity collection. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ContainsListCollection">
            <summary>
            Gets a value indicating whether the collection is a collection of <see cref="T:System.Collections.IList"></see> objects.
            </summary>
            <value></value>
            <returns>true if the collection is a collection of <see cref="T:System.Collections.IList"></see> objects; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.SD#LLBLGen#Pro#ORMSupportClasses#IFastSerializableEntityCollection2#ContainingEntityMappedFieldInternal">
            <summary>
            Gets or sets the containing entity mapped field
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.EntityFactoryToUse">
            <summary>
            The EntityFactory2 to use when creating entity objects when bound to a grid and AddNew is enabled.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. This property is calculated in real time
            and can be time consuming when the collection contains a lot of objects. Use this property only in cases when the value
            of this property is used to do a refetch or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.DefaultView">
            <summary>
            Gets the default view for this entitycollection. The returned value is the same instance every time this property is read. 
            It's an entity view without a filter or a sorter.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.RemovedEntitiesTracker">
            <summary>
            Gets or sets the entity collection which should be used as removed entities tracker. If this property is set to an IEntityCollection2 instance,
            all entities which are removed from this collection are marked for deletion and placed in this removed entities tracker collection.
            This collection can then later on be used to delete these entities from the database in one go.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ContainingEntity">
            <summary>
            Gets the entity which contains this collection (e.g. Customer, if this collection is the Customer's Orders collection), or null if this
            collection isn't part of any entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2`1.ContainingEntityMappedField">
            <summary>
            Gets the name of the field mapped onto the relation in the opposite entity which is represented by this collection, if this collection is 
            contained by an entity. E.g. it will return "Customer" if the relation Customer - Order has the field 'Customer' mapped onto it in Order and 
            this collection is the Orders collection in Customer. If this collection isn't contained in any entity, an empty string is returned.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionNonGeneric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionNonGeneric"/> class.
            </summary>
            <remarks>En</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionNonGeneric.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            CTor
            </summary>
            <param name="entityFactoryToUse">The entity factory object to use when this collection has to construct new objects.
            This is the case when the collection is bound to a grid-like control for example.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionNonGeneric.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CustomXmlSerializationAttribute">
            <summary>
            Simple attribute which signals the xml serialization/deserialization logic for adapter to call out to custom routines 
            (PerformCustomXmlSerialization and PerformCustomXmlDeserialization) for serialization and deserialization of the property
            data.
            </summary>
            <remarks>Adapter specific, Compact25 specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CustomXmlSerializationAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CustomXmlSerializationAttribute"/> class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute">
            <summary>
            Attribute definition to define dependency injection information on a class which instances are injected into other objects (targets). 
            A usage of this attribute can be for example a validator class which is injected at runtime into an entity object to be its validator object to use.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target into which to inject an instance of the type annotated with this attribute. Can be an interface, in 
            which case all types which implement the interface and thus with the specified propertyName will get the instance type injected (if applicable)</param>
            <param name="propertyName">Name of the property to set with the instance of the type annotated with this attribute.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.TargetNamespaceFilter">
            <summary>
            Gets / sets the targetNamespaceFilter string which contains semi-colon (;) separated names, or fragments of names of namespaces to limit 
            implementations of TargetType to, when TargetType is an interface. If any fragment specified is found as the start of the type’s namespace 
            name, that type is a valid target. Optional. If no targetnamespacefilter is specified, all types are targeted.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.Property">
            <summary>
            Gets / sets the propertyinfo object for the property to go.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.TargetKind">
            <summary>
            Gets / sets targetKind. Targetkind defines which types get the instance injected: only the specified type (absolute) or also all subtypes 
            (hierarchy, default). If this property is set to a value and TargetType is an interface, TargetKind will be reset to Absolute.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.ContextType">
            <summary>
            Gets / sets contextType. ContextType is the specification of what kind of instance is injected: a shared instance (Singleton) or a new instance each time
            an injection has to be made (NewInstancePerTarget, default).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.TargetType">
            <summary>
            Gets / sets targetType, into which to inject an instance of the type annotated with this attribute. Can be an interface, in 
            which case all types which implement the interface and thus with the specified propertyName will get the instance type injected (if applicable)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute.PropertyName">
            <summary>
            Gets / sets propertyName, which is the name of the property to set with the instance of the type annotated with this attribute.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeInCompactXmlAttribute">
            <summary>
            Simple attribute which is used to mark a property in an entity collection that it has to be included in Compact XML. Compact XML is used
            when the entity collection is send to/from a webservice.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IncludeInCompactXmlAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeInCompactXmlAttribute"/> class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypeContainedAttribute">
            <summary>
            Attribute to use on properties which return an entity collection in the Adapter template set.
            This attribute will tell the property descriptor construction code to construct a list of 
            properties of the type set as the value of the attribute.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeContainedAttribute.#ctor(System.Type)">
            <summary>
            CTor
            </summary>
            <param name="typeContainedInCollection">The type of the objects contained in the collection
            returned by the property this attribute is applied to.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypeContainedAttribute.TypeContainedInCollection">
            <summary>
            Gets typeContainedInCollection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesigner2ConfigurationForm">
            <summary>
            Special designer form which is popped up when the user clicks 'Configure data source' on an LLBLGenProDataSource2 component on an ASP.NET webform.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesigner2ConfigurationForm.#ctor(System.IServiceProvider,SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesigner2ConfigurationForm"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="dataSourceControl">The data source control.</param>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesigner2ConfigurationForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesigner2ConfigurationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesigner2ConfigurationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm">
            <summary>
            Special designer form which is popped up when the user clicks 'Configure data source' on an LLBLGenProDataSource component on an ASP.NET webform.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm.#ctor(System.IServiceProvider,SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="dataSourceControl">The data source control.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm._containerTypeComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the _containerTypeComboBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm._okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm._cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event arguments instance containing the event data.</param>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDesignerConfigurationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryConverter">
            <summary>
            Type converter class which is used during design time to serialize a correct constructor call for an entity factory. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified context.
            </summary>
            <param name="context">Context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>
            	<c>true</c> if this instance [can convert to] the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to the specified type, if applicable.
            </summary>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value.</param>
            <param name="destinationType">Destination type.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector">
            <summary>
            Dialog which allows the developer to select an entity factory to be used in an EntityCollection in design mode.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector._cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.SetFactoriesComboBox(System.Collections.ICollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Sets the factories combo box.
            </summary>
            <param name="factories">List with names of the factories found</param>
            <param name="currentFactory">The current factory.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector._selectButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the _selectButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.SelectedFactory">
            <summary>
            Gets the selected factory.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner">
            <summary>
            General designer class for the LLBLGen Pro DataSource control.
            </summary>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the control designer and loads the specified component.
            </summary>
            <param name="component">The control being designed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.Configure">
            <summary>
            Launches the data source configuration utility in the design host.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.GetView(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Web.UI.Design.DesignerDataSourceView"></see> object that is identified by the view name.
            </summary>
            <param name="viewName">The name of the view.</param>
            <returns>This implementation always returns null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.GetViewNames">
            <summary>
            Returns an array of the view names that are available in this data source.
            </summary>
            <returns>An array of view names.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.ConfigureDataSource(System.Object)">
            <summary>
            Configures the data source change callback.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.CanConfigure">
            <summary>
            Gets a value indicating whether the <see cref="M:System.Web.UI.Design.DataSourceDesigner.Configure"></see> method can be called.
            </summary>
            <value></value>
            <returns>true, if <see cref="M:System.Web.UI.Design.DataSourceDesigner.Configure"></see> can be called; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2">
            <summary>
            General designer class for the LLBLGen Pro DataSource control.
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the control designer and loads the specified component.
            </summary>
            <param name="component">The control being designed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.Configure">
            <summary>
            Launches the data source configuration utility in the design host.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.GetView(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Web.UI.Design.DesignerDataSourceView"></see> object that is identified by the view name.
            </summary>
            <param name="viewName">The name of the view.</param>
            <returns>This implementation always returns null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.GetViewNames">
            <summary>
            Returns an array of the view names that are available in this data source.
            </summary>
            <returns>An array of view names.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.ConfigureDataSource(System.Object)">
            <summary>
            Configures the data source change callback.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.CanConfigure">
            <summary>
            Gets a value indicating whether the <see cref="M:System.Web.UI.Design.DataSourceDesigner.Configure"></see> method can be called.
            </summary>
            <value></value>
            <returns>true, if <see cref="M:System.Web.UI.Design.DataSourceDesigner.Configure"></see> can be called; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2.DataSource">
            <summary>
            Gets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView">
            <summary>
            General datasourceview for design time databinding
            </summary>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.GetDesignTimeData(System.Int32,System.Boolean@)">
            <summary>
            Generates design-time data that matches the schema of the associated data source control using the provided number of rows and returns a value indicating whether the data is sample or real data.
            </summary>
            <param name="minimumRows">The minimum number of rows to return.</param>
            <param name="isSampleData">true to indicate the returned data is sample data; false to indicate the returned data is live data.</param>
            <returns>
            A <see cref="T:System.Web.UI.DataSourceView"></see> containing data to display at design time.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.CanPage">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports paging through the data that is retrieved by the <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)"></see> method.
            </summary>
            <value></value>
            <returns>true, if paging through the data retrieved by the <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.CanDelete">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> method.
            </summary>
            <value></value>
            <returns>true, if the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.CanInsert">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> method.
            </summary>
            <value></value>
            <returns>true, if the <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.CanUpdate">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> method.
            </summary>
            <value></value>
            <returns>true, if the <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView.Schema">
            <summary>
            Gets a schema that describes the data source view that is represented by this view object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Web.UI.Design.IDataSourceViewSchema"></see>.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2">
            <summary>
            General datasourceview for design time databinding
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceDesigner2,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.GetDesignTimeData(System.Int32,System.Boolean@)">
            <summary>
            Generates design-time data that matches the schema of the associated data source control using the provided number of rows and returns a value indicating whether the data is sample or real data.
            </summary>
            <param name="minimumRows">The minimum number of rows to return.</param>
            <param name="isSampleData">true to indicate the returned data is sample data; false to indicate the returned data is live data.</param>
            <returns>
            A <see cref="T:System.Web.UI.DataSourceView"></see> containing data to display at design time.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.CanPage">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports paging through the data that is retrieved by the <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)"></see> method.
            </summary>
            <value></value>
            <returns>true, if paging through the data retrieved by the <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.CanDelete">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> method.
            </summary>
            <value></value>
            <returns>true, if the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.CanInsert">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> method.
            </summary>
            <value></value>
            <returns>true, if the <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.CanUpdate">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object that is associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> method.
            </summary>
            <value></value>
            <returns>true, if the <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> is supported; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDesignerDataSourceView2.Schema">
            <summary>
            Gets a schema that describes the data source view that is represented by this view object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Web.UI.Design.IDataSourceViewSchema"></see>.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema">
            <summary>
            Class to produce information of a field type in an LLBLGenProTypeSchemaView object, which is used by ASP.NET to work with types during design time. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema"/> class.
            </summary>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.DataType">
            <summary>
            Gets the type of data stored in the field.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Type"></see> object.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.Identity">
            <summary>
            Gets a value indicating whether the value of the field automatically increments for each new row.
            </summary>
            <value></value>
            <returns>true if the field's <see cref="P:System.Web.UI.Design.IDataSourceFieldSchema.DataType"></see> is numeric and the underlying field increments automatically as new rows are added; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.IsReadOnly">
            <summary>
            Gets a value indicating whether the field is editable.
            </summary>
            <value></value>
            <returns>true if the field is read-only; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.IsUnique">
            <summary>
            Gets a value indicating whether values in the field are required to be unique.
            </summary>
            <remarks>always false.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.Length">
            <summary>
            Gets a value indicting the size of data that can be stored in the field.
            </summary>
            <value></value>
            <returns>The number of bytes the field can store.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.Name">
            <summary>
            Gets the name of the field.
            </summary>
            <value></value>
            <returns>The name of the field.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.Nullable">
            <summary>
            Gets a value indicating whether the field can accept null values.
            </summary>
            <value></value>
            <returns>true if the field can accept null values; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.Precision">
            <summary>
            Gets the maximum number of digits used to represent a numerical value in the field.
            </summary>
            <value></value>
            <returns>The maximum number of digits used to represent the values of the field if the <see cref="P:System.Web.UI.Design.IDataSourceFieldSchema.DataType"></see> of the field is numeric. If this property is not implemented, it should return -1.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.PrimaryKey">
            <summary>
            Gets a value indicating whether the field is in the primary key.
            </summary>
            <value></value>
            <returns>true if the field is in the primary key; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeFieldSchema.Scale">
            <summary>
            Gets the number of decimal places to which numerical values in the field are resolved.
            </summary>
            <value></value>
            <returns>If the <see cref="P:System.Web.UI.Design.IDataSourceFieldSchema.DataType"></see> of the field is numeric, returns the number of decimal places to which values are resolved, otherwise -1.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView">
            <summary>
            Class to produce property descriptors for ASP.NET. This class is necessary because ASP.NET 2.0 TypeSchema object can't sort properties nor filter out
            properties marked with Browsable(false). 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView"/> class.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.GetChildren">
            <summary>
            Gets an array representing the child views contained in the current view.
            </summary>
            <returns>
            An array of <see cref="T:System.Web.UI.Design.IDataSourceViewSchema"></see> objects that represent the child views contained in the current view.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.GetFields">
            <summary>
            Gets an array containing information about each field in the data source.
            </summary>
            <returns>
            An array of <see cref="T:System.Web.UI.Design.IDataSourceFieldSchema"></see> objects representing each of the fields in the data source.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.CreateFieldSchemaObjects(System.ComponentModel.PropertyDescriptorCollection,System.Boolean)">
            <summary>
            Creates the field schema objects.
            </summary>
            <param name="properties">The properties.</param>
            <param name="filterOutUselessDataTableColumns">if set to <c>true</c> [filter out useless data table columns].</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProTypeSchemaView.Name">
            <summary>
            Gets the name of the view.
            </summary>
            <value></value>
            <returns>The name of the view.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CancelableCollectionChangedEventArgs">
            <summary>
            Event args which are used for collection changed events and which is raised by cancelable actions. Set the Cancel flag to cancel the action
            which raised the event. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CollectionChangedEventArgs">
            <summary>
            EventArgs class for events raised by the entity collection classes for various actions. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CollectionChangedEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CollectionChangedEventArgs"/> class.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CollectionChangedEventArgs.InvolvedEntity">
            <summary>
            Gets / sets the entity involved in the action which took place and which triggered the raised event.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CancelableCollectionChangedEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CancelableCollectionChangedEventArgs"/> class.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CancelableCollectionChangedEventArgs.Cancel">
            <summary>
            Gets / sets the cancel flag to cancel the action.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CancelableDataSourceActionEventArgs">
            <summary>
            Event args class which is the cancelable variant of the DataSourceActionEventArgs event args class
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceActionEventArgs">
            <summary>
            Event args class which is used with LLBLGenProDataSource(2) action events. This is the non-cancelable variant. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceActionEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceActionEventArgs"/> class.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceActionEventArgs.InvolvedEntity">
            <summary>
            Gets / sets involvedEntity
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CancelableDataSourceActionEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CancelableDataSourceActionEventArgs"/> class.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CancelableDataSourceActionEventArgs.Cancel">
            <summary>
            Gets / sets the cancel flag to cancel the action.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs">
            <summary>
            Event arguments class which is passed as argument in the PerformDbCount event on an LLBLGenProDataSource control.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="containedCollection">The contained collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="fields">The fields.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="containedCollection">The contained collection.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="dataContainerType">Type of the data container.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.Relations">
            <summary>
            Gets the relations.
            </summary>
            <value>The relations.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.GroupBy">
            <summary>
            Gets the GroupByCollection to use for the DbCount fetch. Only valid if DataContainerType is set to TypedList or TypedView.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.AllowDuplicates">
            <summary>
            Gets a value indicating whether duplicates should be considered in the DbCount fetch. Only valid if DataContainerType is set to Typedlist
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.DbCount">
            <summary>
            Gets or sets the db count retrieved.
            </summary>
            <value>The db count.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.DataContainerType">
            <summary>
            Gets the type of the data container. Use this value to determine which values to retrieve from this event arguments object to perform the GetDbCount action
            </summary>
            <value>The type of the data container.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.ContainedCollection">
            <summary>
            Gets the contained collection in the data source control
            </summary>
            <value>The contained collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs.Fields">
            <summary>
            Gets the fields for TypedList or TypedView fetches.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2">
            <summary>
            Event arguments class which is passed as argument in the PerformDbCount event on an LLBLGenProDataSource2 control.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="containedCollection">The contained collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="fields">The fields.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="containedCollection">The contained collection.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="dataContainerType">Type of the data container.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.GroupBy">
            <summary>
            Gets the GroupByCollection to use for the DbCount fetch. Only valid if DataContainerType is set to TypedList or TypedView.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.AllowDuplicates">
            <summary>
            Gets a value indicating whether duplicates should be considered in the DbCount fetch. Only valid if DataContainerType is set to Typedlist
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.DbCount">
            <summary>
            Gets or sets the db count retrieved.
            </summary>
            <value>The db count.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.DataContainerType">
            <summary>
            Gets the type of the data container. Use this value to determine which values to retrieve from this event arguments object to perform the GetDbCount action
            </summary>
            <value>The type of the data container.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.ContainedCollection">
            <summary>
            Gets the contained collection in the data source control
            </summary>
            <value>The contained collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2.Fields">
            <summary>
            Gets the fields for TypedList or TypedView fetches.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs">
            <summary>
            Event arguments class which is passed as argument in the PerformSelect event on an LLBLGenProDataSource2 control
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedCollection">The contained collection.</param>
            <param name="prefetchPath">The prefetch path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedTypedList">The contained typed list.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ITypedView,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedTypedView">The contained typed view.</param>
            <param name="fields">The fields.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp,SD.LLBLGen.Pro.ORMSupportClasses.ITypedView,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedCollection">The contained collection.</param>
            <param name="containedTypedList">The contained typed list.</param>
            <param name="containedTypedView">The contained typed view.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="dataSourceDataContainerType">Type of the data source data container.</param>
            <param name="prefetchPath">The prefetch path.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.Relations">
            <summary>
            Gets the relations.
            </summary>
            <value>The relations.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.GroupBy">
            <summary>
            Gets the GroupByCollection to use for the fetch. Only valid if DataContainerType is set to TypedList or TypedView.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.PrefetchPath">
            <summary>
            Gets the prefetch path to use for the fetch. Only valid if DataContainerType is set to EntityCollection. 
            </summary>
            <value>The prefetch path.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.AllowDuplicates">
            <summary>
            Gets a value indicating whether duplicates should be considered in the fetch. Only valid if DataContainerType is set to Typedlist
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.DataContainerType">
            <summary>
            Gets the type of the data container. Use this value to determine which values to retrieve from this event arguments object to perform the select action
            </summary>
            <value>The type of the data container.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.ContainedCollection">
            <summary>
            Gets the contained collection in the data source control
            </summary>
            <value>The contained collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.ContainedTypedList">
            <summary>
            Gets the contained typed list in the data source control
            </summary>
            <value>The contained typed list.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.ContainedTypedView">
            <summary>
            Gets the contained typed view in the data source control
            </summary>
            <value>The contained typed view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.MaxNumberOfItemsToReturn">
            <summary>
            Gets the max number of items to return.
            </summary>
            <value>The max number of items to return.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.PageNumber">
            <summary>
            Gets the page number for paging. 
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.PageSize">
            <summary>
            Gets the page size for paging. 
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.Sorter">
            <summary>
            Gets the sortexpression.
            </summary>
            <value>The sorter.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs.Fields">
            <summary>
            Gets the fields for TypedList or TypedView fetches.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2">
            <summary>
            Event arguments class which is passed as argument in the PerformSelect event on an LLBLGenProDataSource2 control
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedCollection">The contained collection.</param>
            <param name="prefetchPath">The prefetch path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedTypedList">The contained typed list.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2"/> class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedTypedView">The contained typed view.</param>
            <param name="fields">The fields.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="sorter">The sorter.</param>
            <param name="containedCollection">The contained collection.</param>
            <param name="containedTypedList">The contained typed list.</param>
            <param name="containedTypedView">The contained typed view.</param>
            <param name="fields">The fields.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="dataSourceDataContainerType">Type of the data source data container.</param>
            <param name="prefetchPath">The prefetch path.</param>
            <param name="groupBy">The group by.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.GroupBy">
            <summary>
            Gets the GroupByCollection to use for the fetch. Only valid if DataContainerType is set to TypedList or TypedView.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.PrefetchPath">
            <summary>
            Gets the prefetch path to use for the fetch. Only valid if DataContainerType is set to EntityCollection. 
            </summary>
            <value>The prefetch path.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.AllowDuplicates">
            <summary>
            Gets a value indicating whether duplicates should be considered in the fetch. Only valid if DataContainerType is set to Typedlist
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.DataContainerType">
            <summary>
            Gets the type of the data container. Use this value to determine which values to retrieve from this event arguments object to perform the select action
            </summary>
            <value>The type of the data container.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.ContainedCollection">
            <summary>
            Gets the contained collection in the data source control
            </summary>
            <value>The contained collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.ContainedTypedList">
            <summary>
            Gets the contained typed list in the data source control
            </summary>
            <value>The contained typed list.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.ContainedTypedView">
            <summary>
            Gets the contained typed view in the data source control
            </summary>
            <value>The contained typed view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.Filter">
            <summary>
            Gets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.MaxNumberOfItemsToReturn">
            <summary>
            Gets the max number of items to return.
            </summary>
            <value>The max number of items to return.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.PageNumber">
            <summary>
            Gets the page number for paging. 
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.PageSize">
            <summary>
            Gets the page size for paging. 
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.Sorter">
            <summary>
            Gets the sortexpression.
            </summary>
            <value>The sorter.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2.Fields">
            <summary>
            Gets the fields for TypedList or TypedView fetches.
            </summary>
            <value>The fields.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs">
            <summary>
            Event arguments class which is passed as argument in the PerformWork event on an LLBLGenProDataSource control.
            </summary>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs"/> class.
            </summary>
            <param name="uow">The unit of work.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs.Uow">
            <summary>
            Gets / sets the UnitOfWork object
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs2">
            <summary>
            Event arguments class which is passed as argument in the PerformWork event on an LLBLGenProDataSource control.
            </summary>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs2"/> class.
            </summary>
            <param name="uow">The unit of work</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs2.Uow">
            <summary>
            Gets / sets the UnitOfWorkw object
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoRetriever">
            <summary>
            Class which retrieves information from a passed in exception which is specific to a DB type, and returns it to the caller.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoRetriever"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoRetriever.GetExceptionInfo(System.Data.Common.DbException)">
            <summary>
            Gets the exception info which is included in the passed in db specific exception. This retrieval has to be done in this class as not all .NET
            providers derive their exception classes from DbException.
            </summary>
            <param name="dbSpecificException">The db specific exception object.</param>
            <returns>A dictionary with per exception info element the value retrieved from the db specific exception </returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException">
            <summary>
            General exception class which is thrown when there is a concurrency error during a save action or a delete action.
            A concurrency error occurs if the Save action of an entity fails, i.e. when no rows were affected by the save, or 
            when an entity is deleted and a delete restriction has been set and no rows were affected by the delete action.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMException">
            <summary>
            Abstract base class for all ORM exceptions. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.RuntimeVersion">
            <summary>
            Gets the runtime version number of the code which threw the exception.
            </summary>
            <value>The runtime version.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.RuntimeBuild">
            <summary>
            Gets the runtime build number of the code which threw the exception.
            </summary>
            <value>The runtime build.</value>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.#ctor(System.String,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
            <param name="entityWhichFailed">The entity object which save action failed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization override
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.EntityWhichFailed">
            <summary>
            Gets / sets entityWhichFailed
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">
            <summary>
            General exception class which is thrown when a user tries to get a value from a field of an entity which is
            marked as Deleted.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException">
            <summary>
            General exception class which is thrown when a user tries to get a value from a field of an entity which is
            marked as OutOfSync, and needs to be refetched.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException">
            <summary>
            General exception class which is thrown by a validation error.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
            <param name="entityValidated">the entity object validated. Offered as object to share exception objects between adapter/selfservicing.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException"/> class.
            </summary>
            <param name="message">The message of the exception</param>
            <param name="entityValidated">the entity object validated. Offered as object to share exception objects between adapter/selfservicing.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization override
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.EntityValidated">
            <summary>
            Gets EntityValidated
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsNullException">
            <summary>
            General exception class which is thrown when a user tries to get a value from a field which is null.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsNullException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">
            <summary>
            General exception class which is thrown when a user sets a field which is readonly.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMGeneralOperationException">
            <summary>
            Exception which is thrown when the general operation of the o/r core isnt used correctly, like bad imput has been given and no other 
            exception is appropriate.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMGeneralOperationException.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMGeneralOperationException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMGeneralOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException">
            <summary>
            General exception which is thrown when an error is determined in the inheritance info during query execution.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException.#ctor">
            <summary>
            CTOr
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMInterpretationException">
            <summary>
            General exception which is thrown when an interpretation error occurs during predicate / sortclause interpretation for filtering or sorting in-memory
            in an EntityView(2).
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInterpretationException.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInterpretationException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInterpretationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMInvalidFieldReadException">
            <summary>
            Exception which is thrown when a developer reads a field from a new entity which isn't set to a value yet. 
            Only thrown when the EntityBase(2).MakeInvalidFieldReadsFatal flag is set to true (default: false). 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInvalidFieldReadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMInvalidFieldReadException"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInvalidFieldReadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMInvalidFieldReadException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInvalidFieldReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMLockTimeoutException">
            <summary>
            timeout exception for TimeOut locks used inside the code. This exception should only pop up when a timed lock timed out, which is to prevent deadlocks.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMLockTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMLockTimeoutException"/> class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException">
            <summary>
            General exception which is thrown when an error occurs during the construction of the query to execute.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException.#ctor">
            <summary>
            CTOr
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">
            <summary>
            General exception class which is thrown when an exception was caught during a query execution.
            Contains the original exception as inner exception.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.#ctor(System.String,System.String,System.Collections.IList,System.Exception,System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement,System.Object})">
            <summary>
            ctor
            </summary>
            <param name="message">The message of the query</param>
            <param name="queryExecuted">The query string executed</param>
            <param name="parameters">the parameters collection of the command object executed</param>
            <param name="innerException">The actual exception caught</param>
            <param name="exceptionInfo">The exception info which is specific for the db specific exception caught.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization override
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.QueryExecuted">
            <summary>
            Gets the query string (formatted) executed which caused the exception.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.Parameters">
            <summary>
            Gets the parameters collection of the command object executed
            </summary>
            <remarks>Will be null when the class is instantiated by a deserialization process as parameters can't be serialized.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.DbSpecificExceptionInfo">
            <summary>
            Gets or sets the db specific exception info. This is info obtained from the db specific exception caught and wrapped by this exception.
            Can be null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.InvolvedEntity">
            <summary>
            Gets or sets the involved entity. This property is set when the exception was caused by a direct action on an entity and the entity in question
            is then the value of this property. Can be null.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException">
            <summary>
            General exception class which is thrown when something is wrong with a relation or with the context
            the relation is used in (ToQueryText in RelationCollection for example)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException.#ctor">
            <summary>
            CTOr
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException">
            <summary>
            Exception class which is usable for security exceptions thrown by authorizers. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="affectedEntity">The affected entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="affectedEntityType">Type of the affected entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="affectedEntity">The affected entity.</param>
            <param name="auditAction">The audit action.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="affectedEntityType">Type of the affected entity.</param>
            <param name="auditAction">The audit action.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.AuditAction">
            <summary>
            Gets / sets auditAction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.AffectedEntityType">
            <summary>
            Gets / sets affectedEntityType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMSecurityException.AffectedEntity">
            <summary>
            Gets / sets affectedEntity
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSerializationOptimizationException">
            <summary>
            Exception class which is thrown when a value being optimized does not meet the required criteria for optimization.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMSerializationOptimizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMSerializationOptimizationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">
            <summary>
            General exception class which is thrown when a user sets a field to a value which 
            doesn't match the type of the field.
            </summary>
            <remarks>Is also used in LLBLGenProDataSource(2) controls, when a field is set to a value which isn't convertable to the type of the field
            and which are collected in one group per entity.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
            <param name="illegalFieldValues">The illegal field values. Key: fieldname, value: field value which wasn't convertable.</param>
            <param name="targetEntity">The target entity of which the fields should have been set to new values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic). </exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.IllegalFieldValues">
            <summary>
            Gets or sets the illegal values dictionary. Used in LLBLGenProDataSource(2) scenario's which collect all errors per entity in one exception. 
            In normal field set scenario's, this property is null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.TargetEntity">
            <summary>
            Gets or sets the target entity of which the fields were about to be set. This property is only set in scenario's with the LLBLGenProDataSource(2) 
            controls.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder">
            <summary>
            Class which crawls over a predicateexpression and finds all predicates of the given type. Doesn't crawl into recursion of setpredicates. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser">
            <summary>
            Class which is used to traverse over an llblgen pro object, like a derivedtable, predicate expression etc. and access all inner objects, including
            fields.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(System.Object)">
            <summary>
            Traverses the specified object
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Traverses the specified derived table
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field and related objects.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the specified predicate and enclosed objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.TraversePredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the predicate specified.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.TraversePredicateField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Traverses the predicate field.
            </summary>
            <param name="field">The field as found in the predicate.</param>
            <param name="objectAlias">The object alias set in the predicate for the field .</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Traverses the specified relationcollection and the relations in it.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Traverses the specified expression
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.TraverseExpressionOperand(SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement)">
            <summary>
            Traverses the specified expression operand.
            </summary>
            <param name="operand">The operand to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression)">
            <summary>
            Traverses the specified scalar query expression and contained objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall)">
            <summary>
            Traverses the specified dbfunction call and contained objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Traverses the specified sortexpression and contained objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Traverses the specified groupby collection and contained objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.QueryApiObjectTraverser.TraverseSetPredicateInnerSetElements">
            <summary>
            Gets / sets the flag to traverse the inner elements of a FieldCompareSetPredicate. (default is true). Set to false if you use the findings of this
            crawler to adjust an outer query, as the inner elements of a fieldcompareset are a different scope.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.PredicateType)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.PredicateType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder"/> class.
            </summary>
            <param name="predicateTypeToFind">The predicate type to find.</param>
            <param name="traverseSetPredicateInnerSetElements">the flag to traverse the inner elements of a FieldCompareSetPredicate. (default is true). Set to false if you use the findings of this
            crawler to adjust an outer query, as the inner elements of a fieldcompareset are a different scope.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Traverses the specified predicate and enclosed objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateFinder.FoundPredicates">
            <summary>
            Gets the found predicates.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicateCallback">
            <summary>
            Callback for the AggregateSetPredicate, which is used to aggregate over the set of values passed in. 
            </summary>
            <param name="valuesToAggregate">the values to aggregate. </param>
            <returns>the aggregation result of the values passed in.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InterpretSetValueCallback">
            <summary>
            Callback for the AggregateSetPredicate, which is used to interpret a passed in entity and return the value to add to the set of values to aggregate
            in the AggregateSetPredicate. 
            </summary>
            <param name="toInterpret">The entity to interpret</param>
            <returns>the interpretation result of the passed in entity. This value is then added to the list of values to aggregate in the AggregateSetPredicate</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicateCallback">
            <summary>
            Callback for the DelegatePredicate, which is used to perform the interpretation of the passed in entity. 
            </summary>
            <param name="toInterpret">The entity to interpret</param>
            <returns>true if the entity is accepted by the callback, otherwise false.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc">
            <summary>
            Delegate definition which is used by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IProjector"/> and projection engines. The delegate is used to produce a single value out of 
            one or more values in the object array passed into the projection engine. 
            </summary>
            <param name="values">The array of values straight from the source. This is the list of values which have to be projected.</param>
            <param name="indices">The list of indices inside values. The delegate has to refer to these indices to obtain values from values</param>
            <returns>the value to use for the projection. </returns>
            <remarks>Used by Linq to produce values from projections using local functions. Also usable by .NET 2.0 developers, although with slightly more coding.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Setter">
            <summary>
            Delegate definition for a dynamically compiled method for setting the provider specific type.
            </summary>
            <param name="destination">db parameter to set the specific type of</param>
            <param name="value">the specific type value</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList">
            <summary>
            Class which contains strings and which can be used as a delimited string, with or without prefix/
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1"/> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <param name="delimiter">The delimiter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.AddFormatted(System.String,System.Object[])">
            <summary>
            Pushes a formatted string, build from the format string and the arguments specified
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The args.</param>
            <returns>the string added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> constructed from the elements in this list delimited with the delimiter string. 
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.SetPrefixSuffix(System.String,System.String)">
            <summary>
            Sets the prefix and the suffix.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <returns>this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.InitClass(System.String)">
            <summary>
            Inits the class.
            </summary>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.Delimiter">
            <summary>
            Gets or sets the delimiter string
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList.AppendDanglingDelimiter">
            <summary>
            Gets or sets a value indicating whether a dangling delimiter has to be added after the elements. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Miscellaneous.DynamicMethodCompiler">
            <summary>
            Small class which generates and compiles a setter delegate on the fly to quickly set properties on instances through reflection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Miscellaneous.DynamicMethodCompiler.CreateSetHandler``1(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates the set handler for the type and the property specified. It generates IL on the fly to produce a delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="type">The type.</param>
            <param name="propertyInfo">The property info.</param>
            <returns>
            compiled delegate which is ready to use to set the property defined by propertyInfo on instances of the type specified
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Miscellaneous.DynamicMethodCompiler.CreateSetHandler``1(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Creates the set handler for the type and the fieldinfo specified. It generates IL on the fly to produce a delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="type">The type.</param>
            <param name="fieldInfo">The field info.</param>
            <returns>
            compiled delegate which is ready to use to set the field defined by fieldInfo on instances of the type specified
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Miscellaneous.DynamicMethodCompiler.CreateSetDynamicMethod(System.Type)">
            <summary>
            Creates a dynamic method
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Miscellaneous.DynamicMethodCompiler.UnboxIfNeeded(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emits an unboxing opcode if the type is a valuetype
            </summary>
            <param name="type">The type.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments">
            <summary>
            Class which is used to specify separate query fragments in one container which is then usable to produce a single query string
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddPlaceHolder">
            <summary>
            Adds a new string place holder.
            </summary>
            <returns>the created place holder.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddFragment(System.String)">
            <summary>
            Adds the fragment.
            </summary>
            <param name="fragment">The fragment.</param>
            <returns>the fragment added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddFormatted(System.String,System.Object[])">
            <summary>
            Adds a formatted string, build from the format string and the arguments specified
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The args.</param>
            <returns>the string added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddCommaFragmentList(System.Boolean)">
            <summary>
            Adds a new Comma delimited fragment list.
            </summary>
            <param name="bracketSurrounded">if set to <see langword="true"/> the bracket surrounded variant is created.</param>
            <returns>the newly added fragment list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddCommaFragmentList(System.Boolean,System.Boolean)">
            <summary>
            Adds a new Comma delimited fragment list.
            </summary>
            <param name="bracketSurrounded">if set to <see langword="true"/> the bracket surrounded variant is created.</param>
            <param name="appendDanglingDelimiter">if set to <see langword="true"/> a dangling delimiter is appended after the content.</param>
            <returns>the newly added fragment list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddSemiColonFragmentList(System.Boolean)">
            <summary>
            Adds a new semi colon delimited fragment list.
            </summary>
            <param name="bracketSurrounded">if set to <see langword="true"/> the bracket surrounded variant is created.</param>
            <returns>the newly added fragment list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddSemiColonFragmentList(System.Boolean,System.Boolean)">
            <summary>
            Adds a new semi colon delimited fragment list.
            </summary>
            <param name="bracketSurrounded">if set to <see langword="true"/> the bracket surrounded variant is created.</param>
            <param name="appendDanglingDelimiter">if set to <see langword="true"/> a dangling delimiter is appended after the content.</param>
            <returns>the newly added fragment list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddSpaceFragmentList">
            <summary>
            Adds a new space delimited fragment list
            </summary>
            <returns>the newly added fragment list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddExistingQueryFragments(SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments)">
            <summary>
            Adds the existing query fragments specified to this query fragments
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddQueryFragments">
            <summary>
            Adds the query fragments.
            </summary>
            <returns>the newly added query fragments</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.AddDelimitedString(System.String,SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.QueryFragmentType,System.Boolean,System.Boolean)">
            <summary>
            Adds a new delimited string.
            </summary>
            <param name="delimiter">The delimiter.</param>
            <param name="fragmentType">Type of the fragment.</param>
            <param name="bracketSurrounded">if set to <see langword="true"/> the bracket surrounded variant is created.</param>
            <param name="appendDanglingDelimiter">if set to <see langword="true"/> a dangling delimiter is appended after the content.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.Count">
            <summary>
            Gets the number of elements in this query fragments.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments.QueryFragmentType">
            <summary>
            Enum to specify the type of the query fragment added to this class' contents
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder">
            <summary>
            Simple place holder class to be used with the QueryFragments class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder.SetFormatted(System.String,System.Object[])">
            <summary>
            Sets the value to the formatted string constructed from the parameters specified
            </summary>
            <param name="formatString">The format string.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ValuePair`2">
            <summary>
            Simple class to define a pair of values.
            </summary>
            <typeparam name="TValue1">The type of the value1.</typeparam>
            <typeparam name="TValue2">The type of the value2.</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValuePair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ValuePair`2"/> class.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ValuePair`2.Value1">
            <summary>
            Gets or sets the value1.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ValuePair`2.Value2">
            <summary>
            Gets or sets the value2.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope">
            <summary>
            Class which is used as an alias scope in a DbSpecificCreator.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope.Add(System.String,System.String)">
            <summary>
            Adds the specified key with the specific value to the scope data
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope.GetRealAlias(System.String,System.String@)">
            <summary>
            Gets the real alias.
            </summary>
            <param name="aliasToFind">The alias to find.</param>
            <param name="realAlias">The real alias.</param>
            <returns>true if the alias was retrievable, false otherwise</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope.ArtificialAliasPerEntity">
            <summary>
            Gets or sets the artificial alias per entity list
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.AliasScope.SelectListAlias">
            <summary>
            Gets or sets the select list alias for the scope's source. If specified, this alias is used for all fields in the select list.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo">
            <summary>
            Class which contains the DbProviderfactory information for a specific DQE.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.SetDbProviderFactoryParameterData(System.String,System.String,System.String)">
            <summary>
            Sets the db provider factory parameter data. This will influence which DbProviderFactory is used and which enum types the field persistence info
            field type names are resolved to.
            </summary>
            <param name="dbProviderFactoryInvariantName">Name of the db provider factory invariant.</param>
            <param name="dbProviderSpecificEnumTypeName">Name of the db provider specific enum type.</param>
            <param name="dbProviderSpecificEnumTypePropertyName">Name of the db provider specific enum type property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.SetDbProviderFactoryParameterData(System.String,System.Type,System.String)">
            <summary>
            Sets the db provider factory parameter data. This will influence which DbProviderFactory is used and which enum types the field persistence info
            field type names are resolved to.
            </summary>
            <param name="dbProviderFactoryInvariantName">Name of the db provider factory invariant.</param>
            <param name="dbProviderSpecificEnumType">Type of the db provider specific enum.</param>
            <param name="dbProviderSpecificEnumTypePropertyName">Name of the db provider specific enum type property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.SetParameterType(System.Data.Common.DbParameter,System.String)">
            <summary>
            Sets the ADO.NET provider specific Enum type of the parameter, using the string presentation specified.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterType">Type of the parameter as string.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.InitializeEnumTypeCache">
            <summary>
            Initializes the enum type cache.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.FactoryToUse">
            <summary>
            Gets the DbProviderFactory to use for creating elements for the DQE
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbProviderFactoryInfo.FactoryForReflection">
            <summary>
            Gets the factory to use for reflection. Normally this is the same factory as FactoryToUse, but in case of when profilers have
            wrapped / injected their own factories, the factory to use for reflection is the real factory of the ado.net provider, while FactoryToUse is the
            factory returned by the profiler.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo">
            <summary>
            General container class for static field information which is readonly at runtime and which is equal for all instances of a 
            given field. This information is shared among all instances of an entity, and therefore saves a lot of memory at runtime.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo">
            <summary>
            General interface for static entity field information and isn't related to persistence info.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.Name">
            <summary>
            The name of the field. Name cannot be of zero length nor can they consist of solely spaces. Leading and trailing spaces are trimmed.
            </summary>
            <exception cref="T:System.ArgumentException">The value specified for Name is invalid.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.DataType">
            <summary>
            The <see cref="T:System.Type"/> of the values of this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.IsPrimaryKey">
            <summary>
            If set to true, in the constructor, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.IsNullable">
            <summary>
            Will be true if this field can be set to NULL in the database, false otherwise. The Field Validation logic in an entity will use this
            flag to check if the field indeed can be set to NULL or not. Set by constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.FieldIndex">
            <summary>
            Gets the field index related to this IEntityField, so the field can be used to retrieve the field index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.ContainingObjectName">
            <summary>
            Name of the containing object this field belongs to (entity or typed view). This name is required to retrieve persistence information in Adapter
            Set via constructor. This name is also used by EntityRelation to determine alias - table connection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.IsForeignKey">
            <summary>
            If set to true, in the constructor, this field is part of a foreign key. This field is not used in LLBLGen Pro's code, however
            can be useful in user code.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.IsReadOnly">
            <summary>
            If set to true, in the constructor, no changes can be made to this field. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.MaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            Value initially set for this field is the length of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.Scale">
            <summary>
            The scale of the value for this field. 
            Value initially set for this field is the scale of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.Precision">
            <summary>
            The precision of the value for this field.
            Value initially set for this field is the precision of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.ActualContainingObjectName">
            <summary>
            The name of the object this field is currently in. Differs only from ContainingObjectName if the field instance is in a subtype while it is
            originally defined in a supertype. 
            </summary>
            <example>EmployeeEntity.Name and a subtype, ClerkEntity, inherits this field. For ClerkEntity.Name ContainingObjectName is still 'EmployeeEntity'
            however ActualContainingObjectName is 'ClerkEntity'.</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo.IsInMultiTargetEntity">
            <summary>
            Flag to signal if the field is in a multi-target entity. Used for alias production during query building in scenario's with inheritance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.#ctor(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="containingObjectName">Name of the containing object.</param>
            <param name="dataType">Type of the data.</param>
            <param name="isPrimaryKey">if set to <c>true</c> [is primary key].</param>
            <param name="isForeignKey">if set to <c>true</c> [is foreign key].</param>
            <param name="isReadOnly">if set to <c>true</c> [is read only].</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="fieldIndex">Index of the field.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="scale">The scale.</param>
            <param name="precision">The precision.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.CreateClone(System.String,System.Boolean)">
            <summary>
            Creates a clone of this FieldInfo object and adds 2 new elements: actualContainingObjectName and isInMultiTargetEntity
            </summary>
            <param name="actualContainingObjectName">Name of the actual containing object.</param>
            <param name="isInMultiTargetEntity">if set to <c>true</c> [is in multi target entity].</param>
            <returns>deep copy clone of this entity wit 2 new info elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.CreateClone(System.String,System.String,System.Boolean)">
            <summary>
            Creates a clone of this FieldInfo object and adds 2 new elements: actualContainingObjectName and isInMultiTargetEntity. It
            also sets the containingobjectname to the name specified.
            </summary>
            <param name="containingObjectName">Name of the containing object.</param>
            <param name="actualContainingObjectName">Name of the actual containing object.</param>
            <param name="isInMultiTargetEntity">if set to <c>true</c> [is in multi target entity].</param>
            <returns>
            deep copy clone of this entity wit 2 new info elements
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.SetActualContainingObjectName(System.String)">
            <summary>
            Sets the name of the actual containing object.
            </summary>
            <param name="actualContainingObjectName">Name of the actual containing object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.SetIsInMultiTargetEntity(System.Boolean)">
            <summary>
            Sets the is in multi target entity.
            </summary>
            <param name="isInMultiTargetEntity">if set to <c>true</c> [is in multi target entity].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.InitClass(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Inits the class.
            </summary>
            <param name="name">The name.</param>
            <param name="containingObjectName">Name of the containing object.</param>
            <param name="dataType">Type of the data.</param>
            <param name="isPrimaryKey">if set to <c>true</c> [is primary key].</param>
            <param name="isForeignKey">if set to <c>true</c> [is foreign key].</param>
            <param name="isReadOnly">if set to <c>true</c> [is read only].</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="fieldIndex">Index of the field.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="scale">The scale.</param>
            <param name="precision">The precision.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.Name">
            <summary>
            The name of the field. Name cannot be of zero length nor can they consist of solely spaces. Leading and trailing spaces are trimmed.
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">The value specified for Name is invalid.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.DataType">
            <summary>
            The <see cref="T:System.Type"/> of the values of this field.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.IsPrimaryKey">
            <summary>
            If set to true, in the constructor, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.IsNullable">
            <summary>
            Will be true if this field can be set to NULL in the database, false otherwise. The Field Validation logic in an entity will use this
            flag to check if the field indeed can be set to NULL or not. Set by constructor.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.FieldIndex">
            <summary>
            Gets the field index related to this IEntityField, so the field can be used to retrieve the field index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.ContainingObjectName">
            <summary>
            Name of the containing object this field belongs to (entity or typed view). This name is required to retrieve persistence information in Adapter
            Set via constructor. This name is also used by EntityRelation to determine alias - table connection.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.IsForeignKey">
            <summary>
            If set to true, in the constructor, this field is part of a foreign key. This field is not used in LLBLGen Pro's code, however
            can be useful in user code.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.IsReadOnly">
            <summary>
            If set to true, in the constructor, no changes can be made to this field.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.MaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            Value initially set for this field is the length of the database column this field is mapped on.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.Scale">
            <summary>
            The scale of the value for this field.
            Value initially set for this field is the scale of the database column this field is mapped on.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.Precision">
            <summary>
            The precision of the value for this field.
            Value initially set for this field is the precision of the database column this field is mapped on.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.ActualContainingObjectName">
            <summary>
            The name of the object this field is currently in. Differs only from ContainingObjectName if the field instance is in a subtype while it is
            originally defined in a supertype. 
            </summary>
            <example>EmployeeEntity.Name and a subtype, ClerkEntity, inherits this field. For ClerkEntity.Name ContainingObjectName is still 'EmployeeEntity'
            however ActualContainingObjectName is 'ClerkEntity'.</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfo.IsInMultiTargetEntity">
            <summary>
            Flag to signal if the field is in a multi-target entity. Used for alias production during query building in scenario's with inheritance.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo">
            <summary>
            Generic class which holds the generic information for entity field persistence of an entity field. Instances of this interface
            are passed to logic with an instance of the IEntityFieldCore interface. SelfServicing implements both interfaces in one interface: IEntityField.
            Generic
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo">
            <summary>
            Interface which holds the generic information for entity field persistence of an entity field. Instances of this interface
            are passed to logic with an instance of the IEntityFieldCore interface. SelfServicing implements both interfaces in one interface: IEntityField.
            Generic
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceCatalogName">
            <summary>
            The name of the catalog the SourceSchemaName is located in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceSchemaName">
            <summary>
            The name of the schema which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceObjectName"/>. Schema is used to generate SQL on the fly. 
            A common schema name in SqlServer is f.e. 'dbo'.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceObjectName">
            <summary>
            The name of the source object which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnName"/>. Can be a view or a table (or synonym of those). 
            Used to generate SQL on the fly.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnName">
            <summary>
            The name of the corresponding column in a view or table for an entityfield. This name is used to map a column in a resultset onto the entity field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnMaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            ColumnMaxLength
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnDbType">
            <summary>
            The type of the Column mapped onto the EntityField(2). The value stored here is the string representation of the enum value of the type, e.g.
            SqlDbType.Int will result in "Int"
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnIsNullable">
            <summary>
            Flag if the Column mapped onto the entityfield is nullable or not. 
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnScale">
            <summary>
            The scale of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnPrecision">
            <summary>
            The precision of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IsIdentity">
            <summary>
            If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IdentityValueSequenceName">
            <summary>
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IsIdentity"/> is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            this value is used to specify a new value and to retrieve the new value. Is undefined when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IsIdentity"/> is set to false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.TypeConverterToUse">
            <summary>
            Gets the type converter to use. Only set through constructor and when a conversion is required from the .NET type returned by the 
            ADO.NET provider and the defined .NET type for this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.ActualDotNetType">
            <summary>
            The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor">
            <summary>
            CTor. Necessary for serialization. Do not use this CTor in code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.String,System.ComponentModel.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="typeConverterToUse">The type converter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly.
            A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table.
            Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for the corresponding entity/view field. This name is used
            to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped is nullable or not.</param>
            <param name="sourceColumnDbType">The type of the Column mapped onto the EntityField(2). The value stored here is the string representation of the enum value of the type, e.g.
            SqlDbType.Int will result in "Int"</param>
            <param name="sourceColumnMaxLength">The maximum length of the value for this column (string/binary data).
            Is ignored for columns which hold non-string and non-binary values.</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act
            accordingly (i.e.: as the target database handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a
            sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which
            supplies the value for the column. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully
            inserted, however on Oracle f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when
            isIdentity is set to false.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="sourceCatalogName">The name of the catalog the sourceSchemaName is in.</param>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly.
            A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table. 
            Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for the corresponding entity/view field. This name is used 
            to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped is nullable or not. </param>
            <param name="sourceColumnDbType">The type of the Column mapped onto the EntityField(2). The value stored here is the string representation of the enum value of the type, e.g.
            SqlDbType.Int will result in "Int"</param>
            <param name="sourceColumnMaxLength">The maximum length of the value for this column (string/binary data). 
            Is ignored for columns which hold non-string and non-binary values.</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act 
            accordingly (i.e.: as the target database handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a 
            sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which 
            supplies the value for the column. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully 
            inserted, however on Oracle f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when 
            isIdentity is set to false.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. Does custom serialization so event handlers do not get serialized.
            </summary>
            <param name="info">See ISerializable</param>
            <param name="context">See ISerialilzable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SetTypeConverter(System.ComponentModel.TypeConverter)">
            <summary>
            Sets the type converter.
            </summary>
            <param name="typeConverterToSet">The type converter to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.InitClass(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            Initializes the class' member variables. for parameter descriptions, see the constructor(s).
            </summary>
            <param name="sourceCatalogName">Name of the source catalog.</param>
            <param name="sourceSchemaName">Name of the source schema.</param>
            <param name="sourceObjectName">Name of the source object.</param>
            <param name="sourceColumnName">Name of the source column.</param>
            <param name="isSourceColumnNullable"><see langword="true"/> if [is source column nullable]; otherwise, <see langword="false"/>.</param>
            <param name="sourceColumnDbType">Type of the source column db.</param>
            <param name="sourceColumnMaxLength">Length of the source column max.</param>
            <param name="sourceColumnScale">Source column scale.</param>
            <param name="sourceColumnPrecision">Source column precision.</param>
            <param name="isIdentity"><see langword="true"/> if [is identity]; otherwise, <see langword="false"/>.</param>
            <param name="identityValueSequenceName">Name of the identity value sequence.</param>
            <param name="typeConverterToUse">Type converter to use.</param>
            <param name="actualDotNetType">Type of the actual dot net.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.ActualDotNetType">
            <summary>
            The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceCatalogName">
            <summary>
            The name of the catalog the SourceSchemaName is located in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceSchemaName">
            <summary>
            The name of the schema which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceObjectName"/>. Schema is used to generate SQL on the fly. 
            A common schema name in SqlServer is f.e. 'dbo'.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceObjectName">
            <summary>
            The name of the source object which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnName"/>. Can be a view or a table. Used to generate SQL on the fly.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnName">
            <summary>
            The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnMaxLength">
            <summary>
            The maximum length of the value of this entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            ColumnMaxLength
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnDbType">
            <summary>
            The type of the Column mapped onto the EntityField(2). The value stored here is the string representation of the enum value of the type, e.g.
            SqlDbType.Int will result in "Int"
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnIsNullable">
            <summary>
            Flag if the Column mapped onto the entityfield is nullable or not. 
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnScale">
            <summary>
            The scale of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnPrecision">
            <summary>
            The precision of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IsIdentity">
            <summary>
            If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IdentityValueSequenceName">
            <summary>
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IsIdentity"/> is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IsIdentity"/> is set to false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.TypeConverterToUse">
            <summary>
            Gets the type converter to use. Only set through constructor and when a conversion is required from the .NET type returned by the 
            ADO.NET provider and the defined .NET type for this field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo">
            <summary>
            Simple class which contains the inheritance information of an entity, and which is produced by an inheritanceinfoprovider.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo">
            <summary>
            Interface for objects which specify inheritance information for a certain entity. Instances of this interface are produced by
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetInheritanceInfo(System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.HierarchyType">
            <summary>
            Gets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.RelationsToHierarchyRoot">
            <summary>
            Gets the relations to hierarchy root, starting at the root, to the owner entity, INNER JOINed
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.SuperTypeEntityName">
            <summary>
            Gets the name of the super type entity. Example: "CustomerEntity"
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName">
            <summary>
            The name of the entity which owns this information, of which this object belongs to.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.EntityNamesOnHierarchyPath">
            <summary>
            List with all the entity names on the path to the root, starting with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/> and ending with the 
            root entity name of the hierarchy. If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/> entity is a root entity, this collection contains one name: <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.EntityNamesOfPathsToLeafs">
            <summary>
            List with all the entity names on the paths from the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/> entity to all the leafs in the hierarchy below the 
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/>. If the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/> is a leaf, this list is empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.DiscriminatorColumnIndex">
            <summary>
            Gets the index of the discriminator column.
            </summary>
            <value>0 or higher for an entity in a TargetPerEntityHierarchy, otherwise undefined.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.DiscriminatorColumnValue">
            <summary>
            Gets the discriminator column value.
            </summary>
            <value>The discriminator value for the entity of this inheritance info, or undefined if the entity is not in a TargetPerEntityHierarchy.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.TypeFilterTargetPerEntityHierarchy">
            <summary>
            Gets the type filter if the entity which owns this information is in a TargetPerEntityHierarchy, null otherwise.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.#ctor(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection,System.Int32,System.Object,System.Collections.Generic.List{System.String},SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo"/> class.
            </summary>
            <param name="superTypeEntityName">Name of the super type entity.</param>
            <param name="ownerEntityName">Name of the owner entity.</param>
            <param name="hierarchyType">Type of the hierarchy.</param>
            <param name="relationsToHierarchyRoot">Relations to hierarchy root.</param>
            <param name="discriminatorColumnIndex">Index of the discriminator column.</param>
            <param name="discriminatorColumnValue">Discriminator column value.</param>
            <param name="entityNamesOnHierarchyPath">Entity names on hierarchy path.</param>
            <param name="typeFilterTargetPerEntityHierarchy">The type filter target per entity hierarchy.</param>
            <param name="entityNamesOfPathsToLeafs">The entity names of paths to leafs.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.HierarchyType">
            <summary>
            Gets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.RelationsToHierarchyRoot">
            <summary>
            Gets the relations to hierarchy root, starting at the root, to the owner entity, INNER JOINed
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.SuperTypeEntityName">
            <summary>
            Gets the name of the super type entity. Example: "CustomerEntity"
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName">
            <summary>
            The name of the entity which owns this information, of which this object belongs to.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.DiscriminatorColumnIndex">
            <summary>
            Gets the index of the discriminator column.
            </summary>
            <value>0 or higher for an entity in a TargetPerEntityHierarchy, otherwise undefined.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.DiscriminatorColumnValue">
            <summary>
            Gets the discriminator column value.
            </summary>
            <value>The discriminator value for the entity of this inheritance info, or undefined if the entity is not in a TargetPerEntityHierarchy.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.EntityNamesOnHierarchyPath">
            <summary>
            Readonly arraylist with all teh entity names on the path to the root, starting with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/> and ending with the 
            root entity name of the hierarchy. If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/> entity is a root entity, this collection contains one name: <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.EntityNamesOfPathsToLeafs">
            <summary>
            List with all the entity names on the paths from the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/> entity to all the leafs in the hierarchy below the 
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/>. If the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/> is a leaf, this list is empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.TypeFilterTargetPerEntityHierarchy">
            <summary>
            Gets the type filter if the entity which owns this information is in a TargetPerEntityHierarchy, null otherwise.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall">
            <summary>
            Class which defines a stored procedure call, used in the generated code to call an Action or Retrieval stored procedure.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessCore,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall"/> class.
            </summary>
            <param name="dataAccessProvider">The data access provider.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="mappedCallName">Name of the mapped call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.AddParameter(System.String,System.String,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Object)">
            <summary>
            Adds a new parameter to the call
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="typeName">Name of the type, which is the ADO.NET type enum value string representation, e.g. "VarChar"</param>
            <param name="size">The size.</param>
            <param name="direction">The direction.</param>
            <param name="isNullable">value for the IsNullable flag of the parameter</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="value">The value.</param>
            <returns>this instance to create a fluent interface</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.AddReturnValueParameter(System.String)">
            <summary>
            Adds a return value parameter. If the stored procedure returns an integer value (possible in some databases) as return value, use this
            method to add such a parameter to the call
            </summary>
            <param name="integerTypeName">Name of the integer type, e.g. "Int".</param>
            <returns>this instance to create a fluent interface</returns>
            <remarks>Obtain the value by calling GetOutputValue with the proper parameter index.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.FillDataSet">
            <summary>
            Fills a new DataSet with name equal to the specified mappedCallName with the results of the stored procedure when called.
            </summary>
            <returns>filled new DataSet</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.FillDataTable">
            <summary>
            Fills a new DataTable with name equal to the specified mappedCallName with the results of the stored procedure when called.
            </summary>
            <returns>filled new DataTable</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.Call">
            <summary>
            Calls the stored procedure using the specified dataAccessProvider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.ToRetrievalQuery">
            <summary>
            Creates a RetrievalQuery from the stored procedure call.
            </summary>
            <returns>ready to use IRetrievalQuery object to call the stored procedure</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.GetParameterValue``1(System.Int32)">
            <summary>
            Gets the value of the parameter at the index specified
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="parameterIndex">Index of the parameter.</param>
            <returns>the value of the parameter. If the parameter is null, null is returned if TValue is a Nullable(Of T) type, otherwise the default
            value for the type. If TValue is a string, the default value is string.Empty. If TValue is a Guid, the default value is an empty guid, if TValue
            is a byte array, the default value is a new, empty array.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.StoredProcedureCall.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor">
            <summary>
            Utility class which operates on numeric values and which applies arithmetic operations.  
            </summary>
            <remarks>This class couldn't be done with generics, because Microsoft didn't implement a where clause facility to specify operators, so
            it's impossible to apply operators like + or - onto generic typed parameters. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Object)">
            <summary>
            Start method for the arithmetic operation interpreters. From here the type specific versions are called.
            </summary>
            <param name="leftOperandValue">The left operand value.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">The right operand value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Int32)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Byte,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Byte)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.SByte,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.SByte)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Int16,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Int16)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.UInt16,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.UInt16)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Int64)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.UInt64,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.UInt64)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Single,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Single)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Double,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Double)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.NumericValueOperatorExecutor.PerformArithmethicOperation(System.Decimal,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Decimal)">
            <summary>
            Performs an arithmetic operation on the operands passed in. The operator executed is the operator of this expression.
            </summary>
            <param name="leftOperandValue">left operand</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="rightOperandValue">right operand</param>
            <returns>result of the arithmetic operation</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath">
            <summary>
            PrefetchPath class, which specifies a prefetch path to fetch related entities during a fetch.
            SelfServicing specific.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath">
            <summary>
            Interface definition for the PrefetchPath type, which specifies a prefetch path to fetch related entities during a fetch.
            SelfServicing specific.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore">
            <summary>
            Core interface for prefetch paths
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore.Count">
            <summary>
            Returns the number of elenents in this object
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.UseRootMaxLimitAndSorterInPrefetchPathSubQueries">
            <summary>
            Flag to switch off the usage of the max limit and sorter used to fetch the root of the path in subqueries.
            The root limit and sorter is added to the subquery filtering on the root entities in v2.5 by default as an optimization.
            Some queries/databases can suffer from this, so this should be optional. To switch it off, add a line to the config file
            appSettings section: useRootMaxLimitAndSorterInPrefetchPathSubQueries. Default is false.
            </summary>
            <remarks>This optimization is switched off in v2.5. A fix is necessary in v2.6 for some situations. Enabling this
            could make some queries fail at runtime on sqlserver.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.#cctor">
            <summary>
            Static CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="rootEntityType">the entity type enum value for the entity this path is for.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.#ctor(System.Enum)">
            <summary>
            CTor
            </summary>
            <param name="rootEntityType">the entity type enum value for the entity this path is for.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.SetGraphLevel(System.Int32)">
            <summary>
            Sets the graph level.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:System.Collections.CollectionBase"/> instance.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.GraphLevel">
            <summary>
            Gets or sets the graph level.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2">
            <summary>
            PrefetchPath class, which specifies a prefetch path to fetch related entities during a fetch.
            Adapter specific.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2">
            <summary>
            Interface definition for the PrefetchPath2 type, which specifies a prefetch path to fetch related entities during a fetch.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.UseRootMaxLimitAndSorterInPrefetchPathSubQueries">
            <summary>
            Flag to switch off the usage of the max limit and sorter used to fetch the root of the path in subqueries.
            The root limit and sorter is added to the subquery filtering on the root entities in v2.5 by default as an optimization.
            Some queries/databases can suffer from this, so this should be optional. To switch it off, add a line to the config file
            appSettings section: useRootMaxLimitAndSorterInPrefetchPathSubQueries. Default is false. 
            </summary>
            <remarks>This optimization is switched off in v2.5. A fix is necessary in v2.6 for some situations. Enabling this
            could make some queries fail at runtime on sqlserver.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.#cctor">
            <summary>
            Static CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="rootEntityType">the entity type enum value for the entity this path is for.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.#ctor(System.Enum)">
            <summary>
            CTor
            </summary>
            <param name="rootEntityType">the entity type enum value for the entity this path is for.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <param name="excludedIncludedFields">The list of IEntityField2 objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.SetGraphLevel(System.Int32)">
            <summary>
            Sets the graph level.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:System.Collections.CollectionBase"/> instance.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.GraphLevel">
            <summary>
            Gets or sets the graph level.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement">
            <summary>
            PrefetchPathElement class. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement">
            <summary>
            Interface definition for the PrefetchPathElement type, which instances are used in a PrefetchPath instance.
            Selfservicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore">
            <summary>
            Interface definition for the core of a PrefetchPathElement instances contained in a PrefetchPath. 
            This interface is used as a base interface for the specialised IPrefetchPathElement (selfservicing) and IPrefetchPathElement2 (Adapter).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.Relation">
            <summary>
            The relation between the destination (parent) entity and the entity to fetch with this path element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.DestinationEntityType">
            <summary>
            The EntityType enum value for the entity the entities to fetch are to be stored in. 
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.ToFetchEntityType">
            <summary>
            The EntityType enum value for the entity to fetch defined by this path element.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.MaxAmountOfItemsToReturn">
            <summary>
            The maximum amount of entities to set per destination instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.Sorter">
            <summary>
            The sort expression to sort the entities per destination instance. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.Filter">
            <summary>
            The filter predicate expression to fetch the ToFetch entities. Initially this is set in the constructor.
            Add additional predicates to this predicate expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.FilterRelations">
            <summary>
            The relations to use in the filters. Initially this is an empty collection, as the fetches use subqueries. 
            Add additional relations to this relation collection to have multi-entity filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.PropertyName">
            <summary>
            The name of the property which is the destination for the entities fetched by the definition of this path element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.TypeOfRelation">
            <summary>
            The type of relation between the entity to fetch and the entity which will hold the entity to fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.GraphLevel">
            <summary>
            Gets or sets the graph level.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.ExcludedIncludedFields">
            <summary>Gets / sets the list of IEntityFieldCore objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor. Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement"/> instance.
            </summary>
            <param name="retrievalCollection">Retrieval collection.</param>
            <param name="relation">Relation.</param>
            <param name="destinationEntityType">Destination entity type.</param>
            <param name="toFetchEntityType">To fetch entity type.</param>
            <param name="maxAmountOfItemsToReturn">Max amount of items to return.</param>
            <param name="sorter">Sorter.</param>
            <param name="filter">Filter.</param>
            <param name="filterRelations">Filter relations.</param>
            <param name="propertyName">Name of the property the entities fetched by the definition of this path element are stored.</param>
            <param name="typeOfRelation">The type of relation between the entity to fetch and the entity which will hold the entity to fetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Equals(System.Object)">
            <summary>
            Compares the object passed in. Performs a compare on Property name, destination entity type and tofetch entity type
            </summary>
            <param name="obj">Obj.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.SD#LLBLGen#Pro#ORMSupportClasses#IPrefetchPathElementCore#SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.SD#LLBLGen#Pro#ORMSupportClasses#IPrefetchPathElementCore#RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Relation">
            <summary>
            The relation between the destination (parent) entity and the entity to fetch with this path element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.DestinationEntityType">
            <summary>
            The EntityType enum value for the entity the entities to fetch are to be stored in. 
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.ToFetchEntityType">
            <summary>
            The EntityType enum value for the entity to fetch defined by this path element.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.MaxAmountOfItemsToReturn">
            <summary>
            The maximum amount of entities to set per destination instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Sorter">
            <summary>
            The sort expression to sort the entities per destination instance. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Filter">
            <summary>
            The filter predicate expression to fetch the ToFetch entities. Initially this is set in the constructor.
            Add additional predicates to this predicate expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.FilterRelations">
            <summary>
            The relations to use in the filters. Initially this is an empty collection, as the fetches use subqueries. 
            Add additional relations to this relation collection to have multi-entity filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.PropertyName">
            <summary>
            The name of the property which is the destination for the entities fetched by the definition of this path element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.TypeOfRelation">
            <summary>
            The type of relation between the entity to fetch and the entity which will hold the entity to fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.GraphLevel">
            <summary>
            Gets or sets the graph level.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.ExcludedIncludedFields">
            <summary>Gets / sets the list of IEntityFieldCore objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2">
            <summary>
            PrefetchPathElement2 class. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2">
            <summary>
            Interface definition for the PrefetchPathElement2 type, which instances are used in a PrefetchPath2 instance.
            Adapter specific
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2.EntityFactoryToUse">
            <summary>
            The factory to use during the fetch of the entities defined by this path element. If this property is not set, the entity factory
            in the RetrievalCollection is used. Use this property to override the default factory, 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor. Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement"/> instance.
            </summary>
            <param name="retrievalCollection">Retrieval collection.</param>
            <param name="relation">Relation.</param>
            <param name="destinationEntityType">Destination entity type.</param>
            <param name="toFetchEntityType">To fetch entity type.</param>
            <param name="maxAmountOfItemsToReturn">Max amount of items to return.</param>
            <param name="sorter">Sorter.</param>
            <param name="filter">Filter.</param>
            <param name="filterRelations">Filter relations.</param>
            <param name="entityFactoryToUse"></param>
            <param name="propertyName">Name of the property the entities fetched by the definition of this path element are stored.</param>
            <param name="typeOfRelation">The type of relation between the entity to fetch and the entity which will hold the entity to fetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Equals(System.Object)">
            <summary>
            Compares the object passed in. Performs a compare on Property name, destination entity type and tofetch entity type
            </summary>
            <param name="obj">Obj.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.SD#LLBLGen#Pro#ORMSupportClasses#IPrefetchPathElementCore#SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.SD#LLBLGen#Pro#ORMSupportClasses#IPrefetchPathElementCore#RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Relation">
            <summary>
            The relation between the destination (parent) entity and the entity to fetch with this path element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.DestinationEntityType">
            <summary>
            The EntityType enum value for the entity the entities to fetch are to be stored in. 
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.ToFetchEntityType">
            <summary>
            The EntityType enum value for the entity to fetch defined by this path element.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.MaxAmountOfItemsToReturn">
            <summary>
            The maximum amount of entities to set per destination instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Sorter">
            <summary>
            The sort expression to sort the entities per destination instance. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Filter">
            <summary>
            The filter predicate expression to fetch the ToFetch entities. Initially this is set in the constructor.
            Add additional predicates to this predicate expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.FilterRelations">
            <summary>
            The relations to use in the filters. Initially this is an empty collection, as the fetches use subqueries. 
            Add additional relations to this relation collection to have multi-entity filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.EntityFactoryToUse">
            <summary>
            The factory to use during the fetch of the entities defined by this path element. If this property is not set, the entity factory
            in the RetrievalCollection is used. Use this property to override the default factory, 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.PropertyName">
            <summary>
            The name of the property which is the destination for the entities fetched by the definition of this path element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.TypeOfRelation">
            <summary>
            The type of relation between the entity to fetch and the entity which will hold the entity to fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.GraphLevel">
            <summary>
            Gets or sets the graph level.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.ExcludedIncludedFields">
            <summary>Gets / sets the list of IEntityFieldCore objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery">
            <summary>
            Implementation of the ActionQuery class. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Query">
            <summary>
            Abstract query class for the various query objects in the framework.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IQuery">
            <summary>
            The interface for dynamic created queries.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the parameter to the query's command.
            </summary>
            <param name="parameterToAdd">The parameter to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.AddParameters(System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds the parameters to the query's command.
            </summary>
            <param name="parametersToAdd">The parameters to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.AddParameterFieldRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Data.Common.DbParameter,System.ComponentModel.TypeConverter)">
            <summary>
            Adds a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to the collection of <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.ParameterFieldRelations"/>. An output parameter can be
            stored once in the collection.
            </summary>
            <param name="field">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship.</param>
            <param name="parameter">The Parameter in the relationship.</param>
            <param name="typeConverterToUse">The type converter to use, if applicable (can be null)</param>
            <returns>The ParameterFieldRelation added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.ReflectOutputValuesInRelatedFields">
            <summary>
            Will walk all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances of this query and reflect the parameter values in the related fields.
            Only output parameters are taken into account.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.WireTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Wires the command of this query with the transaction passed in.
            </summary>
            <param name="transactionToWire">the transaction to wire the command with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeoutInterval">Timeout interval, in seconds.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.SetCommandText(System.String)">
            <summary>
            Sets the command text to the text specified
            </summary>
            <param name="commandText">The command text.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Connection">
            <summary>
            The connection object to use with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Command"/>
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Command">
            <summary>
            The command used for this query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Parameters">
            <summary>
            The list of parameters used in the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Command"/>. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.ParameterFieldRelations">
            <summary>
            Array list with the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances for the relations between IEntityFields and output parameters.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.#ctor(System.Data.Common.DbCommand)">
            <summary>
            CTor
            </summary>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
            <summary>
            CTor
            </summary>
            <param name="connectionToUse">Connection object to use</param>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.ReflectOutputValuesInRelatedFields">
            <summary>
            Will walk all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances of this query and reflect the parameter values in the related fields.
            Only output parameters are taken into account. Used by Insert queries which retrieve Identity / sequence values back from the database
            after a succesful insert.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.ToString">
            <summary>
            Overloaded ToString implementation
            </summary>
            <returns>Returns a complete textual representation of the command stored. The textual representation
            will not include parameter values, but will list their names and types.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the parameter to the query's command.
            </summary>
            <param name="parameterToAdd">The parameter to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.AddParameters(System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds the parameters to the query's command.
            </summary>
            <param name="parametersToAdd">The parameters to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.AddParameterFieldRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Data.Common.DbParameter,System.ComponentModel.TypeConverter)">
            <summary>
            Adds a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to the collection of <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.ParameterFieldRelations"/>. An output parameter can be
            stored once in the collection.
            </summary>
            <param name="field">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship.</param>
            <param name="parameter">The Parameter in the relationship.</param>
            <param name="typeConverterToUse">The type converter to use, if applicable (can be null)</param>
            <returns>The ParameterFieldRelation added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.WireTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Wires the command of this query with the transaction passed in.
            </summary>
            <param name="transactionToWire">the transaction to wire the command with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.SetCommandText(System.String)">
            <summary>
            Sets the command text to the text specified
            </summary>
            <param name="commandText">The command text.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeoutInterval">Timeout interval, in seconds.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.Dispose(System.Boolean)">
            <summary>
            Performs the dispose action.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.GetExceptionInfo(System.Data.Common.DbException)">
            <summary>
            Gets the exception info using the info retriever set to this query object.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Connection">
            <summary>
            The connection object to use with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Command"/>
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Command">
            <summary>
            The command used for this query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Parameters">
            <summary>
            The list of parameters used in the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Command"/>. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.ParameterFieldRelations">
            <summary>
            List with the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances for the relations between entity fields and output parameters.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery">
            <summary>
            Interface for action queries. These queries do not return a resultset. Action queries execute Insert, Delete and Update statements.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean)">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a 
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. </param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.Execute">
            <summary>
            Executes the query contained by the IQuery instance. 
            </summary>
            <returns>The number of rows affected (if applicable), otherwise 0.</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.SequenceRetrievalQueries">
            <summary>
            Array list of ISequenceRetrievalQuery objects which are used to produce sequence values for input/output parameters in
            this query. Normally this collection is empty, as it is only used when the target database provider doesn't support batched
            queries (firebird/access/sqlce and others). Execute will wire the transaction if present. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.ParameterParameterRelations">
            <summary>
            Gets the parameter parameter relations for this IActionQuery. These definitions are used for insert queries in multi-target entity inserts.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.#ctor(System.Data.Common.DbCommand)">
            <summary>
            CTor
            </summary>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
            <summary>
            CTor
            </summary>
            <param name="connectionToUse">Connection object to use</param>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean)">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a 
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. </param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.ToString">
            <summary>
            Produces a string representation of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.Execute">
            <summary>
            Executes the query contained by the IQuery instance. If there was nothing to execute, 0 is returned.
            </summary>
            <returns>The number of rows affected (if applicable), otherwise 0.</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.Dispose(System.Boolean)">
            <summary>
            Performs the dispose action.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.SyncParameterParameterRelations">
            <summary>
            Syncs the parameter parameter relations.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.SequenceRetrievalQueries">
            <summary>
            Array list of ISequenceRetrievalQuery objects which are used to produce sequence values for input/output parameters in
            this query. Normally this collection is empty, as it is only used when the target database provider doesn't support batched
            queries (firebird/access/sqlce and others). Execute will wire the transaction if present. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.ParameterParameterRelations">
            <summary>
            Gets the parameter parameter relations for this IActionQuery. These definitions are used for insert queries in multi-target entity inserts.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement`1">
            <summary>
            Internal class to store entities in an action queue (insertqueue or update queue)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement`1.#ctor(`0,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="entity">Entity.</param>
            <param name="additionalUpdateFilter">Additional update filter.</param>
            <param name="refetchAfterAction"><see langword="true"/> if [refetch after action]; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement`1.RefetchAfterAction">
            <summary>
            Gets / sets refetchAfterAction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement`1.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement`1.AdditionalUpdateFilter">
            <summary>
            Gets / sets additionalUpdateFilter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate">
            <summary>
            Predicate class which performs an aggregate function on a set of entities and returns true or false depending if that aggregated value
            matches a specified expression. The set of entities this predicate is applied on are the elements of a member property with the name specified which 
            match the specified filter. 
            </summary>
            <remarks>Meant for in-memory filtering. Can't be used in database targeting filters.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Predicate">
            <summary>
            Abstract base implementation of the IPredicate interface.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate">
            <summary>
            Interface for a predicate. Predicates are expressions which result in true or false, and which are used in WHERE clauses.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
            <remarks>IPredicateExpression instances return a list of the elements in the predicate expression, which can be predicateexpressions as well
            so it's not recursive.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.Parameters">
            <summary>
            The list of parameters created when the Predicate was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.Negate">
            <summary>
            Flag for setting the Predicate to negate itself, i.e. to add 'NOT' to its result.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.InstanceType">
            <summary>
            The PredicateType of this instance. Used to determine the instance nature without a lot of casting.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
            <remarks>IPredicateExpression instances will return an empty string.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateInterpret">
            <summary>
            Interface which is used internally on a Predicate class to make the predicate interpret itself on the passed in entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateInterpret.Interpret(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets the implementing class on the entity passed in.
            </summary>
            <param name="entity"></param>
            <returns>true if the predicte resolves to true for this entity, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.op_BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.Predicate,SD.LLBLGen.Pro.ORMSupportClasses.Predicate)">
            <summary>
            Operator overload for the '&amp;' operator, to concatenate predicates together. 
            </summary>
            <param name="leftHandSide"></param>
            <param name="rightHandSide"></param>
            <returns>Predicate expression containing: leftHandSide AND righthandside</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.Predicate,SD.LLBLGen.Pro.ORMSupportClasses.Predicate)">
            <summary>
            Operator overload for the '|' operator, to concatenate predicates together
            </summary>
            <param name="leftHandSide"></param>
            <param name="rightHandSide"></param>
            <returns>Predicate expression containing: leftHandSide OR righthandside</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.op_LogicalNot(SD.LLBLGen.Pro.ORMSupportClasses.Predicate)">
            <summary>
            Operator overload for the ! operator, to negate the passed in predicate.
            </summary>
            <param name="rightHandSide">Right hand side.</param>
            <returns>passed in predicate with the negate flag toggled</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>true if the predicate interpretation resolves to true, otherwise false.</returns>
            <remarks>By default this method throws a NotSupported exception. It is only implemented on predicates which can be used 
            for in-memory filtering.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.SD#LLBLGen#Pro#ORMSupportClasses#IPredicateInterpret#Interpret(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets the implementing class on the entity passed in.
            </summary>
            <param name="entity"></param>
            <returns>
            true if the predicte resolves to true for this entity, false otherwise
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.InstanceType">
            <summary>
            The PredicateType of this instance. Used to determine the instance nature without a lot of casting.
            </summary>
            <summary>
            Gets / sets instanceType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.Parameters">
            <summary>
            The list of parameters created when the Predicate was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.Negate">
            <summary>
            Flag for setting the Predicate to negate itself, i.e. to add 'NOT' to its result.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.SelfServicing">
            <summary>
            Gets / sets selfServicing, a flag to signal if this predicate is constructed using a selfservicing constructor (field is of type IEntityField)
            Default: true;
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="functionToApply">The function to apply as aggregate function.</param>
            <param name="valueProducer">The value producer for each element in the set. The value produced by the value producer is added to the set.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="functionToApply">The function to apply as aggregate function.</param>
            <param name="valueProducer">The value producer for each element in the set. The value produced by the value producer is added to the set.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="functionToApply">The function to apply as aggregate function.</param>
            <param name="valueProducer">The value producer for each element in the set. The value produced by the value producer is added to the set.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
            <param name="negate">Negate the comparison operator outcome for the final result of this predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="functionToApply">The function to apply as aggregate function.</param>
            <param name="valueProducer">The value producer for each element in the set. The value produced by the value producer is added to the set.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
            <param name="negate">Negate the comparison operator outcome for the final result of this predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction,SD.LLBLGen.Pro.ORMSupportClasses.InterpretSetValueCallback,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="functionToApply">The function to apply as aggregate function.</param>
            <param name="valueProducerCallback">The value producer callback which is called for every entity matching the set filter and which should produce a value to aggregate.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction,SD.LLBLGen.Pro.ORMSupportClasses.InterpretSetValueCallback,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="functionToApply">The function to apply as aggregate function.</param>
            <param name="valueProducerCallback">The value producer callback which is called for every entity matching the set filter and which should produce a value to aggregate.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
            <param name="negate">Negate the comparison operator outcome for the final result of this predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicateCallback,SD.LLBLGen.Pro.ORMSupportClasses.InterpretSetValueCallback,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="aggregatorCallback">The aggregator callback which is called to aggregate over the set of values produced by the individual calls to the valueProducerCallback.</param>
            <param name="valueProducerCallback">The value producer callback which is called for every entity matching the set filter and which should produce a value to aggregate.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicateCallback,SD.LLBLGen.Pro.ORMSupportClasses.InterpretSetValueCallback,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="aggregatorCallback">The aggregator callback which is called to aggregate over the set of values produced by the individual calls to the valueProducerCallback.</param>
            <param name="valueProducerCallback">The value producer callback which is called for every entity matching the set filter and which should produce a value to aggregate.</param>
            <param name="operatorToApply">The operator to apply on the aggregated value.</param>
            <param name="operand">The value to compare the aggregated value with using the operatorToApply.</param>
            <param name="setFilter">The set filter to determine which elements in memberName form the set the aggregate function to apply on.</param>
            <param name="negate">Negate the comparison operator outcome for the final result of this predicate.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.CheckIfOperandIsNumeric(System.Object)">
            <summary>
            Checks if the passed in operand value is numeric.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformAggregateFunction(System.Collections.ArrayList)">
            <summary>
            Performs the aggregate function specified.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>true if the aggregate predicate resolves to true, otherwise false. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformCount(System.Collections.ICollection)">
            <summary>
            Performs the count function and applies the operator on it with the operand
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformCountDistinct(System.Collections.ArrayList)">
            <summary>
            Performs the count function ignoring duplicate values and applies the operator on it with the operand
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformSumDistinct(System.Collections.ArrayList)">
            <summary>
            Performs the sum distinct.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformSum(System.Collections.IList)">
            <summary>
            Performs the sum.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformMin(System.Collections.ArrayList)">
            <summary>
            Performs the min.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformMax(System.Collections.ArrayList)">
            <summary>
            Performs the max.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformAvgDistinct(System.Collections.ArrayList)">
            <summary>
            Performs the avg distinct.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.PerformAvg(System.Collections.IList)">
            <summary>
            Performs the avg.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>the operator application result</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.CreateDistinctList(System.Collections.ArrayList)">
            <summary>
            Creates a distinct list from the list of values passed in.
            </summary>
            <param name="valuesToAggregate">The values to aggregate.</param>
            <returns>a new list with all distinct values in valuesToAggregate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.ApplyOperator(System.Object)">
            <summary>
            Applies the operator on the value passed in and the set operand. Value has to be numeric, so if it's not a value type, false will be returned. 
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.MemberName">
            <summary>
            Gets / sets memberName, which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.SetFilter">
            <summary>
            Gets / sets the filter to apply to elements of the member (or the member itself in case of a single instance).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate.ValueProducer">
            <summary>
            Gets the value producer expression. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase">
            <summary>
            Abstract base class for auditors in the LLBLGen Pro system. Use this class to easily create auditors to perform auditing for you.
            </summary>
            <remarks>If you plan to use binary serialization in your application, be sure to read the recommendations in the manual about
            serialization and auditor objects.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor">
            <summary>
            Interface for the auditor to be used with entity instances at runtime. Auditors audit at runtime various actions on entities and allow automatic persistence
            of audit information in audit entities when transactions are committed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditEntityFieldGet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32)">
            <summary>
            Audits when an entity field's value is succesfully obtained from the passed in entity
            </summary>
            <param name="entity">The entity a field's value was obtained.</param>
            <param name="fieldIndex">Index of the field which value was obtained.</param>
            <remarks>Be careful when using this auditing routine, because a lot of calls will be made to this routine when data is for example shown in 
            a grid. Another thing to realize is that the audit information is stored inside the auditor which is inside an entity which might not be
            persisted/deleted later on. This means that if you use the audit data to produce entities which are then returned by GetAuditEntitiesToSave
            are never persisted if the entity this auditor is the auditor of is never persisted/deleted. In that situation, to get reliable journalling, 
            use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditEntityFieldSet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32,System.Object)">
            <summary>
            Audits when an entity field is set succesfully to a new value. 
            </summary>
            <param name="entity">The entity a field was set to a new value.</param>
            <param name="fieldIndex">Index of the field which got a new value.</param>
            <param name="originalValue">The original value of the field with the index passed in before it received a new value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditDereferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful dereference of related entity from the entity passed in. 
            </summary>
            <param name="entity">The entity of which the related entity was dereferenced from.</param>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was dereferenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditReferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful reference of related entity from the entity passed in. 
            </summary>
            <param name="entity">The entity of which the related entity was dereferenced from.</param>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was referenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditInsertOfNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful insert of a new entity into the database.
            </summary>
            <param name="entity">The entity saved successfully into the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditUpdateOfExistingEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful update of an existing entity in the database
            </summary>
            <param name="entity">The entity updated successfully in the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditDirectUpdateOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the succesful direct update of entities in the database.
            </summary>
            <param name="entity">The entity with the changed values which is used to produce the update query.</param>
            <param name="filter">The filter to filter out the entities to update. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesUpdated">The number of entities updated.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditDeleteOfEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful delete of an entity from the database
            </summary>
            <param name="entity">The entity which was deleted.</param>
            <remarks>As the entity passed in was deleted succesfully, reading values from the passed in entity is only possible in this routine. After this call, the 
            state of the entity will be reset to Deleted again and reading the fields will result in an exception. It's also recommended not to reference
            the passed in entity in any audit entity you might want to persist as the entity doesn't exist anymore in the database.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditLoadOfEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful load of an entity from the database
            </summary>
            <param name="entity">The entity which was loaded. All data of the entity which was loaded is inside the entity.</param>
            <remarks>Be careful when using this auditing routine, because the audit information is stored inside the auditor which is inside an entity 
            which might not be persisted/deleted later on. This means that if you use the audit data to produce entities which are then 
            returned by GetAuditEntitiesToSave are never persisted if the entity this auditor is the auditor of is never persisted/deleted. 
            In that situation, to get reliable journalling, use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.AuditDirectDeleteOfEntities(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the successful direct delete of entities in the database
            </summary>
            <param name="typeOfEntity">The type of entity of which entities were deleted.</param>
            <param name="filter">The filter to filter out the entities to delete. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesDeleted">The number of entities deleted.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.GetAuditEntitiesToSave">
            <summary>
            Gets the audit entities to save. Audit entities contain the audit information stored inside this auditor.
            </summary>
            <returns>The list of audit entities to save, or null if there are no audit entities to save</returns>
            <remarks>Do not remove the audit entities and audit information from this auditor when this method is called, as the transaction in which 
            the save takes place can fail and retried which will result in another call to this method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.RequiresTransactionForAuditEntities(SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction)">
            <summary>
            Method which returns true if this auditor expects to have audit entities to persist and therefore needs a transaction.
            This method is called in the situation when there's no transaction going on though one should be started right before the single-statement action
            in the case if the auditor has entities to save afterwards. It's recommended to return true if the auditor might have audit entities
            to persist after an entity save/delete/direct update/direct delete of entities. Default: true
            </summary>
            <param name="actionToStart">The single statement action which is about to be started.</param>
            <returns>
            true if a transaction should be started prior to the action to perform (entity save/delete/direct update/direct delete of entities)
            false otherwise.
            </returns>
            <remarks>If false is returned and GetAuditEntitiesToSave returns 1 or more entities, a new transaction is started to save these audit entities
            which means that this transaction isn't re-tryable if this transaction might fail.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.TransactionCommitted">
            <summary>
            The transaction with which the audit entities requested from GetAuditEntitiesToSave were saved. 
            Use this method to clear any audit data in this auditor as all audit information is persisted successfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Method to serialze audit data to XML. Use the aspects passed in to determine various aspects of the XML format.
            If the audit data consists of entity instances, be sure to pass the passed in processedObjectIDs object to the WriteXml routine of IEntity2, so
            use the overload of IEntity2.WriteXml() which accepts a reader and the processedObjectIDs. Though it's recommended not to serialize entity objects
            in audit data, keep audit data as clean as possible from entity references.
            The start element 'Auditor' has already been written, the end element /Auditor will be written for you after this routine.
            </summary>
            <param name="writer">The writer.</param>
            <param name="aspects">The aspects.</param>
            <param name="processedObjectIDs">The objectIDs of entities already serialized.</param>
            <remarks>Adapter specific.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the auditor data XML.
            </summary>
            <param name="auditorNode">The auditor node, which is the node of the Auditor element. The elements serialized by WriteXml are the children of
            this node.</param>
            <remarks>Adapter specific. Used in Verbose/Compact scenarios. For Compact25 format, use the XmlReader consuming overload.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the auditor data XML.
            </summary>
            <param name="reader">The xml reader to read the xml from. The reader is positioned on the Auditor element. 
            The elements serialized by WriteXml are the children of this element. Read all xml till the reader is positioned on the end element of the Auditor
            element</param>
            <remarks>Adapter specific, Compact25 specific. For Verbose/Compact scenario's use the XmlNode consuming overload</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IAuditor.HasDataToXmlSerialize">
            <summary>
            Gets if the auditor object has data which should be Xml serialized. If this property returns false, no serialization (and thus no deserialization) 
            will take place of the data to XML.
            </summary>
            <remarks>Used in Adapter</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditEntityFieldGet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32)">
            <summary>
            Audits when an entity field's value is succesfully obtained from the passed in entity
            </summary>
            <param name="entity">The entity a field's value was obtained.</param>
            <param name="fieldIndex">Index of the field which value was obtained.</param>
            <remarks>Be careful when using this auditing routine, because a lot of calls will be made to this routine when data is for example shown in 
            a grid. Another thing to realize is that the audit information is stored inside the auditor which is inside an entity which might not be
            persisted/deleted later on. This means that if you use the audit data to produce entities which are then returned by GetAuditEntitiesToSave
            are never persisted if the entity this auditor is the auditor of is never persisted/deleted. In that situation, to get reliable journalling, 
            use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditEntityFieldSet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32,System.Object)">
            <summary>
            Audits when an entity field is set succesfully to a new value.
            </summary>
            <param name="entity">The entity a field was set to a new value.</param>
            <param name="fieldIndex">Index of the field which got a new value.</param>
            <param name="originalValue">The original value of the field with the index passed in before it received a new value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditDereferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful dereference of related entity from the entity passed in.
            </summary>
            <param name="entity">The entity of which the related entity was dereferenced from.</param>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was dereferenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditReferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful reference of related entity from the entity passed in.
            </summary>
            <param name="entity">The entity of which the related entity was dereferenced from.</param>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was referenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditInsertOfNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful insert of a new entity into the database.
            </summary>
            <param name="entity">The entity saved successfully into the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditUpdateOfExistingEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful update of an existing entity in the database
            </summary>
            <param name="entity">The entity updated successfully in the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditDirectUpdateOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the succesful direct update of entities in the database.
            </summary>
            <param name="entity">The entity with the changed values which is used to produce the update query.</param>
            <param name="filter">The filter to filter out the entities to update. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesUpdated">The number of entities updated.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditDeleteOfEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful delete of an entity from the database
            </summary>
            <param name="entity">The entity which was deleted.</param>
            <remarks>As the entity passed in was deleted succesfully, reading values from the passed in entity is only possible in this routine. After this call, the
            state of the entity will be reset to Deleted again and reading the fields will result in an exception. It's also recommended not to reference
            the passed in entity in any audit entity you might want to persist as the entity doesn't exist anymore in the database.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditLoadOfEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Audits the successful load of an entity from the database
            </summary>
            <param name="entity">The entity which was loaded. All data of the entity which was loaded is inside the entity.</param>
            <remarks>Be careful when using this auditing routine, because the audit information is stored inside the auditor which is inside an entity 
            which might not be persisted/deleted later on. This means that if you use the audit data to produce entities which are then 
            returned by GetAuditEntitiesToSave are never persisted if the entity this auditor is the auditor of is never persisted/deleted. 
            In that situation, to get reliable journalling, use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.AuditDirectDeleteOfEntities(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the successful direct delete of entities in the database
            </summary>
            <param name="typeOfEntity">The type of entity of which entities were deleted.</param>
            <param name="filter">The filter to filter out the entities to delete. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesDeleted">The number of entities deleted.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.GetAuditEntitiesToSave">
            <summary>
            Gets the audit entities to save. Audit entities contain the audit information stored inside this auditor.
            </summary>
            <returns>
            The list of audit entities to save, or null if there are no audit entities to save
            </returns>
            <remarks>Do not remove the audit entities and audit information from this auditor when this method is called, as the transaction in which
            the save takes place can fail and retried which will result in another call to this method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.TransactionCommitted">
            <summary>
            The transaction with which the audit entities requested from GetAuditEntitiesToSave were saved.
            Use this method to clear any audit data in this auditor as all audit information is persisted successfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.RequiresTransactionForAuditEntities(SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction)">
            <summary>
            Method which returns true if this auditor expects to have audit entities to persist and therefore needs a transaction.
            This method is called in the situation when there's no transaction going on though one should be started right before the single-statement action
            in the case if the auditor has entities to save afterwards. It's recommended to return true if the auditor might have audit entities
            to persist after an entity save/delete/direct update/direct delete of entities. Default: true
            </summary>
            <param name="actionToStart">The single statement action which is about to be started.</param>
            <returns>
            true if a transaction should be started prior to the action to perform (entity save/delete/direct update/direct delete of entities)
            false otherwise.
            </returns>
            <remarks>If false is returned and GetAuditEntitiesToSave returns 1 or more entities, a new transaction is started to save these audit entities
            which means that this transaction isn't re-tryable if this transaction might fail.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Method to serialze audit data to XML. Use the aspects passed in to determine various aspects of the XML format.
            If the audit data consists of entity instances, be sure to pass the passed in processedObjectIDs object to the WriteXml routine of IEntity2, so 
            use the overload of IEntity2.WriteXml() which accepts a reader and the processedObjectIDs. Though it's recommended not to serialize entity objects
            in audit data, keep audit data as clean as possible from entity references.
            The start element 'Auditor' has already been written, the end element /Auditor will be written for you after this routine.
            </summary>
            <param name="writer">The writer.</param>
            <param name="aspects">The aspects.</param>
            <param name="processedObjectIDs">The objectIDs of entities already serialized.</param>
            <remarks>Adapter specific.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the auditor data XML.
            </summary>
            <param name="auditorNode">The auditor node, which is the node of the Auditor element. The elements serialized by WriteXml are the children of
            this node.</param>
            <remarks>Adapter specific. Used in Verbose/Compact scenarios. For Compact25 format, use the XmlReader consuming overload.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the auditor data XML.
            </summary>
            <param name="reader">The xml reader to read the xml from. The reader is positioned on the Auditor element. 
            The elements serialized by WriteXml are the children of this element. Read all xml till the reader is positioned on the end element of the Auditor
            element</param>
            <remarks>Adapter specific, Compact25 specific. For Verbose/Compact scenario's use the XmlNode consuming overload</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.GetEntityTypeValueForType(System.Type)">
            <summary>
            Gets the EntityType value as integer for the entity type passed in
            </summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the EntityType value as integer for the entity type passed in</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.AuditorBase.HasDataToXmlSerialize">
            <summary>
            Gets if the auditor object has data which should be Xml serialized. If this property returns false, no serialization (and thus no deserialization) 
            will take place of the data to XML.
            </summary>
            <remarks>Used in Adapter</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase">
            <summary>
            Abstract base class for authorizers in the LLBLGen Pro system. Use this class to easily create authorizers. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer">
            <summary>
            Interface for the authorizer to be used with entity instances at runtime. Authorizers authorize at runtime field get/set actions as well as save/load/delete
            actions on entities. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanGetFieldValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32)">
            <summary>
            Determines whether the caller can obtain the value for the field with the index specified from the entity type specified. 
            </summary>
            <param name="entity">The entity instance to obtain the value from.</param>
            <param name="fieldIndex">Index of the field to obtain the value for.</param>
            <returns>true if the caller is allowed to obtain the value, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanSetFieldValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32)">
            <summary>
            Determines whether the caller can set the value for the field with the index specified of the entity type specified. 
            </summary>
            <param name="entity">The entity instance the field is located in.</param>
            <param name="fieldIndex">Index of the field to set the value of.</param>
            <returns>true if the caller is allowed to set the value, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanLoadEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
             <summary>
             Determines whether the caller is allowed to load the data into the entity instance specified.
             </summary>
             <param name="entity">The entity instance to fill with data</param>
             <returns>true if the caller is allowed to load the data in the entity specified.</returns>
            <remarks>Data inside the entity is the data fetched from the db. If the method returns false, the entity will be reset with a new set of empty fields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanSaveNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to save the new instance passed in.
            </summary>
            <param name="entity">The entity to save.</param>
            <returns>true if the caller is allowed to save the new instance passed in, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanSaveExistingEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to save the modified existing instance passed in.
            </summary>
            <param name="entity">The entity to save.</param>
            <returns>true if the caller is allowed to save the new instance passed in, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanBatchUpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to update entities directly in the database. 
            </summary>
            <param name="entity">the entity which is passed in to the method to batch update the entities directly in the database, e.g. UpdateMulti (Selfservicing)
            or UpdateEntitiesDirectly (adapter)</param>
            <returns>true if the caller is allowed to perform the update, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanDeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to delete of the entity type passed in
            </summary>
            <param name="entity">The entity to delete.</param>
            <returns>true if the caller is allowed to delete the entity passed in, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.CanBatchDeleteEntitiesDirectly(System.Type)">
            <summary>
            Determines whether the caller is allowed to delete entities directly in the database. 
            </summary>
            <param name="typeOfEntity">the type of the entity to batch delete instances of directly in the database, e.g. DeleteMulti (Selfservicing)
            or DeleteEntitiesDirectly (adapter)</param>
            <returns>true if the caller is allowed to perform the delete, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IAuthorizer.GetFetchNewAuthorizationFailureResultHint">
            <summary>
            Gets the result hint what to do when authorization fails when fetch a new entity.
            </summary>
            <returns>any of the FetchNewAuthorizationFailureResultHint values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanGetFieldValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32)">
            <summary>
            Determines whether the caller can obtain the value for the field with the index specified from the entity type specified.
            </summary>
            <param name="entity">The entity instance to obtain the value from.</param>
            <param name="fieldIndex">Index of the field to obtain the value for.</param>
            <returns>true if the caller is allowed to obtain the value, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanSetFieldValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32)">
            <summary>
            Determines whether the caller can set the value for the field with the index specified of the entity type specified.
            </summary>
            <param name="entity">The entity instance the field is located in.</param>
            <param name="fieldIndex">Index of the field to set the value of.</param>
            <returns>true if the caller is allowed to set the value, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanLoadEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
             <summary>
             Determines whether the caller is allowed to load the data into the entity instance specified.
             </summary>
             <param name="entity">The entity instance to fill with data</param>
             <returns>true if the caller is allowed to load the data in the entity specified.</returns>
            <remarks>Data inside the entity is the data fetched from the db. If the method returns false, the entity will be reset with a new set of empty fields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanSaveNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to save the new instance passed in.
            </summary>
            <param name="entity">The entity to save.</param>
            <returns>true if the caller is allowed to save the new instance passed in, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanSaveExistingEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to save the modified existing instance passed in.
            </summary>
            <param name="entity">The entity to save.</param>
            <returns>true if the caller is allowed to save the new instance passed in, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanBatchUpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to update entities directly in the database. 
            </summary>
            <param name="entity">the entity which is passed in to the method to batch update the entities directly in the database, e.g. UpdateMulti (Selfservicing)
            or UpdateEntitiesDirectly (adapter)</param>
            <returns>true if the caller is allowed to perform the update, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanDeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Determines whether the caller is allowed to delete of the entity type passed in
            </summary>
            <param name="entity">The entity to delete.</param>
            <returns>true if the caller is allowed to delete the entity passed in, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.CanBatchDeleteEntitiesDirectly(System.Type)">
            <summary>
            Determines whether the caller is allowed to delete entities directly in the database. 
            </summary>
            <param name="typeOfEntity">the type of the entity to batch delete instances of directly in the database, e.g. DeleteMulti (Selfservicing)
            or DeleteEntitiesDirectly (adapter)</param>
            <returns>true if the caller is allowed to perform the delete, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.GetFetchNewAuthorizationFailureResultHint">
            <summary>
            Gets the result hint what to do when authorization fails when fetch a new entity.
            </summary>
            <returns>any of the FetchNewAuthorizationFailureResultHint values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.AuthorizerBase.GetEntityTypeValueForType(System.Type)">
            <summary>
            Gets the EntityType value as integer for the entity type passed in
            </summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the EntityType value as integer for the entity type passed in</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery">
            <summary>
            Action query which contains multiple action queries which have to be executed in the order in which they're stored.
            Used for multi-target entities, like saving an inherited entity in a target-per-entity hierarchy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Adds the action query passed in.
            </summary>
            <param name="query">Query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ToString">
            <summary>
            Produces a string representation of this batch action query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Execute">
            <summary>
            Executes all action queries in this batchactionquery, in the order in which they were added.
            </summary>
            <returns>The number of rows affected (if applicable) of all queries executed combined, otherwise 0.</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside one or more query objects, 
            or no connection object inside the query object</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddParameterFieldRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Data.Common.DbParameter,System.ComponentModel.TypeConverter)">
            <summary>
            Adds a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to the collection of <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ParameterFieldRelations"/>. An output parameter can be
            stored once in the collection.
            </summary>
            <param name="field">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship.</param>
            <param name="parameter">The Parameter in the relationship.</param>
            <param name="typeConverterToUse">The type converter to use, if applicable (can be null)</param>
            <returns>The ParameterFieldRelation added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean)">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddSequenceRetrievalQuery(System.Data.Common.DbCommand,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds a new sequence retrieval query to this query
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a 
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. </param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
            <returns>the SequenceRetrievalQuery added</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.SetCommandText(System.String)">
            <summary>
            Sets the command text to the text specified
            </summary>
            <param name="commandText">The command text.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the parameter to the query's command.
            </summary>
            <param name="parameterToAdd">The parameter to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddParameters(System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Adds the parameters to the query's command.
            </summary>
            <param name="parametersToAdd">The parameters to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ReflectOutputValuesInRelatedFields">
            <summary>
            Reflects the output values in related fields for all actionqueries in this batchactionquery.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.WireTransaction(System.Data.Common.DbTransaction)">
            <summary>
            Wires the command of this query with the transaction passed in.
            </summary>
            <param name="transactionToWire">the transaction to wire the command with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeoutInterval">Timeout interval, in seconds.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Dispose(System.Boolean)">
            <summary>
            Performs the dispose action.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ActionQueries">
            <summary>
            Gets the actionQueries set in this batch action query object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.SequenceRetrievalQueries">
            <summary>
            Gets the sequence retrieval queries. Not implemented in BatchActionQueries.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Connection">
            <summary>
            Gets or sets the connection for this action query object. Get will return the connection of the first action query stored.
            Set will set the connection on all actionquery objects.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Command">
            <summary>
            Gets or sets the command. Not implemented on Batch action query objects. Use the indexer instead.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Parameters">
            <summary>
            Gets the parameters of all queries.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ParameterFieldRelations">
            <summary>
            Gets the parameter field relations.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Item(System.Int32)">
            <summary>
            Gets or sets the ActionQuery at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Count">
            <summary>
            Gets the number of IActionQueries in this query.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ParameterParameterRelations">
            <summary>
            Gets the parameter parameter relations for this IActionQuery. These definitions are used for insert queries in multi-target entity inserts.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.QuitOnPartlyFailure">
            <summary>
            Gets / sets quitOnPartlyFailure
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ExceptionInfoRetriever">
            <summary>
            Gets / sets the ExceptionInfoRetriever object to retrieve db specific info from a db specific exception.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable">
            <summary>
            Specialized Hashtable which contains name-value pairs for name overwriting for catalog names names in adapter 
            on some databases (db2, sqlserver)
            </summary>
            <remarks>Stores the overwrites in a from-to way, so the key is the from name and the name it should be come is in the value.
            You can use a wildcard in the form (key) part: * to define a name for all catalog names in the persistence info.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
            <param name="catalogNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="catalogNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
            <param name="catalogNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.CatalogNameUsageSetting">
            <summary>
            Gets / sets catalogNameUsageSetting
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase">
            <summary>
            ComPlusAdapterContextBase class. Abstract class which is the base for the ComPlusAdapterContext classes used
            in Adapter for hosting a COM+ aware DataAccessAdapter class. 
            Use the hosted DataAccessAdapter class to start a new COM+ transaction.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext">
            <summary>
            Interface for the COM+ context class which controls the COM+ transaction flow towards the database server, if applicable. 
            It contains a normal DataAccessAdapter class to do the work, and the IComPlusAdapterContext implementing class is consulted
            by the DataAccessAdapter class in cases of transaction control and database connection creation. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext.Adapter">
            <summary>
            Returns the DataAccessAdapter object related to this COM+ context. Use this adapter instance to perform persistence actions
            inside the COM+ transaction this IComPlusAdapterContext implementing object is participating in.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.CreateConnection(System.String)">
            <summary>
            Creates a new connection object using the connection string passed in.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.Commit">
            <summary>
            Signals to commit the current transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.Rollback">
            <summary>
            Signals to rollback the current transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.SetAdapter(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)">
            <summary>
            Sets the adapter to host in this context. Adapter is already aware of this context.
            </summary>
            <param name="adapter">Com+ context aware adapter instance</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.Adapter">
            <summary>
            Returns the DataAccessAdapter object related to this COM+ context. Use this adapter instance to perform persistence actions
            inside the COM+ transaction this IComPlusAdapterContext implementing object is participating in.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ConfigFileHelper">
            <summary>
            Static class which contains logic used by the generated code to read data from config files. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ConfigFileHelper.ReadConnectionStringFromConfig(System.String)">
            <summary>
            Reads the value of the setting with the key CatalogNameUsageSetting from the *.config file and stores that value as the
            active setting for catalogNameUsageSetting for this instance, IF specified. If specified, a key with the name CatalogNameToUse is
            expected as well.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>the connection string, if found, otherwise empty string</returns>
            <remarks>First tries to read from the connectionstrings settings (new in .NET 2.0). If not found, it will try to read it from the appSettings tag</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ScaleOverflowCorrectionAction">
            <summary>
            Enum which defines the action to take when a scale overflow is detected in the build-in validation for precision/scale values. This validation
            takes place when an entity field is set to a value and the validation isn't bypassed.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ScaleOverflowCorrectionAction.None">
            <summary>
            No action is taken, and the exception resulting from the scale overflow detection is thrown.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ScaleOverflowCorrectionAction.Truncate">
            <summary>
            Default. Chop off the digits which overflow the scale. Examples: scale is 2: 10.456 becomes 10.45. 10.450 becomes 10.45
            </summary>
            <remarks>SqlServer users should use this option if they want to mimic the SqlClient build-in truncation code.</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ScaleOverflowCorrectionAction.Round">
            <summary>
            Round the fraction to a value which fits the scale and round values using Math.Round(value, scale)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.BuildInValidationBypass">
            <summary>
            Enum which defines the strategy for the build-in validation logic for new values for entity fields. Build-in validation logic
            checks if the value to set matches the characteristics of the database field the entity field is mapped on, so when the
            entity is persisted there won't be any overflow exception.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.BuildInValidationBypass.NoBypass">
            <summary>
            Default. Don't bypass the build-in validation logic and only call the validator if the build-in validation checks succeed.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.BuildInValidationBypass.AlwaysBypass">
            <summary>
            Always bypass the build-in validation logic, even if there's no validator set for the entity.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.BuildInValidationBypass.BypassWhenValidatorPresent">
            <summary>
            Only bypass the build-in validation logic if the entity has a validator object set. Otherwise execute the build-in validation logic 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement">
            <summary>
            Enum which is used to identify the various info elements in a db specific exception info hashtable/dictionary.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.ErrorCode">
            <summary>
            The HRESULT error code (if available).
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.ErrorObjects">
            <summary>
            The set of error objects (e.g. SqlError, OracleError etc. objects) contained by the exception
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.ErrorNumber">
            <summary>
            The error number as reported by the db engine.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.ServerName">
            <summary>
            The server name or datasource the error occured on.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.Hint">
            <summary>
            A hint provided by the db engine how to solve the error.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.Message">
            <summary>
            The error message. This message is also copied to the exception message.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExceptionInfoElement.HelpLink">
            <summary>
            Link to help documentation about this error.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializedType">
            <summary>
            Enum which is used for fast serialization. It stores information about a type or type/value.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationOptimization">
            <summary>
            Enum which defines the serialization settings available. 
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationOptimization.None">
            <summary>
            Uses the original LLBLGenPro serialization/deserialization code
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationOptimization.Fast">
            <summary>
            Uses the fast serialization code for compact, fast serialization. If you use this option, be sure that the deserialization has to take place
            using this same code. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction">
            <summary>
            Enum which is used in Auditors, to signal that this single statement query action is about to be executed and that the framework would like
            to know if the auditor expects to have entities to save after the statement so a transaction should be started.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction.NewEntityInsert">
            <summary>
            An insert of a new entity is about to be started
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction.ExistingEntityUpdate">
            <summary>
            An update of an existing entity is about to be started
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction.EntityDelete">
            <summary>
            A delete of an existing entity is about to be started
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction.DirectUpdateEntities">
            <summary>
            A direct update of entities in the database with a single update statement is about to be started
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction.DirectDeleteEntities">
            <summary>
            A direct delete of entities in the database with a single delete statement is about to be started
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FetchNewAuthorizationFailureResultHint">
            <summary>
            Enum to specify the hint what to do when authorization fails on a newly fetched entity into a new object. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FetchNewAuthorizationFailureResultHint.ClearData">
            <summary>
            Clear the data of the entity. The entity is added to the collection, if the fetch was a collection fetch. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FetchNewAuthorizationFailureResultHint.ThrowAway">
            <summary>
            The entity is thrown out and not added to a collection, if the fetch was a collection fetch. This is the default.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionTargetKind">
            <summary>
            Enum defined for dependency injection information, to specify the targetkind 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionTargetKind.Absolute">
            <summary>
            The instance will be injected only in the type specified as targettype, all subtypes of targettype won't get the instance injected
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionTargetKind.Hierarchy">
            <summary>
            The instance will be injected in the type specified as targettype and all subtypes of targettype. This is the default.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionContextType">
            <summary>
            Enum defined to specify in which context the instance to inject lives in.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionContextType.NewInstancePerTarget">
            <summary>
            every target gets a new instance of the instance type injected. This is the default.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionContextType.Singleton">
            <summary>
            Every target gets the same instance of the instance type injected. 
            </summary>
            <remarks>The singleton instance is thread-specific, so different threads have different singletons</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceSortingMode">
            <summary>
            Enum definition for LLBLGenProDataSource(2) controls to signal what sorting mode they have to use for selects.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceSortingMode.ServerSide">
            <summary>
            Use server-side sorting, which will use solely entity fields (default)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceSortingMode.ClientSide">
            <summary>
            Use client-side sorting, which will use all properties specified, also non-field properties. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceCacheLocation">
            <summary>
            Enum to define the data cache to use for the LLBLGen Pro DataSource controls in an ASP.NET application
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceCacheLocation.ViewState">
            <summary>
            Data is stored in the viewstate. Default.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceCacheLocation.Session">
            <summary>
            Data is stored in the Session object using a key which is unique for control instance - page combination. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceCacheLocation.ASPNetCache">
            <summary>
            Data is stored in the ASPNet cache using a GUID based key. As the data cached is used in a post-back
            scenario when data has changed, the duration of the cached data is set to the value specified in the ASPNetCacheDuration property of the
            datasource control. Duration is always sliding, i.e. expires after ASPNetCacheDuration if the data hasn't been requested from the ASPNet cache. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceCacheLocation.None">
            <summary>
            Data isn't cached, all other state is cached in the viewstate. Using this option will cause a refetch of the data if the bound control is
            editing the data. Only use this cache location option if the data is used in a read-only fashion. Do realize that if the datasource control is
            asked to refetch the data, it will always have to go to the database to fetch the data. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType">
            <summary>
            Enum which specifies the type of object which contains the data in an LLBLGenProDataSource(2) control in an ASP.NET application
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType.EntityCollection">
            <summary>
            The object containing the data is an entity collection (selfservicing style or adapter style). 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType.TypedList">
            <summary>
            The object containing the data is a typed list
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataSourceDataContainerType.TypedView">
            <summary>
            The object containing the data is a typed view.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.MemberOperator">
            <summary>
            Enum which specifies when the MemberPredicate should be considered 'true'
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.MemberOperator.All">
            <summary>
            The contained filter in the MemberPredicate has to return true for all elements in the specified member.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.MemberOperator.Any">
            <summary>
            The contained filter in the MemberPredicate has to return true for at least one element in the specified member.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.MemberOperator.Null">
            <summary>
            The specified member has no data. The specified filter of the MemberPredicate is ignored. This operator can for example be used to test if
            the specified member is set, e.g. filter on all OrderEntity instances which have Customer set to an instance.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SqlServerCompatibilityLevel">
            <summary>
            Enum for compatibility level in the SqlServer DQE
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SqlServerCompatibilityLevel.SqlServer7">
            <summary>
            Produce SQL which is compatible with SqlServer 7 and up
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SqlServerCompatibilityLevel.SqlServer2000">
            <summary>
            Produce SQL which is compatible with SqlServer 2000 and up (default)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SqlServerCompatibilityLevel.SqlServer2005">
            <summary>
            Produce SQL which is compatible with SqlServer 2005 and up
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SqlServerCompatibilityLevel.SqlServerCE3x">
            <summary>
            Produce SQL which is compatible with SqlServer CE 3.0 and 3.1. (default for Compact Framework builds of SqlServer CE DQE)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SqlServerCompatibilityLevel.SqlServerCE35">
            <summary>
            Produce SQL which is compatible with SqlServer CE 3.5 and up. Recommended when using SqlServer CE 3.5.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FirebirdCompatibilityLevel">
            <summary>
            Enum for compatibility level in the SqlServer DQE
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FirebirdCompatibilityLevel.Firebird15">
            <summary>
            Compatibility is set to firebird 1.5 (default), which means no aliases in subqueries.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FirebirdCompatibilityLevel.Firebird2x">
            <summary>
            Compatibility is set to firebird 2.0 or higher, which means aliases in subqueries. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction">
            <summary>
            Enum to specify what to do when the data in the related collection of an entity view changes. A change in data can be: entity added or changed.
            If an entity is removed from the underlying collection, the entity is simply removed from the entity view, as the view doesn't contain any data by itself.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction.NoAction">
            <summary>
            A set filter or sorter isn't re-applied to the changed entity/ies, so the change won't affect the order of the entities in the view nor which rows are in 
            the view. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction.ReapplyFilterAndSorter">
            <summary>
            The set filter and the set sorter are re-applied to the entity which caused the change. This is the default and will make the entity view
            a true 'live' view on the related entity collection
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction.ReapplySorter">
            <summary>
            The set sorter is re-applied to the entities in the view.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType">
            <summary>
            Enum to specify to the IConcurrencyPredicateFactory what kind of predicate to produce
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType.Save">
            <summary>
            The predicate type requested is for a Save action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType.Delete">
            <summary>
            The predicate type requested is for a Delete action
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType">
            <summary>
            Enum definition for defining the hierarchy type of the inheritance tree
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType.None">
            <summary>
            No hierarchy defined for this entity or the entity isn't the root entity.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType.TargetPerEntityHierarchy">
            <summary>
            All entities map to the single target (table/view)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType.TargetPerEntity">
            <summary>
            Per entity a target (table/view) is defined, with just the fields of the derived entity, not the fields of the parent entity.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType">
            <summary>
            Enum which is used to specify block types, to identity groups of actions under the same type, e.g. inserts or updates.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType.Inserts">
            <summary>
            All entity insert actions
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType.Updates">
            <summary>
            All entity update actions
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType.Deletes">
            <summary>
            All entity delete actions.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType.DeletesPerformedDirectly">
            <summary>
            All delete actions performed directly on the database.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType.UpdatesPerformedDirectly">
            <summary>
            All update actions performed directly on the database.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot">
            <summary>
            Enum definition to tell the UnitOfWork that the passed in callback should be executed in the slot specified.
            Entities are executed in the order: Insert, Update, Delete. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PreEntityInsert">
            <summary>
            Execute the callback before the first entity is inserted.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PreEntityUpdate">
            <summary>
            Execute the callback after the last entity has been inserted but before the first entity will be updated.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PreEntityDelete">
            <summary>
            Execute the callback after the last entity has been updated but before the first entity will be deleted.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PostEntityDelete">
            <summary>
            Execute the callback after the last entity has been deleted.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect">
            <summary>
            Enum definition for the flags which can be passed to overloads of WriteXml(). These flags control the way the format of the output. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.None">
            <summary>
            No aspects have been specified, the defaults are used.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.Compact">
            <summary>
            Produces more compact XML. This xml doesn't contain type information attributes, nor non-data fields for objects. The default is verbose.
            </summary>
            <remarks>Adapter: it's recommended that you use Compact25 instead of this format as it's more compact and faster to deserialize.</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.MLTextInCDataBlocks">
            <summary>
            Places all strings with a &lt; and or &gt; in CDATA blocks. The default is not to do this.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.DatesInXmlDataType">
            <summary>
            Exports all DateTime values in the standard date/time format for XML: DateTime.ToString("yyyy-MM-ddTHH:mm:ss.fffffffzzzzzz");. The default is
            to export DateTime values in ticks. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.Compact25">
            <summary>
            Adapter specific. More optimal XML than Compact, introduced in v2.5. Use this format to have the most compact XML output which still contains change tracking/state information
            for full round-tripping support for entities and entity graphs. If both Compact and Compact25 are specified, Compact25 is used. 
            Webservice support code in Adapter uses Compact25. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage">
            <summary>
            SqlServer specific enum definition for Adapter template set. Specifies for the active DataAccessAdapter object what
            to do with the catalog name in persistence information set into fields. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage.Default">
            <summary>
            Use default behaviour, which means that nothing is done to the catalog name specified in the persistence info.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage.ForceName">
            <summary>
            Force the name specified in the property DataAccessAdapter.CatalogNameToUse. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage.Clear">
            <summary>
            Clears the catalog name specified in the persistence information. This means that the catalog name specified in the
            connection string is used by SqlServer where to locate specified tables etc.. Clearing of the catalog name makes the
            SqlServer DQE ignore the catalog name when generating names.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage">
            <summary>
            Oracle specific enum definition for Adapter template set. Specifies for the active DataAccessAdapter object what
            to do with the schema name in persistence information set into fields. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage.Default">
            <summary>
            Use default behaviour, which means that nothing is done to the schema name specified in the persistence info.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage.ForceName">
            <summary>
            Force the name specified in the property DataAccessAdapter.SchemaNameToUse. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage.Clear">
            <summary>
            Clears the Schema name specified in the persistence information. This means that the schema name specified in the
            persistence info is cleared. This results in the fact that database objects are not prefixed with a schema, and
            will only result in a succesful query if global synonym equivalents are available.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint">
            <summary>
            Enum definition for the hint specified in the Add method of RelationCollection.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.None">
            <summary>
            No hint specified. Use INNER unless ObeyWeakRelations is set to true.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Inner">
            <summary>
            Inner join between start and end entity of given relation
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Left">
            <summary>
            Hints a LEFT join between start and end entity in relation. 
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Right">
            <summary>
            Hints a RIGHT join between start and end entity in relation. 
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Cross">
            <summary>
            Hints a CROSS join between start and end entity in relation.
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType">
            <summary>
            Enum definition for the type of a PredicateExpressionElement
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType.Operator">
            <summary>
            Element contains an Operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType.Predicate">
            <summary>
            Element contains an IPredicate implementing object.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType.Empty">
            <summary>
            The element is empty.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType">
            <summary>
            Enum definition for the type of a predicate instance.
            This enum is stored in Predicate as an int and is used in DataAccessAdapterBase derived classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.Undefined">
            <summary>
            Undefined type. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldBetweenPredicate">
            <summary>
            A FieldBetweenPredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareNullPredicate">
            <summary>
            A FieldCompareNullPredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareValuePredicate">
            <summary>
            A FieldCompareValuePredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldLikePredicate">
            <summary>
            A FieldLikePredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.PredicateExpression">
            <summary>
            A predicate expression object containing 0 or more predicate elements.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareRangePredicate">
            <summary>
            A FieldCompareRangePredicate instance.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldFullTextSearchPredicate">
            <summary>
            A FieldFullTextSearchPredicate (SqlServer 2000 specific). Future enhancement.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareExpressionPredicate">
            <summary>
            A FieldCompareExpression predicate. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareSetPredicate">
            <summary>
            A FieldCompareSet predicate
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationType">
            <summary>
            Enum definition for the type of relation an EntityRelation object represents.
            There is no definition for m:n relation because EntityRelation can't represent a m:n relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany">
            <summary>
            A 1:n relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne">
            <summary>
            A 1:1 relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne">
            <summary>
            A m:1 relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany">
            <summary>
            A m:n relation
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator">
            <summary>
            Enum definition for the operator used in the FieldCompareValue Predicate.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.Equal">
            <summary>
            == . The only operator useful for boolean (bit) Fields.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.LessEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.LesserThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.GreaterEqual">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.GreaterThan">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.NotEqual">
            <summary>
            &lt;&gt; or !=
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.None">
            <summary>
            No comparison specified. Used when there's nothing to compare with, the field is the value to use as predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator">
            <summary>
            Enum definition for the operators used with the FieldCompareSetPredicate class.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.In">
            <summary>
            IN (set) operator.
            </summary>
            <remarks>On MySql, don't use In with Negate set to true, as that will lead to unexpected results due to MySql not being correct in this. Use NotEqualAll instead</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.Exist">
            <summary>
            EXISTS(set) operator.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.Equal">
            <summary>
            == (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.EqualAny">
            <summary>
            == ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.EqualAll">
            <summary>
            == ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LessEqual">
            <summary>
            &lt;= (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LessEqualAny">
            <summary>
            &lt;= ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LessEqualAll">
            <summary>
            &lt;= ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LesserThan">
            <summary>
            &lt; (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LesserThanAny">
            <summary>
            &lt; ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LesserThanAll">
            <summary>
            &lt; ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterEqual">
            <summary>
            &gt;= (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterEqualAny">
            <summary>
            &gt;= ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterEqualAll">
            <summary>
            &gt;= ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterThan">
            <summary>
            &gt; (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterThanAny">
            <summary>
            &gt; ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterThanAll">
            <summary>
            &gt; ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.NotEqual">
            <summary>
            &lt;&gt; (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.NotEqualAny">
            <summary>
            &lt;&gt; ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.NotEqualAll">
            <summary>
            &lt;&gt; ALL (set) operator
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator">
            <summary>
            Enum definition for the Operators used in PredicateExpressions
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator.And">
            <summary>
            The AND operator.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator.Or">
            <summary>
            The OR operator.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SortOperator">
            <summary>
            Enum definition for the sort operator, which can be specified with IEntityField instances to create
            order by clauses.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SortOperator.Ascending">
            <summary>
            Makes sorts Ascending
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SortOperator.Descending">
            <summary>
            Makes sorts Descending
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityState">
            <summary>
            Enum definition for the state an Entity can be in.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.New">
            <summary>
            Entity is new. It can be empty or filled, but is not saved (yet) to the persistent storage.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.Fetched">
            <summary>
            Entity is filled with its data from the persistent storage. It can be changed since the fetch.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.OutOfSync">
            <summary>
            Entity is out of sync with its physical entity in the persistent storage. 
            An Entity is marked OutOfSync when a succesful Save action is performed. 
            An Entity will re-fetch itself when in the state OutOfSync when a property
            is read or Refetch() is called. The state will then be set to Fetched.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.Deleted">
            <summary>
            Adapter specific. If an entity has the state Deleted, it is no longer
            available in the persistent storage.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction">
            <summary>
            Enum definition for the various aggregate functions which can be applied to fields in a retrieval query. 
            Useful in typed lists. Use these in combination with a groupbycollection.
            Not all functions are legal on all fields. Some functions will produce errors when used with fields of a given type,
            like a Sum function with a character field. This is the responsibility of the developer. Aggregate functions are
            never applied to *lob fields. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.None">
            <summary>
            Default, do not apply an aggregate function to the field.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Count">
            <summary>
            Calculates the amount of rows for the field. Results in COUNT(field) 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.CountDistinct">
            <summary>
            Calculates the amount of rows with distinct values for field. Results in COUNT(DISTINCT field).
            Access, MySql: not supported
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.CountRow">
            <summary>
            Calculates the amount of rows. Results in a COUNT(*)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Avg">
            <summary>
            Calculates the average value for the field. Results in an AVG(field)
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.AvgDistinct">
            <summary>
            Calculates the average value for the distinct values for field. Results in an AVG(DISTINCT field).
            Access, MySql: not supported
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Max">
            <summary>
            Calculates the max value for field. Results in a MAX(field). 
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Min">
            <summary>
            Calculates the min value for field. Results in a MIN(field)
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Sum">
            <summary>
            Calculates the sum of all values of field. Results in a SUM(field)
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.SumDistinct">
            <summary>
            Calculates the sum of all distinct values of field. Results in a SUM(DISTINCT field). 
            Access, MySql: not supported
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.StDev">
            <summary>
            Calculates statistical standard deviation. Results in:
            SqlServer: STDEV(field)<br/>
            Oracle, MySql: STDDEV(field)<br/>
            Access: STDEV(field)<br/>
            Firebird: not supported
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.StDevDistinct">
            <summary>
            Calculates statistical standard deviation over distinct values. Results in:
            SqlServer: not supported<br/>
            Oracle: STDDEV(DISTINCT field)<br/>
            Access, Firebird, MySql: not supported<br/>
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Variance">
            <summary>
            Calculates statistical variance. Results in:
            SqlServer: VAR(field)<br/>
            Oracle, MySql: VARIANCE(field)<br/>
            Access: VAR(field)<br/>
            Firebird: not supported.
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.VarianceDistinct">
            <summary>
            Calculates statistical variance over distinct values. Results in:
            SqlServer: not supported<br/>
            Oracle: VARIANCE(DISTINCT field)<br/>
            Access, Firebird, MySql: not supported<br/>
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction">
            <summary>
            Enum definition for the various aggregate functions supported by the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetPredicate"/> for in-memory filters.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.Count">
            <summary>
            Calculates the amount of elements matching the specified filter. Result is of type Int32
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.CountDistinct">
            <summary>
            Calculates the amount of elements matching the specified filter, ignoring duplicates. Result is of type Int32. NULL/DBNull.Value is counted as a value.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.Avg">
            <summary>
            Calculates the average value for the values in the set. Result is of type Decimal.
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only. </remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.AvgDistinct">
            <summary>
            Calculates the average value for the values in the set, excluding duplicates. Result is of type Decimal
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.Max">
            <summary>
            Calculates the max value for the values in the set. Result is of the type of the values in the set.
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.Min">
            <summary>
            Calculates the min value for the values in the set. Result is of the type of the values in the set.
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.Sum">
            <summary>
            Calculates the sum of all values in the set. Result is of the type of the values in the set.
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateSetFunction.SumDistinct">
            <summary>
            Calculates the sum of all values in the set excluding duplicates. Result is of the type of the values in the set.
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType">
            <summary>
            Enum for defining the type of the expression element in an expression object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Value">
            <summary>
            The element contains a value
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Field">
            <summary>
            The element contains a field
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Expression">
            <summary>
            The element contains an expression
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.FunctionCall">
            <summary>
            The element contains a function call.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.ScalarQuery">
            <summary>
            The element contains a Scalar query
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Predicate">
            <summary>
            The element contains a Predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExOp">
            <summary>
            Enum definition for the ExpressionOperators (ExOp). Name is shortened to limit typing.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.None">
            <summary>
            None specified. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Add">
            <summary>
            Add arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Sub">
            <summary>
            Sub(tract) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Mul">
            <summary>
            Mul(tiply) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Div">
            <summary>
            Div(ision) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Mod">
            <summary>
            Mod(ulo) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Equal">
            <summary>
            Equal (==) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.GreaterEqual">
            <summary>
            GreaterEqual (&gt;=) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.GreaterThan">
            <summary>
            Greater (&gt;) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.LessEqual">
            <summary>
            LessEqual (&lt;=) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.LesserThan">
            <summary>
            Lesser (&lt;) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.NotEqual">
            <summary>
            Not Equal (!=) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.And">
            <summary>
            And logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Or">
            <summary>
            Or logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.BitwiseAnd">
            <summary>
            Bitwise and (&amp;) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.BitwiseOr">
            <summary>
            Bitwise or (|) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.BitwiseXor">
            <summary>
            Bitwise exclusive or (Xor) (^) operator
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator">
            <summary>
            Operator to use with FieldFullTextSearchPredicate.
            SqlServer specific.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator.Contains">
            <summary>
            Produces a CONTAINS() statement
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator.Freetext">
            <summary>
            Produces a FREETEXT() statement
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint">
            <summary>
            Enum definition for RDBMS hints, like table lock hints and other hints.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint.TableInFromClauseHint">
            <summary>
            Hint for statements to apply to a table specification in a FROM clause. For example, in Sqlserver, if the setting is switched on, this hint
            will produce (NOLOCK) as a hint to use.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCallParameterType">
            <summary>
            Enum to define the types of parameters in a dbfunction call. Used internally to quickly call the right routine for parameter to text conversion
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCallParameterType.Field">
            <summary>
            Parameter is a field
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCallParameterType.Value">
            <summary>
            Parameter is a value.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCallParameterType.Expression">
            <summary>
            Parameter is an expression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFieldPresence">
            <summary>
            Enum which is used when derived table targeting fields are checked if they're present in the derived table targeted.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFieldPresence.NotFound">
            <summary>
            Field isn't found with name nor alias in the derived table, though it targets the derived table.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFieldPresence.PresentWithName">
            <summary>
            Field is present with its name in the derived table.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFieldPresence.PresentWithAlias">
            <summary>
            Field is present with its alias in the derived table.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RuntimeLibraryVersion">
            <summary>
            Constant holder for the version of this library. Because the library is signed, it has a general version, like 1.0.2003.2, but
            it also has an internal version, stored in this struct, which reflects the build date. Versions are always equal for the DQE's and the ORM
            support classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RuntimeLibraryVersion.Version">
            <summary>
            Version reflects the general version of this library, for example 1.0.2003.2
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RuntimeLibraryVersion.Build">
            <summary>
            Contains the build number of this version, which is build up like this: MMDDYYYY
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Context">
            <summary>
            General Context class which provides uniquing support for the object fetcher. A developer
            can use this class to create a space for objects where every entity is loaded just once.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.Context"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.Context"/> instance.
            </summary>
            <param name="setExistingEntityFieldsInGet">Flag to set existing entity fields in get. Default is true. When set to false, an existing
            entity's fields is not set to the fields of the passed in entity. Fields are only set if the entity isn't dirty.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Clear">
            <summary>
            Clears this context. It removes all cached entity references from this context and also all type definitions. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds the specified entity to the Context. If the passed in entity is already in a context, the Add is a no-op.
            Also if the entity isn't new and there is already an entity with the same PK values, the Add is a no-op.
            </summary>
            <param name="toAdd">entity to add to this context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the specified entity to the Context. If the passed in entity is already in a context, the Add is a no-op.
            Also if the entity isn't new and there is already an entity with the same PK values, the Add is a no-op.
            </summary>
            <param name="toAdd">entity to add to this context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the specified collection to this context. All contained entities are added to the context as well, if they're not already in the / a context.
            This will make sure that any entity added to the entity collection will be added to this context as well. 
            </summary>
            <param name="toAdd">To add.</param>
            <remarks>SelfServicing specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the specified collection to this context. All contained entities are added to the context as well, if they're not already in the / a context.
            This will make sure that any entity added to the entity collection will be added to this context as well. 
            </summary>
            <param name="toAdd">To add.</param>
            <remarks>Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.EntitySaveCommitted``1(``0)">
            <summary>
            After an entity has been saved and the transaction has been committed (or if no transaction was used: the entity was saved), this routine is called
            to move entities which are in the list of new entities and which are now saved to the store. 
            </summary>
            <param name="entity">Entity.</param>
            <remarks>Routine for the framework, you don't have to call this routine yourself</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.GetAll(System.Type)">
            <summary>
            Returns a readonly arraylist with all the objects of the type passed in which are currently stored in the internal object cache.
            No new entities are returned. If the type is not found, an empty array list is returned.
            </summary>
            <param name="typeOfEntity">The type of the entity for which the objects should be returned.</param>
            <returns>List with the requested data</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.GetAllTypes">
            <summary>
            Gets all the Type objects for which objects are located in this Context
            </summary>
            <returns>List with the requested data</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            The passed in entity is checked if the contained data is already in this / a context in another entity object.
            If that's the case, that entity object is returned. If the data is not in this context in another entity object,
            the passed in entity is returned and added to this context.
            </summary>
            <param name="toCheck">entity to check</param>
            <returns>an already loaded entity with the same data, or the passed in entity if the data hasn't been loaded in another entity in this context
            or the entity passed in is new or the existing entity is deleted and its transaction has been completed.</returns>
            <remarks>if toCheck is new, it is added to the new entities pool (if not already present) and its context is set to this instance. 
            New entities aren't yet added to the context until they're saved. A new entity passed in is returned as well.
            SelfServicing specific version.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            The passed in entity is checked if the contained data is already in this / a context in another entity object.
            </summary>
            <param name="toCheck">entity to check</param>
            <returns>an already loaded entity with the same data, or the passed in entity if the data hasn't been loaded in another entity in this context
            or the entity passed in is new or the existing entity is deleted and its transaction has been completed.</returns>
            <remarks>if toCheck is new, it is added to the new entities pool (if not already present) and its context is set to this instance. 
            New entities aren't yet added to the context until they're saved. A new entity passed in is returned as well.
            Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,System.Object[])">
            <summary>
            Tries to find an entity with the same PK values as passed in. The PK values have to be in the same order as they appear in the constructor of the 
            entity. If an entity in the context has the same PK values, that entity is returned, otherwise a new entity is returned, created with the 
            factory passed in, with its PK values initialized, though not fetched. 
            </summary>
            <param name="factory">Factory to use for entity to find</param>
            <param name="pkValues">Pk values. Have to be specified in the same order as the PK fields in the entity constructor created by the factory passed in.</param>
            <returns>Entity with the same PK values if that entity was already added to the context, or a new entity if no entity was previously added to
            this context with the same PK values</returns>
            <exception cref="T:System.ArgumentException">if more/less pkvalues are passed in as there are in the PK of the entity created with the factory passed in</exception>
            <remarks>SelfServicing specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,System.Object[])">
            <summary>
            Tries to find an entity with the same PK values as passed in. The PK values have to be in the same order as they appear in the constructor of the 
            entity. If an entity in the context has the same PK values, that entity is returned, otherwise a new entity is returned, created with the 
            factory passed in, with its PK values initialized, though not fetched. 
            </summary>
            <param name="factory">Factory to use for entity to find</param>
            <param name="pkValues">Pk values. Have to be specified in the same order as the PK fields in the entity constructor created by the factory passed in.</param>
            <returns>Entity with the same PK values if that entity was already added to the context, or a new entity if no entity was previously added to
            this context with the same PK values</returns>
            <exception cref="T:System.ArgumentException">if more/less pkvalues are passed in as there are in the PK of the entity created with the factory passed in</exception>
            <remarks>Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Removes the specified entity from the store
            </summary>
            <param name="toRemove">To remove.</param>
            <remarks>generic version for both SelfServicing and Adapter.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnAddCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Called at the end of Add(IEntityCollection)
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnAddCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Called at the start of Add(IEntityCollection)
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnAddCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of Add(IEntityCollection2)
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnAddCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of Add(IEntityCollection2)
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnClearComplete">
            <summary>
            Called at the end of the Clear() method
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnClear">
            <summary>
            Called at the start of the Clear() method
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnAdd``1(``0)">
            <summary>
            Called at the start of Add(TEntity)
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnAddComplete``1(``0)">
            <summary>
            Called at the end of Add(TEntity)
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnRemoveComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called at the end of Remove(IEntityCore), when toRemove has been removed from this context
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnRemove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called at the start of the remove action for toRemove
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.OnInitComplete">
            <summary>
            Called at the end of the InitClass method, which initializes datastructures from the ctor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.FindEntity``1(``0)">
            <summary>
            Tries to find the passed in entity in the store, based on its contained data. It assumes the passed in entity isn't new. 
            </summary>
            <param name="toCheck">Entity object which contains entity data to </param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.AddEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Adds the entity passed in. The entity passed in is not new and the object isn't in the store as it isn't in a context yet. 
            It assumes that there is no entity with the same PK in the store, as that's checked by the public Add() methods.
            </summary>
            <param name="toAdd">entity to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.InitClass(System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="setExistingEntityFieldsInGet"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add``1(``0)">
            <summary>
            Adds the specified entity to the Context. If the passed in entity is already in a context, the Add is a no-op.
            Also if the entity isn't new and there is already an entity with the same PK values, the Add is a no-op.
            </summary>
            <param name="toAdd">entity to add to this context.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Context.SetExistingEntityFieldsInGet">
            <summary>
            Gets / sets SetExistingEntityFieldsInGet flag. When set to false (default is true), an existing
            entity's fields is not set to the fields of the passed in entity. Fields are only set if the entity isn't dirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Context.ObjectIDToEntityInstance">
            <summary>
            Gets the object ID to entity instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Context.EntityTypeHashtables">
            <summary>
            Gets the entity type hashtables / dictionaries. Dictionaries which store per entity hash value, the entity's objectid
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Context.NewEntities">
            <summary>
            Gets the new entities.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1">
            <summary>
            Projector to project raw projection data onto a custom class which can be an anonymous type.
            </summary>
            <remarks>If the type T has a CTor which accepts all the types of the projectors, or when there's no parameterless CTor, 
            it will use the CTor to fill the new objects. In the other situations, it will use property setters to fill the objects.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector">
            <summary>
            Interface which defines a projector engine for projecting entity data. The engine consumes projected raw data and produces an object which 
            from then on contains the raw data. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector.AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector">
            <summary>
            Interface which defines a projector engine for projecting general data in object[] arrays (e.g. datareader results). 
            The engine consumes projected raw data and produces an object which from then on contains the raw data. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector.AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.#ctor(System.Collections.IList)">
            <summary>
            CTor
            </summary>
            <param name="destination">destination collection of new projection results</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            CTor
            </summary>
            <param name="destination">destination collection of new projection results</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.AddProjectionResultToContainer(System.Collections.IList,System.Object[])">
            <summary>
            Performs the actual projection. Override this method if you want to perform your own projections.
            </summary>
            <param name="projectors">The projectors.</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.CreateNewInstance(System.Collections.Generic.List{System.Object})">
            <summary>
            Creates a new instance of T with the ctor arguments specified.
            </summary>
            <param name="ctorArguments">The ctor arguments, in the order expected by the constructor which info is obtainable through CTorInfoUsed.</param>
            <returns>new instance of T</returns>
            <remarks>override this routine to create instances faster than with Activator.CreateInstance</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.SetupCTorParameterInfo(System.Collections.IList)">
            <summary>
            Sets up the constructor parameters for creation new instances which require values set in the ctor.
            </summary>
            <param name="projectors">The projectors.</param>
            <remarks>Override this routine to obtain information for faster object creation.</remarks>
            <returns>true if the routine did a new setup, false if the current setup was kept. Overrides should do work only when true was returned</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.CTorInfoUsed">
            <summary>
            Gets the constructor info  used during projections
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.PropertyDescriptors">
            <summary>
            Gets the property descriptors for the type this projector projects to. These descriptors are cached so multi-row projections are fast. 
            </summary>
            <value>The property descriptors.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToCustomClass`1.Destination">
            <summary>
            Gets the destination.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1">
            <summary>
            Projector engine which projects raw rpojection result data onto a value list. This means that a single value is picked 
            from the row to project and placed in the list to fill. The value in a raw row is used to project onto the destination.
            </summary>
            <typeparam name="T">The type of the value in the value list.</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1"/> class.
            </summary>
            <param name="destination">The destination for the projection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1"/> class.
            </summary>
            <param name="destination">The destination for the projection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToValueList`1.AddProjectionResultToContainer(System.Object[])">
            <summary>
            Adds the projection result to container.
            </summary>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable">
            <summary>
            Projector engine which projects raw projection result data onto datarows which are added to a single datatable.
            Used by creation of projections of EntityView(2) data to datatables.
            </summary>
            <remarks>This projector engine ignores SetUsingCTorHints as it isn't applicable to filling datatables.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable"/> class.
            </summary>
            <param name="destination">The destination of the data.</param>
            <remarks>If the datatable doesn't have any columns defined, new ones are created using the propertyprojectors passed in when the first
            row is created, and the types of the data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable.AddProjectionResultToContainer(System.Collections.IList,System.Object[])">
            <summary>
            Performs the actual projection
            </summary>
            <param name="projectors">The projectors.</param>
            <param name="rawProjectionResult">The raw projection result.</param>
            <remarks>If the datatable already contains columns, the columns are re-used as indexes into the propertyprojectors: a column without a propertyprojector
            won't receive a value and also a value without a corresponding column won't end up in the row.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToDataTable.CreateColumns(System.Collections.IList)">
            <summary>
            Creates the columns in the destination datatable
            </summary>
            <param name="projectors">The projectors.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection">
            <summary>
            Projector engine which projects raw projection result data onto new entities which are added to a single entitycollection.
            </summary>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2"/> class.
            </summary>
            <param name="destination">The destination of the data. It's required that the destination collection has a factory set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection.AddProjectionResultToContainer(System.Collections.IList,System.Object[])">
            <summary>
            Performs the actual projection 
            </summary>
            <param name="projectors">List of projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2">
            <summary>
            Projector engine which projects raw projection result data onto new entities which are added to a single entitycollection.
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2"/> class.
            </summary>
            <param name="destination">The destination of the data. It's required that the destination collection has a factory set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="propertyProjectors">List of property projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2.SD#LLBLGen#Pro#ORMSupportClasses#IGeneralDataProjector#AddProjectionResultToContainer(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},System.Object[])">
            <summary>
            Adds a new projection result to the container contained into this instance. The container has to be set in the constructor.
            </summary>
            <param name="valueProjectors">List of value projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataProjectorToIEntityCollection2.AddProjectionResultToContainer(System.Collections.IList,System.Object[])">
            <summary>
            Performs the actual projection 
            </summary>
            <param name="projectors">List of projectors used to create the projection result</param>
            <param name="rawProjectionResult">The raw projection result.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataTableFiller">
            <summary>
            Utility class which fills the passed in datatable using the passed in open reader and the persistence info. 
            It performs conversion along the way. It creates new columns if no columns are defined in the datatable, otherwise
            re-uses the columns. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataTableFiller.Fill(System.Data.IDataReader,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String})">
            <summary>
            Fills the specified datatable with the data from the datareader.
            </summary>
            <param name="dataSource">Data source. Is assumed the reader is at the first record, so Read() has been called.</param>
            <param name="toFill">To fill.</param>
            <param name="fieldsPersistenceInfo">Fields persistence info.</param>
            <param name="queryExecuted">Query executed.</param>
            <param name="stringCache">The string cache which is used to 'unique' the string values so string values are loaded into memory just once.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector">
            <summary>
            General class which defines the projection result and destination of a value in an object[] array. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector">
            <summary>
            Interface for defining the IDataValueProjector type which is used for value projections when projecting an object[] content onto another
            data store format.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IProjector">
            <summary>
            Core interface for projectors
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IProjector.ProjectedResultName">
            <summary>
            Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IProjector.ValueType">
            <summary>
            Gets or sets the type of the value returned by the value producer or producers routine of the projector.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IProjector.SetUsingCTorHint">
            <summary>
            Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way (false). 
            This flag can be ignored by the projector engine if values can better be set otherwise.
            </summary>
            <remarks>Projectors for CTors have to appear in the same order as their destination parameters appear in the CTor to use.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IProjector.ValueProducerFunc">
            <summary>
            Gets or sets the delegate to use to produce a value for this projector out of the list of object values. Be sure to set
            ValueProducerFuncParameterIndices if the delegate contained inside ValueProducerFunc requires any input values from the list of values to project
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IProjector.ValueProducerFuncParameterIndices">
            <summary>
            Gets or sets the parameter indices array to use with ValueProducer. If ValueProducerFunc is null, this array is ignored. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector.ProjectValue(System.Object[])">
            <summary>
            Projects the entity through this entity property projector and results into a single value, based on what the DefaultValueProducer is and
            what filter is specified (if any)
            </summary>
            <param name="sourceValues">The source values of which this projector will pick a value to project. The projection result is returned.</param>
            <returns>
            Projection result of a value in the sourcevalues.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector.ValueIndex">
            <summary>
            Gets or sets the index of the value to return when Projectvalue is called. 
            </summary>
            <value>The index of the default value.</value>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.#ctor(System.String,System.Int32,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
            <param name="setUsingCTorHint">Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way 
            (false). This flag can be ignored by the projector engine if values can better be set otherwise.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.#ctor(System.String,System.Int32,System.Type,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
            <param name="setUsingCTorHint">Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way
            (false). This flag can be ignored by the projector engine if values can better be set otherwise.</param>
            <param name="valueProducerFunc">The the delegate to use to produce a value for this projector out of the list of object values. Be sure to set
            ValueProducerFuncParameterIndices if the delegate contained inside ValueProducerFunc requires any input values from the list of values to project</param>
            <param name="valueProducerFuncParameterIndices">the parameter indices array to use with ValueProducer. If ValueProducerFunc is null, this array is ignored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ProjectValue(System.Object[])">
            <summary>
            Projects the entity through this entity property projector and results into a single value, based on what the DefaultValueProducer is and
            what filter is specified (if any)
            </summary>
            <param name="sourceValues">The source values of which this projector will pick a value to project. The projection result is returned.</param>
            <returns>
            Projection result of a value in the sourcevalues or null if the value index is out of bounds. If the index is out of bounds, ValuePostProcess isn't called.
            </returns>
            <remarks>Calls, if a valid value was obtained from sourceValues, ValuePostProcess after the projection to allow derived classes to post-process
            the value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ValuePostProcess(System.Object,System.Object[])">
            <summary>
            Postprocesses the value passed in, which is the projection result determined by ProjectValue. Use this routine to post-process this
            value if you want to perform post-processing per value.
            </summary>
            <param name="preliminaryProjectionResult">The preliminary projection result.</param>
            <param name="sourceValues">The source values used for the processing.</param>
            <returns>
            the projection result processed by this routine. The base class version is empty and returns preliminaryProjectionResult
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ValueIndex">
            <summary>
            Gets or sets the index of the value to return when Projectvalue is called.
            </summary>
            <value>The index of the default value.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ProjectedResultName">
            <summary>
            Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ValueType">
            <summary>
            Gets or sets the type of the value returned by the value producer or producers routine of the projector.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.SetUsingCTorHint">
            <summary>
            Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way (false). 
            This flag can be ignored by the projector engine if values can better be set otherwise.
            </summary>
            <remarks>Projectors for CTors have to appear in the same order as their destination parameters appear in the CTor to use.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ValueProducerFunc">
            <summary>
            Gets or sets the delegate to use to produce a value for this projector out of the list of object values. Be sure to set
            ValueProducerFuncParameterIndices if the delegate contained inside ValueProducerFunc requires any input values from the list of values to project
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector.ValueProducerFuncParameterIndices">
            <summary>
            Gets or sets the parameter indices array to use with ValueProducer. If ValueProducerFunc is null, this array is ignored. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypeConverterDataValueProjector">
            <summary>
            Wrapper class which utilizes a set typeconverter during projection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeConverterDataValueProjector.#ctor(System.String,System.Int32,System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
            <param name="typeConverterToUse">The type converter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeConverterDataValueProjector.#ctor(System.String,System.Int32,System.Type,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ProjectionValueProducerFunc,System.Int32[],System.ComponentModel.TypeConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DataValueProjector"/> class.
            </summary>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueIndex">Index of the value. Ignored if valueProducerFunc has been specified</param>
            <param name="valueType">Type of the value.</param>
            <param name="setUsingCTorHint">Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way
            (false). This flag can be ignored by the projector engine if values can better be set otherwise.</param>
            <param name="valueProducerFunc">The the delegate to use to produce a value for this projector out of the list of object values. Be sure to set
            ValueProducerFuncParameterIndices if the delegate contained inside ValueProducerFunc requires any input values from the list of values to project</param>
            <param name="valueProducerFuncParameterIndices">the parameter indices array to use with ValueProducer. If ValueProducerFunc is null, this array is ignored.</param>
            <param name="typeConverterToUse">The type converter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeConverterDataValueProjector.ValuePostProcess(System.Object,System.Object[])">
            <summary>
            Postprocesses the value passed in, which is the projection result determined by ProjectValue. Use this routine to post-process this
            value if you want to perform post-processing per value.
            </summary>
            <param name="preliminaryProjectionResult">The preliminary projection result.</param>
            <param name="sourceValues">The source values used for the processing.</param>
            <returns>
            the projection result processed by this routine. The base class version is empty and returns preliminaryProjectionResult
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypeConverterDataValueProjector.TypeConverterToUse">
            <summary>
            Gets / sets typeConverterToUse
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall">
            <summary>
            Class which implements a function call to a database function and which is used on an EntityField(2) in a query.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall">
            <summary>
            Interface which defines a database function call type, used for specifying a function call in a filter, resultset or sortclause. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained function call
            </summary>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IDbFunctionCall.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained function call
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IDbFunctionCall.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.DatabaseParameters">
            <summary>
            The list of database parameters created when the DbFunctionCall was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.CatalogName">
            <summary>
            Gets or sets the name of the catalog the function is located in. Can be ignored on databases which don't support catalogs. 
            </summary>
            <remarks>If catalog name isn't supplied, the function has to be present in the active catalog the user is connected with.</remarks>
            <value>The name of the catalog.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.SchemaName">
            <summary>
            Gets or sets the name of the schema the function is located in. Can be ignored on databases which don't support schemas.
            </summary>
            <remarks>If schema name isn't supplied, the function has to be present in the default schema the user has access to in the current catalog.
            If you've specified a catalog, always specify the schema.</remarks>
            <value>The name of the schema.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.FunctionName">
            <summary>
            Gets or sets the name of the function to call. This is without catalog or schema name. 
            </summary>
            <value>The name of the function.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.FunctionParameters">
            <summary>
            Gets the function parameters to pass to the function. You can pass fields and values to the function as parameters. A field can have a function call and/or
            expression applied to make nested function calls possible. 
            </summary>
            <value>The function parameters.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbFunctionCall.FieldPersistenceInfos">
            <summary>
            Per field in FunctionParameters, this list contains the fieldPersistenceinfo object. If a parameter in FunctionParameters is not an IEntityFieldCore implementing
            object, the value for that parameter is null/Nothing.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpression">
            <summary>
            General interface definition for the Expression class which defines field expressions which are
            applied to fields in a select list, in update queries or in field predicates.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall"/> class.
            </summary>
            <param name="functionName">Name of the function or pre-formatted function call string.</param>
            <param name="parameters">The parameters for the function to call. Can be null (which means: no parameters)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall"/> class.
            </summary>
            <param name="schemaName">Name of the schema.</param>
            <param name="functionName">Name of the function or pre-formatted function call string.</param>
            <param name="parameters">The parameters for the function to call. Can be null (which means: no parameters)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall"/> class.
            </summary>
            <param name="catalogName">Name of the catalog.</param>
            <param name="schemaName">Name of the schema.</param>
            <param name="functionName">Name of the function or pre-formatted function call string.</param>
            <param name="parameters">The parameters for the function to call. Can be null (which means: no parameters)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained function call
            </summary>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IDbFunctionCall.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained function call
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IDbFunctionCall.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.CreateParameterFragments(System.Boolean)">
            <summary>
            Creates the parameters text to embed in the query text.
            </summary>
            <param name="inHavingClause">if set to <c>true</c> [in having clause].</param>
            <returns>
            the set of fragments, one for each function parameter, which is used to build the query text
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SetParameters(System.Object[])">
            <summary>
            Sets the parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained function call
            </summary>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IDbFunctionCall.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained function call
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IDbFunctionCall.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters,
            and conversion routines, and field names, including prefix/postfix characters.
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.DatabaseParameters">
            <summary>
            The list of database parameters created when the DbFunctionCall was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters,
            and conversion routines, and field names, including prefix/postfix characters.
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.CatalogName">
            <summary>
            Gets or sets the name of the catalog the function is located in. Can be ignored on databases which don't support catalogs.
            </summary>
            <value>The name of the catalog.</value>
            <remarks>If catalog name isn't supplied, the function has to be present in the active catalog the user is connected with.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.SchemaName">
            <summary>
            Gets or sets the name of the schema the function is located in. Can be ignored on databases which don't support schemas.
            </summary>
            <value>The name of the schema.</value>
            <remarks>If schema name isn't supplied, the function has to be present in the default schema the user has access to in the current catalog.
            If you've specified a catalog, always specify the schema. If the function to call is a system function, don't specify schema nor catalog name.
            If the function name is preformatted, schemaname and catalogname are ignored.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.FunctionName">
            <summary>
            Gets or sets the name of the function to call or pre-formatted function call string. This is without catalog or schema name.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.FunctionParameters">
            <summary>
            Gets the function parameters to pass to the function. You can pass fields and values to the function as parameters. A field can have a function call and/or
            expression applied to make nested function calls possible.
            </summary>
            <value>The function parameters.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbFunctionCall.FieldPersistenceInfos">
            <summary>
            Per field in FunctionParameters, this list contains the fieldPersistenceinfo object. If a parameter in FunctionParameters is not an IEntityFieldCore implementing
            object, the value for that parameter is null/Nothing.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase">
            <summary>
            Base class for every DbSpecificCreator implementation
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator">
            <summary>
            Interface for DatabaseSpecificCreator objects, which use the Strategy pattern to supply IPredicate implementations with a way to
            create parameter objects, field names, including prefix/postfix characters, and conversion routines, which suit the target database.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(System.String,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Object)">
            <summary>
            Creates a new, filled parameter.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="size">The size.</param>
            <param name="direction">The direction.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <param name="value">Value to set the parameter to.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a parameter based on the direction passed in and the value passed in.
            </summary>
            <param name="direction">Direction for the parameter</param>
            <param name="value">value the parameter is for.</param>
            <returns>
            Valid parameter for usage with the target database.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateLikeParameter(System.String)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type.
            </summary>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <returns>
            Valid parameter for usage with the target database.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateLikeParameter(System.String,System.String)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type.
            </summary>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <param name="targetFieldDbType">Type of the target field db, in provider specific enum string format (e.g. "Int" for SqlDbType.Int)</param>
            <returns>
            Valid parameter for usage with the target database.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldName(field persistence info, fieldname, false);
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="containingObjectName">Name of the containing object which defined the field with name fieldName.</param>
            <param name="actualContainingObjectName">Name of the containing object which actually holds the field with the name fieldname.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <param name="containingObjectName">Name of the containing object which defined the field with name fieldName.</param>
            <param name="actualContainingObjectName">Name of the containing object which actually holds the field with the name fieldname.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean)">
            <summary>
            Creates the name for the field, and takes into account an aggregate function present and an expression present. If one or both are present, the
            field is replaced with (expression) or surrounded with (aggregate) the function (if applyAggregateFunction is true).
            </summary>
            <param name="fieldCore">fieldcore part of the field. Required to determine expression and aggregate function</param>
            <param name="persistenceInfo">persistence info object for the field.</param>
            <param name="fieldName">name for the field to be used</param>
            <param name="objectAlias">Alias for object hte field belongs to</param>
            <param name="applyAggregateFunction">flag to apply aggregate function or not. Aggregate functions can't be applied when the call originates
            from a predicate which is not part of a having clause.</param>
            <returns>string representing the field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldNameSimple(field persistence info, fieldname, false);. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateObjectName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Creates a valid object name (f.e. a name for a table or view) based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance which source object info is used to formulate the objectname</param>
            <returns>Valid object name</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertComparisonOperator(SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            Converts the passed in comparison operator to a string usable in a query.
            </summary>
            <param name="operatorToConvert">Operator to convert to string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertSortOperator(SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Converts the passed in sort operator to a string usable in a query
            </summary>
            <param name="operatorToConvert">sort operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertExpressionOperator(SD.LLBLGen.Pro.ORMSupportClasses.ExOp)">
            <summary>
            Converts the passed in expression operator (exop) to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Expression operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertSetOperator(SD.LLBLGen.Pro.ORMSupportClasses.SetOperator)">
            <summary>
            Converts the passed in set operator to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Set operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ToUpperFunctionName">
            <summary>
            Returns the SQL functionname to make a string uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new Select Query which is ready to use as a subquery, based on the specified select list and the specified set of relations.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldPersistenceInfos">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="groupByClause">the group by clause to use</param>
            <returns>
            IRetrievalQuery instance which is ready to be used.
            </returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use as a subquery, based on the specified select list and the specified set of relations.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldPersistenceInfos">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="groupByClause">the group by clause to use</param>
            <param name="allowDuplicates">If true, duplicates are allowed, otherwise DISTINCT (if applicable) is emitted.</param>
            <returns>
            IRetrievalQuery instance which is ready to be used.
            </returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateValidAlias(System.String)">
            <summary>
            Routine which creates a valid alias string for the raw alias passed in. For example, the alias will be surrounded by "[]" on sqlserver. 
            Used by the RelationCollection to produce a valid alias for joins.
            </summary>
            <param name="rawAlias">the raw alias to make valid</param>
            <returns>valid alias string to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.FindRealAlias(System.String,System.String,System.String)">
            <summary>
            Finds the real alias for the entity + objectalias combination. A real alias is necessary as an entity mapped onto multiple tables (through inheritance)
            is aliased with a single object alias but each target has to have a different real alias. 
            </summary>
            <param name="containingObjectName">Name of the entity the holder of the objectAlias is defined in</param>
            <param name="objectAlias">Object alias.</param>
            <param name="actualContainingObjectName">The name of the entity the holder of the object alias is actually present in (is only different from
            entityName if holder is a subtype and did inherit the field)</param>
            <returns>the real alias for the entityname + objectAlias combination. If not found, objectAlias is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.GetNewPerCallCatalogName(System.String)">
            <summary>
            Gets the new catalog name from the per-call hashtable name overwrites set into this object. If no per call name pairs are defined or the
            name passed in isn't found, the same name passed in is returned
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>the new name </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.GetNewPerCallSchemaName(System.String)">
            <summary>
            Gets the new schema name from the per-call hashtable name overwrites set into this object. If no per call name pairs are defined or the
            name passed in isn't found, the same name passed in is returned
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>the new name </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateCommand">
            <summary>
            Creates a new command instance
            </summary>
            <returns>Ready to use command instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.DetermineDbTypeNameForValue(System.Object,System.Object@)">
            <summary>
            Determines the db type name (ADO.NET provider specific typename) for value.
            </summary>
            <param name="value">The value.</param>
            <param name="realValueToUse">The real value to use. Normally it's the same as value, but in cases where value as a type isn't supported, the 
            value is converted to a value which is supported.</param>
            <returns>
            The name of the provider specific DbType enum name for the value specified
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertParameterOutputValueToRealValue``1(System.Data.Common.DbParameter)">
            <summary>
            Converts the parameter output value (contained in the parameter specified) to a real value. This is necessary for example if the value 
            of the parameter is a value of a type native to an ADO.NET provider, like OracleDecimal. 
            </summary>
            <typeparam name="T">type of the output</typeparam>
            <param name="parameter">The parameter.</param>
            <returns>value of parameter converted to the real value of type T.</returns>
            <remarks>A no-op for most databases, not for Oracle ODP.NET</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.PerCallCatalogNameOverwrites">
            <summary>
            Gets / sets perCallCatalogNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.PerCallSchemaNameOverwrites">
            <summary>
            Gets / sets perCallSchemaNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreatingSubQuery">
            <summary>
            Gets a value indicating whether the creator initiated a subquery creation. The DQE can then decide to limit the SQL emitting as some databases
            limit features for subqueries.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.FactoryToUse">
            <summary>
            Gets the DbProviderFactory instance to use.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificHintCreator">
            <summary>
            Interface for creating hints based on the input specified. Hints are used to tell the RDBMS to produce different SQL. 
            This interface is implemented on those IDatabaseSpecificGenerator implementing classes for which the RDBMS supports hints.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificHintCreator.CreateHintStatement(SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint,System.String,System.Object[])">
            <summary>
            Creates the hint statement for the hint passed in.
            </summary>
            <param name="hint">Hint specification to create the statement for.</param>
            <param name="targetName">Name of the target the hint is for. This name is in full format, so on sqlserver this is [catalog].[schema].[table] and on
            other databases it can be for example "schema"."table".</param>
            <param name="values">Additional parameters for the hint statement producer. The values can be very provider specific.</param>
            <returns>the hint statement, ready to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateCommand">
            <summary>
            Creates a new command.
            </summary>
            <returns>ready to use command object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(System.String,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.Object)">
            <summary>
            Creates a new, filled parameter.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="size">The size.</param>
            <param name="direction">The direction.</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a parameter based on the direction passed in and the value passed in.
            </summary>
            <param name="direction">Direction for the parameter</param>
            <param name="valueToSet">The value to set.</param>
            <returns>
            Valid parameter for usage with the target database.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <param name="valueToSet">Value to set the parameter to.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateLikeParameter(System.String)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type.
            </summary>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <returns>
            Valid parameter for usage with the target database.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateLikeParameter(System.String,System.String)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type.
            </summary>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <param name="targetFieldDbType">Type of the target field db, in provider specific enum string format (e.g. "Int" for SqlDbType.Int)</param>
            <returns>
            Valid parameter for usage with the target database.
            </returns>
            <remarks>This version ignores targetFieldDbType and calls CreateLikeParameter(fieldname, pattern). When you override this one, also
            override the other.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldName(field persistence info, fieldname, false);
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="containingObjectName">Name of the containing object which defined the field with name fieldName.</param>
            <param name="actualContainingObjectName">Name of the containing object which actually holds the field with the name fieldname.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <param name="containingObjectName">Name of the containing object which defined the field with name fieldName.</param>
            <param name="actualContainingObjectName">Name of the containing object which actually holds the field with the name fieldname.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean)">
            <summary>
            Creates the name for the field, and takes into account an aggregate function present and an expression present. If one or both are present, the
            field is replaced with (expression) or surrounded with (aggregate) the function (if applyAggregateFunction is true).
            </summary>
            <param name="fieldCore">fieldcore part of the field. Required to determine expression and aggregate function</param>
            <param name="persistenceInfo">persistence info object for the field.</param>
            <param name="fieldName">name for the field to be used</param>
            <param name="objectAlias">Alias for object hte field belongs to</param>
            <param name="applyAggregateFunction">flag to apply aggregate function or not. Aggregate functions can't be applied when the call originates
            from a predicate which is not part of a having clause.</param>
            <returns>string representing the field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldNameSimple(field persistence info, fieldname, false);. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateObjectName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Creates a valid object name (f.e. a name for a table or view) based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance which source object info is used to formulate the objectname</param>
            <returns>Valid object name</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertComparisonOperator(SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            Converts the passed in comparison operator to a string usable in a query.
            </summary>
            <param name="operatorToConvert">Operator to convert to string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertSortOperator(SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Converts the passed in sort operator to a string usable in a query
            </summary>
            <param name="operatorToConvert">sort operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertExpressionOperator(SD.LLBLGen.Pro.ORMSupportClasses.ExOp)">
            <summary>
            Converts the passed in expression operator (exop) to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Expression operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertSetOperator(SD.LLBLGen.Pro.ORMSupportClasses.SetOperator)">
            <summary>
            Converts the passed in set operator to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Set operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ToUpperFunctionName">
            <summary>
            Returns the SQL functionname to make a string uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new Select Query which is ready to use as a subquery, based on the specified select list and the specified set of relations.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldPersistenceInfos">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="groupByClause">the group by clause to use</param>
            <returns>
            IRetrievalQuery instance which is ready to be used.
            </returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use as a subquery, based on the specified select list and the specified set of relations.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldPersistenceInfos">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="groupByClause">the group by clause to use</param>
            <param name="allowDuplicates">If true, duplicates are allowed, otherwise DISTINCT (if applicable) is emitted.</param>
            <returns>
            IRetrievalQuery instance which is ready to be used.
            </returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateValidAlias(System.String)">
            <summary>
            Routine which creates a valid alias string for the raw alias passed in. For example, the alias will be surrounded by "[]" on sqlserver. 
            Used by the RelationCollection to produce a valid alias for joins.
            </summary>
            <param name="rawAlias">the raw alias to make valid</param>
            <returns>valid alias string to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.SetCreatorInDQE(SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase)">
            <summary>
            Sets this instance as the creator in the DQE.
            Used in subquery creations, to pass on the creator to a DQE.
            </summary>
            <param name="dqe">Dqe.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetRealValue(System.Object,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            Gets the real value, by converting the passed in value, if necessary
            </summary>
            <param name="currentValue">Current value.</param>
            <param name="typeConverterToUse">Type converter to use.</param>
            <param name="actualDotNetType">The actual type the value should have</param>
            <returns>the currentValue converted by the typeConverterToUse, or if it's an enum value and no typeConverter is specified, to actualDotNetType</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetNewPerCallCatalogName(System.String)">
            <summary>
            Gets the new catalog name from the per-call hashtable name overwrites set into this object. If no per call name pairs are defined or the
            name passed in isn't found, the same name passed in is returned
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>the new name </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetNewPerCallSchemaName(System.String)">
            <summary>
            Gets the new schema name from the per-call hashtable name overwrites set into this object. If no per call name pairs are defined or the
            name passed in isn't found, the same name passed in is returned
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>the new name </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateHintStatement(SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint,System.String,System.Object[])">
            <summary>
            Creates the hint statement for the hint passed in.
            </summary>
            <param name="hint">Hint specification to create the statement for.</param>
            <param name="targetName">Name of the target the hint is for. This name is in full format, so on sqlserver this is [catalog].[schema].[table] and on
            other databases it can be for example "schema"."table".</param>
            <param name="values">Additional parameters for the hint statement producer. The values can be very provider specific.</param>
            <returns>the hint statement, ready to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.FindRealAlias(System.String,System.String,System.String)">
            <summary>
            Finds the real alias for the entity + objectalias combination. A real alias is necessary as an entity mapped onto multiple tables (through inheritance)
            is aliased with a single object alias but each target has to have a different real alias.
            </summary>
            <param name="containingObjectName">Name of the entity the holder of the objectAlias is defined in</param>
            <param name="objectAlias">Object alias.</param>
            <param name="actualContainingObjectName">The name of the entity the holder of the object alias is actually present in (is only different from
            entityName if holder is a subtype and did inherit the field)</param>
            <returns>
            the real alias for the entityname + objectAlias combination. If not found, objectAlias is returned.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.DetermineDbTypeNameForValue(System.Object,System.Object@)">
            <summary>
            Determines the db type name (ADO.NET provider specific typename) for value.
            </summary>
            <param name="value">The value.</param>
            <param name="realValueToUse">The real value to use. Normally it's the same as value, but in cases where value as a type isn't supported, the 
            value is converted to a value which is supported.</param>
            <returns>
            The name of the provider specific DbType enum name for the value specified
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertParameterOutputValueToRealValue``1(System.Data.Common.DbParameter)">
            <summary>
            Converts the parameter output value (contained in the parameter specified) to a real value. This is necessary for example if the value 
            of the parameter is a value of a type native to an ADO.NET provider, like OracleDecimal. 
            </summary>
            <typeparam name="T">type of the output</typeparam>
            <param name="parameter">The parameter.</param>
            <returns>value of parameter converted to the real value of type T.</returns>
            <remarks>A no-op (returns parameter.Value) for most databases, not for Oracle ODP.NET</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertFieldToRawName(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean)">
            <summary>
            Converts the name of the field to the raw base name to use further in the CreateFieldName routine. This routine
            makes sure expressions and function calls are taken into account. Used as the start call from CreateFieldName.
            </summary>
            <param name="fieldCore">The field core.</param>
            <param name="persistenceInfo">The persistence info.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="applyAggregateFunction">if set to <c>true</c> [apply aggregate function].</param>
            <returns>
            base name for the field to use in a query.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.StripObjectNameChars(System.String)">
            <summary>
            Strips the object name chars from the name passed in. For example [name] will become name
            </summary>
            <param name="toStrip">To strip.</param>
            <returns>name without the name's object name chars (Which are db specific)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateNewAliasScope">
            <summary>
            Creates a new alias scope and makes it active.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.DestroyCurrentAliasScope">
            <summary>
            Destroys the current alias scope and makes the previous one active, if any.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.AddParameterToScopeTracker(System.Data.Common.DbParameter)">
            <summary>
            Adds the parameter to scope tracker.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameterName">
            <summary>
            Creates a name usable for a Parameter, based on "p" and a unique marker.
            </summary>
            <returns>Usable parameter name.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameterName(System.String)">
            <summary>
            Creates a name usable for a Parameter, based on "p" and a unique marker, prefxied with the prefix specified
            </summary>
            <param name="prefix">The prefix to apply to the name.</param>
            <returns>ready to use parameter name, properly prefixed</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameterInstance(System.String)">
            <summary>
            Creates a new parameter instance.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <returns>ready to use parameter object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameterInstance(System.Object)">
            <summary>
            Creates a new parameter instance. It sets the value but doesn't set the type so the parameter type depends on the value.
            </summary>
            <param name="valueToSet">The value to set.</param>
            <returns>ready to use parameter object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameterInstance(System.String,System.Object)">
            <summary>
            Creates a new parameter instance (with direction: input)
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="value">The value.</param>
            <returns>ready to use parameter object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameterInstance(System.String,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a new parameter instance.
            </summary>
            <param name="parameterType">Type of the parameter.</param>
            <param name="direction">The direction.</param>
            <param name="value">The value.</param>
            <returns>ready to use parameter object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateDynamicQueryEngine">
            <summary>
            Creates a new dynamic query engine instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.SetParameterType(System.Data.Common.DbParameter,System.String)">
            <summary>
            Sets the ADO.NET provider specific Enum type of the parameter, using the string presentation specified.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterType">Type of the parameter as string.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ProduceAliasScopeData(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Produces the alias scope data for the relations collection passed in, which define 0 or more aliases and form a separated scope.
            </summary>
            <param name="relations">Relations.</param>
            <remarks>produces the alias - entitynames in the current scope. If this has to be done in a new scope, call CreateNewAliasScope() first.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetValueToSet(System.Object)">
            <summary>
            Gets the value to set.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.PerCallCatalogNameOverwrites">
            <summary>
            Gets / sets perCallCatalogNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.PerCallSchemaNameOverwrites">
            <summary>
            Gets / sets perCallSchemaNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.AliasScopes">
            <summary>
            Gets the alias scopes.
            </summary>
            <value>The alias scopes.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreatingSubQuery">
            <summary>
            Gets a value indicating whether the creator initiated a subquery creation. The DQE can then decide to limit the SQL emitting as some databases
            limit features for subqueries.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.FactoryToUse">
            <summary>
            Gets the DbProviderFactory instance to use.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate">
            <summary>
            Predicate class to filter in-memory entity collections based on a specified callback function. 
            </summary>
            <remarks>Meant for in-memory filtering. Can't be used in database targeting filters.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicateCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate"/> class.
            </summary>
            <param name="callback">The callback to call for entity interpretation.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicateCallback,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate"/> class.
            </summary>
            <param name="callback">The callback to call for entity interpretation.</param>
            <param name="negate">flag to negate the results of the predicate</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
            <remarks>By default this method throws a NotSupported exception. It is only implemented on predicates which can be used
            for in-memory filtering.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate`1">
            <summary>
            Generic version of the DelegatePredicate predicate, to use with Predicate(Of T) predicates, which can be constructed with Lambda expressions.
            </summary>
            <typeparam name="TEntity">type of the entity this entity can work on.</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate`1.#ctor(System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate"/> class.
            </summary>
            <param name="func">The func to call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate`1.#ctor(System.Predicate{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate"/> class.
            </summary>
            <param name="func">The func to call.</param>
            <param name="negate">flag to negate the results of the predicate</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate`1.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
            <remarks>By default this method throws a NotSupported exception. It is only implemented on predicates which can be used
            for in-memory filtering.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate`1.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DelegatePredicate`1.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation">
            <summary>
            Class which is used for storing the information read from a DependencyInjectionInformation section in the config file. 
            Instances are created by the DependencyInjectionSectionHandler
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds the assembly.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation.AddNamespaceFilterFragment(System.String)">
            <summary>
            Adds the namespace filter fragment.
            </summary>
            <param name="namespaceFilterFragment">The namespace filter fragment.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation.AdditionalAssemblies">
            <summary>
            Gets / sets additionalAssemblies
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation.NamespaceFilterFragments">
            <summary>
            Gets / sets namespaceFilterFragments
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionDiscoveryInformation">
            <summary>
            Static class which is used to set discovery information for dependency injection info for the situation when there's no config file available
            in the application. Set the variables of this static class as soon as possible at the startup of your application so the initialization of this 
            class, if required, is ran before an entity is instantiated so the DependencyInjectionInfoProvider is initialized after this class is initialized 
            by your application. 
            </summary>
            <remarks>Use this class only if you don't want to provide dependencyinjection information in the config file of your application.</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionDiscoveryInformation.PerformAutoDiscoveryDependencyInjectionInformation">
            <summary>
            Flag to signal the DependencyInjectionProvider that the auto discovery of dependency injection info in the assemblies of the application should be
            performed (true) or not (false). Default: false
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionDiscoveryInformation.ConfigInformation">
            <summary>
            Set this object to an instance of DependencyInjectionConfigInformation with the assemblies / namespace fragments as if it was loaded from the
            config file. If you need information read from the config file, leave this field to null / Nothing (default) so it will signal the 
            DependencyInjectionInfoProvider to read the config file for additional information instead. 
            </summary>
            <remarks>Is initially null. Only set this field to a value if you don't use the config file to specify additional dependency injection 
            information and assemblies.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProviderSingleton">
            <summary>
            Singleton class which contains the single instance of the DependencyInjectionProvider 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProviderSingleton.#cctor">
            <summary>Dummy static constructor to make sure threadsafe initialization is performed.</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProviderSingleton.GetInstance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProviderSingleton.PerformDependencyInjection(System.Object)">
            <summary>
            Performs the dependency injection of the objects to inject into the target specified.
            </summary>
            <param name="injectionTarget">The target to inject objects in.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider">
            <summary>
            Dependency Injection Info provider class. This class provides the orm support classes with dependency injection information
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.GetInstancesToInject(System.Type)">
            <summary>
            Gets the instances to inject.
            </summary>
            <param name="targetType">Type of the target to inject instances in.</param>
            <returns>A dictionary with per PropertyName the injection data with the instance to inject, or null if nothing can be injected.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.BeginScope(SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage)">
            <summary>
            Marks the begin of a scope and therefore creates the scope data storage.
            </summary>
            <param name="scopeStorage">The scope storage to use. This scopestorage is passed in by the di scope started.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.EndScope">
            <summary>
            Marks the end of a scope and therefore removes the scope data created.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.GetScopeSpecificInstancesToInject(System.Type)">
            <summary>
            Gets the scope specific instances to inject. This traverses the stack from top to bottom starting with the last pushed scope storage.
            If collects all the injection info for the given targetType over all the scopes on the stack. If a scope which is pushed later on the stack
            overrules injection info for a given propertyname, the info of the scope pushed later on the stack is used. 
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>Dictionary with for each propertyname the injection data with the object to inject or null if no data to inject was found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.RetrieveDIInfoUsingAttributes(SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionConfigInformation,SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute})">
            <summary>
            Retrieves the DI info which is defined using attributes and stores that inside the central storage.
            </summary>
            <param name="diInfoFromConfig">The di info from config.</param>
            <param name="instanceTypesFound">The instance types found.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.InterfaceInstanceTypes">
            <summary>
            Gets the interface target types discovered from the assemblies in the application
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoProvider.NormalInstanceTypes">
            <summary>
            Gets the normal target types discovered from the assemblies in the application
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypeDiscoverer">
            <summary>
            Class which is used to discover types in either the appdomain or the assembly passed in. This class can either be used in its own appdomain
            (for appdomain wide discovery) or in the executing appdomain (for assembly traversal).
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TypeDiscoverer._filter">
            <summary>
            Filter of assemblies which don't have to be traversed to search for annotated types as they're part of the .NET framework.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeDiscoverer.Discover(System.Collections.Generic.List{System.Reflection.AssemblyName})">
            <summary>
            Discovers the specified assembly names passed in from the current application domain
            </summary>
            <param name="assemblyNamesCurrentAD">The assembly names of the current application domain.</param>
            <returns>List of types (keys) which are annotated with the DependencyInjectionInfoAttribute (values), thus which are instance types for DI</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeDiscoverer.GatherInstanceTypes(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute},System.Reflection.Assembly)">
            <summary>
            Gathers the instance types (types which have the DependencyInjectionInfoAttribute annotated onto them)
            </summary>
            <param name="instanceTypes">The instance types already collected and to which the new types have to be added.</param>
            <param name="toExamine">To examine.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeDiscoverer.Discover(System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.String,System.Reflection.AssemblyName},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            traverses the assemblies recursively and and collects the assembly names of the assemblies which aren't in the .NET framework but which could
            have DI annotated types in them.
            </summary>
            <param name="toDiscover">assembly to discover.</param>
            <param name="names">The names already collected.</param>
            <param name="assembliesTraversed">The assemblies already traversed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeDiscoverer.CheckIfAssemblyIsAllowed(System.Reflection.AssemblyName)">
            <summary>
            Checks if assembly is allowed.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>true if allowed, otherwise false.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage">
            <summary>
            Class which contains information for the dependency injection logic. The data inside this storage is either filled by code in a scope, or 
            read from attributes
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage._dependencyInfoDataCache">
            <summary>
            Dictionary which contains per Type the injection information applicable for that type. If the list of injectioninfos is empty for a given type,
            that type doesn't have any injection info and isn't a target for any instance type. Initially this cache is empty and is filled on the fly when
            the first type a target type needs objects injected. 
            
            Locking mechanism is as follows: It uses a monitor object to schedule reads/writes
            - First a reader lock is obtained to see if a type is in the cache. If so, injectioninfo's are returned, lock is released. 
            - if a type isn't present in the cache, it's considered not yet discovered. So the thread will create the InjectionInfo for the type.
              when done, it will obtain a writer lock and check again if the type is present. If not, it will add the injection info and release the lock
              if it IS present it will drop its own data and will use the present info (which is thus added by another thread during creation of the
              injectioninfo). This gives the best performance as the writers don't block reads (reads are readonly always: the data is never modified) and
              writers are only be frequently writing at the start of the application. After a while all access are reads, as all types are then cached. 
            </summary>
            <remarks>Every type stored as key can be injected with the instance defined in injectioninfo.</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage._instanceCache">
            <summary>
            Instance cache for instances of instancetypes which have to act as singleton's (per thread). Key is the instance type, value is the instance to pick.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.GetInstancesToInject(System.Type)">
            <summary>
            Gets the instances to inject.
            </summary>
            <param name="targetType">Type of the target to inject instances in.</param>
            <returns>A MergeableDictionary with per PropertyName the injection data with the instance to inject, or null if nothing can be injected.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.BuildInjectionInfo(System.Type)">
            <summary>
            Builds the injection info list for the type passed in. This list has to be compiled once for each type and is then cached in the
            _dependencyInfoDataCache.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>list of injectioninfo objects for the target type or null if the targettype isn't a target for any instance type known.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.ProcessInjectionConfigInfos(System.Collections.Generic.Dictionary{System.String,SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo},SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo},System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo},System.Type)">
            <summary>
            Processes the injection config infos into InjectionInfo objects
            </summary>
            <param name="propertiesAlreadyTaken">The properties already taken.</param>
            <param name="collectedInjectionInfos">The collected injection infos.</param>
            <param name="infosToProcess">The infos to process.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.GetInheritanceHierarchy(System.Type,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Gets the inheritance hierarchy for the type passed in. The type passed in is NOT added to the hierarchy.
            </summary>
            <param name="currentType">Type of the current.</param>
            <param name="collectedTypes">The collected types.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.BuildStorage(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo},SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo})">
            <summary>
            Builds the storage data from the passed in injectioninfo's to quickly find back injection info when a type needs its instances injected.
            </summary>
            <param name="normalTargetTypes">The normal target types found.</param>
            <param name="interfaceTargetTypes">The interface target found.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoStorage.GetInstanceForInjection(SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo)">
            <summary>
            Get the instance for the injection info passed in.
            </summary>
            <param name="info">The info.</param>
            <returns>the instance to inject</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope">
            <summary>
            Abstract class which defines a Dependency Injection scope in which dependency injection takes place with the information provided with this scope.
            </summary>
            <remarks>To use a dependency injection scope to define dependency injection for a specific area in your code, derive a class from this
            class and fill it with data using subsequential calls to the AddInjectionInfo method from within an override of <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.InitializeScope"/>. 
            Instantiate the scope with a using statement which will automatically close the scope when Dispose is called.
            Languages which don't have a using statement (e.g. VB.NET in .NET 1.x) should call Dispose manually.
            The scope is thread safe and local to the calling thread. Don't pass scopes to other threads.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope"/> class. 
            </summary>
            <remarks>The scope is automatically started by this ctor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.BeginScope">
            <summary>
            (Re)starts the scope and will add the scope to the dependency injection provider. Use this method if the scope was already stopped via the
            EndScope or (indirectly) through the Dispose method, and you want to re-start it, which can be useful if your scope contains a lot of injection 
            info and rebuilding it can take a couple of milliseconds so you can store scope instances in a thread local cache for example. 
            </summary>
            <remarks>You don't have to call StartScope explicitly after you've created the scope instance as the constructor calls StartScope automatically</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.InitializeScope">
            <summary>
            Initializes the scope. Use this method to add injection info to the scope by subsequential calls to AddInjectionInfo
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.AddInjectionInfo(System.Type,System.Type,System.String)">
            <summary>
            Adds the injection info passed in to the scope data. Call this method one or more times from an override of <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.InitializeScope"/>.
            </summary>
            <param name="instanceType">Type of the instance to inject.</param>
            <param name="targetType">Type of the target which contains propertyName and which gets an instance of instanceType injected.</param>
            <param name="propertyName">Name of the property to set with an instace of instanceType.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.AddInjectionInfo(System.Type,System.Type,System.String,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionTargetKind,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionContextType)">
            <summary>
            Adds the injection info passed in to the scope data. Call this method one or more times from an override of <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.InitializeScope"/>.
            </summary>
            <param name="instanceType">Type of the instance to inject.</param>
            <param name="targetType">Type of the target which contains propertyName and which gets an instance of instanceType injected.</param>
            <param name="propertyName">Name of the property to set with an instace of instanceType.</param>
            <param name="targetKind">targetKind definition.</param>
            <param name="contextType">contextType definition.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.EndScope">
            <summary>
            Ends the scope and removes the scope from the dependency injection provider. After this method, call StartScope again to re-add the DI data to
            the provider again. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionSectionHandler">
            <summary>
            Handles the DependencyInjectionInformation section in the config file and creates an instance of DependencyInjectionConfigInformation with
            information stored in the section.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates an instance of DependencyInjectionConfigInformation with the information defined in the config file
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>an instance of DependencyInjectionConfigInformation with the information read from the config file.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionSectionHandler.CreateStatic(System.Xml.XmlNode)">
            <summary>
            Performs the Create method's logic statically to be thread safe. 
            </summary>
            <param name="section">The section.</param>
            <returns>an instance of DependencyInjectionConfigInformation with the information read from the config file.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionSectionHandler.ParseInstanceTypeFilters(System.Xml.XmlNode)">
            <summary>
            Parses the instance type filters node in a DependencyInjectionInformation section
            </summary>
            <param name="instanceTypeFiltersNode">The instance type filters node.</param>
            <returns>List with fragments for namespaces to filter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionSectionHandler.ParseAssemblies(System.Xml.XmlNode)">
            <summary>
            Parses the additionalAssemblies node in a DependencyInjectionInformation section.
            </summary>
            <param name="assembliesNode">The assemblies node.</param>
            <returns>List with assembly instances of the assemblies specified.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition">
            <summary>
            Class to define a derived table. A derived table is a select statement which is used inside a FROM clause of a query. Use derived table
            definitions in combination of DynamicRelation objects to build your query.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition">
            <summary>
            Interface to define a derived table. A derived table is a select statement which is used inside a FROM clause of a query. Use derived table
            definitions in combination of DynamicRelation objects to build your query. Implemented in DerivedTableDefinition.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.GetEntityFieldCore(System.Int32)">
            <summary>
            Returns the IEntityFieldCore part of the field at position index
            </summary>
            <param name="index">index of field to return the IEntityFieldCore portion of</param>
            <returns>the IEntityFieldCore part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.GetEntityFieldCore(System.String)">
            <summary>
            Returns the IEntityFieldCore part of the field in this derived table with the alias specified
            </summary>
            <param name="fieldAlias">The field alias.</param>
            <returns>field with the alias specified or null if not found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.GetFieldsAsArray">
            <summary>
            Gets the fields as an IEntityFieldCore array.
            </summary>
            <returns>IEntityFieldCore array with all the fields of the derived table</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.GetPersistenceInfosAsArray">
            <summary>
            Gets the persistence infos as an IFieldPersistenceInfo array.
            </summary>
            <returns>IFieldPersistenceInfo array with all the persistence infos for the fields of the derived table</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.GetFieldPersistenceInfo(System.Int32)">
            <summary>
            Returns the IFieldPersistenceInfo part of the field at position index
            </summary>
            <param name="index">index of field to return the IFieldPersistenceInfo portion of</param>
            <returns>the IFieldPersistenceInfo part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.SetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Int32)">
            <summary>
            Sets the IFieldPersistenceInfo part of the field at position index.
            Adapter specific.
            </summary>
            <param name="persistenceInfo">The field persistence info object to set</param>
            <param name="index">index of field to set the persistence info of</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.AppendField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Appends the field passed in to the list of fields. 
            </summary>
            <param name="fieldToAppend">The field to append.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.Alias">
            <summary>
            Gets / sets alias
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.AllowDuplicates">
            <summary>
            Gets / sets allowDuplicates
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.Relations">
            <summary>
            Gets / sets relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.Sorter">
            <summary>
            Gets / sets sorter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.GroupBy">
            <summary>
            Gets / sets groupBy
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.MaxNumberOfItemsToReturn">
            <summary>
            Gets / sets maxNumberOfItemsToReturn
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDerivedTableDefinition.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
            <param name="filter">The filter to use in the derived table. Can be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
            <param name="filter">The filter to use in the derived table. Can be null.</param>
            <param name="relations">The relations to use in the derived table. Can be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
            <param name="filter">The filter to use in the derived table. Can be null.</param>
            <param name="groupBy">The group by collection to use in the derived table. Can be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
            <param name="filter">The filter to use in the derived table. Can be null.</param>
            <param name="relations">The relations to use in the derived table. Can be null.</param>
            <param name="groupBy">The group by collection to use in the derived table. Can be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
            <param name="filter">The filter to use in the derived table. Can be null.</param>
            <param name="relations">The relations to use in the derived table. Can be null.</param>
            <param name="sorter">The sort expression to use in the derived table. Can be null.</param>
            <param name="groupBy">The group by collection to use in the derived table. Can be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.#ctor(System.Collections.IEnumerable,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition"/> class.
            </summary>
            <param name="fields">The fields which form the select list for the derived table.</param>
            <param name="alias">The alias for the derived table to use.</param>
            <param name="filter">The filter to use in the derived table. Can be null.</param>
            <param name="relations">The relations to use in the derived table. Can be null.</param>
            <param name="sorter">The sort expression to use in the derived table. Can be null.</param>
            <param name="groupBy">The group by collection to use in the derived table. Can be null.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 for all items.</param>
            <param name="allowDuplicates">flag to signal if duplicates are allowed (true, default) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.AppendField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Appends the field passed in to the list of fields. 
            </summary>
            <param name="fieldToAppend">The field to append.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.GetEntityFieldCore(System.Int32)">
            <summary>
            Returns the IEntityFieldCore part of the field at position index
            </summary>
            <param name="index">index of field to return the IEntityFieldCore portion of</param>
            <returns>the IEntityFieldCore part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.GetEntityFieldCore(System.String)">
            <summary>
            Returns the IEntityFieldCore part of the field in this derived table with the alias specified
            </summary>
            <param name="fieldAlias">The field alias.</param>
            <returns>field with the alias specified or null if not found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.GetFieldPersistenceInfo(System.Int32)">
            <summary>
            Returns the IFieldPersistenceInfo part of the field at position index
            </summary>
            <param name="index">index of field to return the IFieldPersistenceInfo portion of</param>
            <returns>the IFieldPersistenceInfo part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.SetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Int32)">
            <summary>
            Sets the IFieldPersistenceInfo part of the field at position index.
            Adapter specific.
            </summary>
            <param name="persistenceInfo">The field persistence info object to set</param>
            <param name="index">index of field to set the persistence info of</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.GetFieldsAsArray">
            <summary>
            Gets the fields as an IEntityFieldCore array.
            </summary>
            <returns>IEntityFieldCore array with all the fields of the derived table</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.GetPersistenceInfosAsArray">
            <summary>
            Gets the persistence infos as an IFieldPersistenceInfo array.
            </summary>
            <returns>IFieldPersistenceInfo array with all the persistence infos for the fields of the derived table</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.AddRelations(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the relations specified.
            </summary>
            <param name="relationsToAdd">The relations to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.ReplaceFieldAtIndex(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Replaces the field at the index specified with the new field passed in.
            </summary>
            <param name="newField">The new field.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.Alias">
            <summary>
            Gets / sets alias
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.AllowDuplicates">
            <summary>
            Gets / sets allowDuplicates
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.Relations">
            <summary>
            Gets / sets relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.Sorter">
            <summary>
            Gets / sets sorter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.GroupBy">
            <summary>
            Gets / sets groupBy
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.MaxNumberOfItemsToReturn">
            <summary>
            Gets / sets maxNumberOfItemsToReturn
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFinder">
            <summary>
            Class which finds all derived table definitions in the object to traverse, e.g. a relation collection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Traverses the specified derived table
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableFinder.DerivedTablesFound">
            <summary>
            Gets the list of derived tables found.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder">
            <summary>
            Class which is used to find all fields in query elements which target a derived table. These fields then can be post-processed to see
            if they have to be renamed because they're in an inheritance hierarchy. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.#ctor(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder"/> class.
            </summary>
            <param name="knownDerivedTables">The known derived tables.</param>
            <param name="testOnFieldAliasAsWell">If set to true, the routine which check if the alias of the field is present in the derived table if the
            fieldname itself isn't.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],System.String)">
            <summary>
            Traverses the specified fields.
            </summary>
            <param name="fields">The fields.</param>
            <param name="selectListAlias">The select list alias to use. If empty, the fields are expected to have their own objectalias property set</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.Traverse(System.Object)">
            <summary>
            Finds the fields which target a derived table. 
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field and related objects.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Traverses the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="objectAlias">The object alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.TraversePredicateField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Traverses the predicate field.
            </summary>
            <param name="field">The field as found in the predicate.</param>
            <param name="objectAlias">The object alias set in the predicate for the field .</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.FieldsFound">
            <summary>
            Gets the fields found which target a derived table. Key is field, value is value if the field is present under its alias in the derived table  
            under its name or not at all.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableTargetingFieldFinder.DerivedTablePerField">
            <summary>
            Gets the derived table targeted per field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DesignTimeUtilities">
            <summary>
            General class which contains utility methods for design time activities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DesignTimeUtilities.FindTypes(System.IServiceProvider,System.Type,System.Boolean)">
            <summary>
            Finds the types in the projects loaded which implement / derive from the defining type. If excludeDefiningType is true, the 
            returned list won't include that type, if found.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="definingType">Type of the defining.</param>
            <param name="excludeDefiningType">if set to <c>true</c> [exclude defining type].</param>
            <returns>List with Type objects which implement or derive from the defining type.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase">
            <summary>
            Abstract base class for the DynamicRelation class which is generated. Dynamic relations have always their left operand defined as the 'pk' side
            if applicable.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation">
            <summary>
            Interface definition for the DynamicRelation class. This interface is implemented on the DynamicRelationBase class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelation">
            <summary>
            Simple interface for relation which is the base interface for IDynamicRelation and IEntityRelation
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.ToggleArtificialAliasingForTargetPerEntityRelations(System.Boolean)">
            <summary>
            Enables / disables the artificial aliasing for target per entity relations. This method is used to enable the artificial aliasing of entities which
            are in a hierarchy of TargetPerEntity and which are in this relation. This is switched on for dyn/typedlist fetches to be sure 
            dyn/typedlists with fields from multiple entities in the same inheritance hierarchy will be retrievable properly, as they need aliasing under the hood
            but if the developer didn't alias the entities, the query will fail because the supertype(s) aren't joined multiple types. 
            </summary>
            <param name="enable">if set to true, enable artificial aliasing, otherwise false (default).</param>
            <remarks>Artificial aliasing is disabled by default</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between. Also, if the relation contains derived tables, the fields filed under the alias of the derived table are returned.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
            <param name="artificialAliasPerEntity">The artificial alias per entity. This collection contains per entity (key) the artificial alias (value), IF
            such an artificial alias has been given out. (only done with entities which are part of a hierarchy of type TargetPerEntity)</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.AliasLeftOperand">
            <summary>
            Gets the alias for the left operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.AliasRightOperand">
            <summary>
            Gets the alias for the right operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.JoinType">
            <summary>
            The join type to use. If right operand is null and left operand is a DerivedTableDefinition, this value is ignored.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.StartElementIsPkSide">
            <summary>
            Returns true if the start element of the relation (the left operand) is the Pkside.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.LeftOperandInheritanceInfo">
            <summary>
            Gets the left operand's InheritanceInfo
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelation.RightOperandInheritanceInfo">
            <summary>
            Gets the right operand's InheritanceInfo
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.SetLeftOperandPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the left operand persistence info.
            </summary>
            <param name="persistenceInfo">The persistence info.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.SetRightOperandPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the right operand persistence info.
            </summary>
            <param name="persistenceInfo">The persistence info.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.OnClause">
            <summary>
            Gets the On clause filter for the On clause in the join. Should be null if a cross-join is used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.LeftOperand">
            <summary>
            Gets the left operand. Can be either a DerivedTableDefinition or an entity field (IEntityFieldCore)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.RightOperand">
            <summary>
            Gets the right operand. Can be either a DerivedTableDefinition or an entity field (IEntityFieldCore) or null (left operand then has to be a 
            DerivedTableDefinition)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.LeftOperandPersistenceInfo">
            <summary>
            Gets the persistence info for the left operand. Is null if left operand is a DerivedTableDefinition instead of an IEntityFieldCore
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.RightOperandPersistenceInfo">
            <summary>
            Gets the persistence info for the right operand. Is null if right operand is a DerivedTableDefinition instead of an IEntityFieldCore
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.LeftOperandIsDerivedTable">
            <summary>
            Returns true of the left operand Is a DerivedTableDefinition
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation.RightOperandIsDerivedTable">
            <summary>
            Returns true of the right operand Is a DerivedTableDefinition
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Object,System.Object)">
            <summary>
            Inits the class.
            </summary>
            <param name="joinType">Type of the join.</param>
            <param name="aliasLeftOperand">The alias left operand.</param>
            <param name="aliasRightOperand">The alias right operand.</param>
            <param name="onClause">The on clause.</param>
            <param name="leftOperand">The left operand.</param>
            <param name="rightOperand">The right operand.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.SetLeftOperandPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the left operand persistence info.
            </summary>
            <param name="persistenceInfo">The persistence info.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.SetRightOperandPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the right operand persistence info.
            </summary>
            <param name="persistenceInfo">The persistence info.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#ToggleArtificialAliasingForTargetPerEntityRelations(System.Boolean)">
            <summary>
            Enables / disables the artificial aliasing for target per entity relations. This method is used to enable the artificial aliasing of entities which
            are in a hierarchy of TargetPerEntity and which are in this relation. This is switched on for dyn/typedlist fetches to be sure 
            dyn/typedlists with fields from multiple entities in the same inheritance hierarchy will be retrievable properly, as they need aliasing under the hood
            but if the developer didn't alias the entities, the query will fail because the supertype(s) aren't joined multiple types. 
            </summary>
            <param name="enable">if set to true, enable artificial aliasing, otherwise false (default).</param>
            <remarks>Artificial aliasing is disabled by default</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between. Also, if the relation contains derived tables, the fields filed under the alias of the derived table are returned.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
            <param name="artificialAliasPerEntity">The artificial alias per entity. This collection contains per entity (key) the artificial alias (value), IF
            such an artificial alias has been given out. (only done with entities which are part of a hierarchy of type TargetPerEntity)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.GetInheritanceProvider">
            <summary>
            Gets the inheritance provider for inheritance info retrieval for entity operands
            </summary>
            <returns>The inheritance info provider</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.CheckifAliasIsArtificial(System.Boolean)">
            <summary>
            Checks if the alias for the side specified is indeed an artificial alias. Artificial aliases are issued for sides which don't have
            an alias set and which are in a targetperentity hierarchy. Will always return false if the side specified is a derived table.
            </summary>
            <param name="leftOperand">if set to <c>true</c> [left operand].</param>
            <returns>
            true if the side has an artificial alias so Alias* returns an artificial alias.
            </returns>
            <remarks>Returns always false if artificial aliasing is disabled (default) and if the side is a derived table.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.GetOperandData(System.Object,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo@)">
            <summary>
            Gets the describing field for the operand passed in and the inheritance info for the entity. Operand is either an adapter entity or a selfservicing entity
            </summary>
            <param name="operand">The operand.</param>
            <param name="isLeftOperand">if set to <c>true</c> [is left operand].</param>
            <param name="inheritanceInfo">The inheritance info of the operand</param>
            <returns>
            field which describes operand, e.g. the PK field of the entity. Just one is needed.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.DetermineAlias(System.Boolean)">
            <summary>
            Determines the alias for the side specified
            </summary>
            <param name="leftOperand">if set to <c>true</c> [left operand].</param>
            <returns>the alias for the side requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.ToggleArtificialAliasingForTargetPerEntityRelations(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo)">
            <summary>
            Toggles the artificial aliasing for target per entity relations in the relations to the hierarchy root in the inheritanceinfo object passed in.
            </summary>
            <param name="enable">the value to set</param>
            <param name="inheritanceInfo">The inheritance info.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#StartElementIsPkSide">
            <summary>
            Returns true if the start element of the relation (the left operand) is the Pkside.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.LeftOperandInheritanceInfo">
            <summary>
            Gets the left operand's InheritanceInfo
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.RightOperandInheritanceInfo">
            <summary>
            Gets the right operand's InheritanceInfo
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.AliasLeftOperand">
            <summary>
            Gets the alias for the left operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.AliasRightOperand">
            <summary>
            Gets the alias for the right operand.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.OnClause">
            <summary>
            Gets the On clause filter for the On clause in the join. Should be null if a cross-join is used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.LeftOperand">
            <summary>
            Gets the left operand. Can be either a DerivedTableDefinition or an entity field (IEntityFieldCore)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.RightOperand">
            <summary>
            Gets the right operand. Can be either a DerivedTableDefinition or an entity field (IEntityFieldCore) or null (left operand then has to be a 
            DerivedTableDefinition)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.LeftOperandPersistenceInfo">
            <summary>
            Gets the persistence info for the left operand. Is null if left operand is a DerivedTableDefinition instead of an IEntityFieldCore
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.RightOperandPersistenceInfo">
            <summary>
            Gets the persistence info for the right operand. Is null if right operand is a DerivedTableDefinition instead of an IEntityFieldCore
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.LeftOperandIsDerivedTable">
            <summary>
            Returns true of the left operand Is a DerivedTableDefinition
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.RightOperandIsDerivedTable">
            <summary>
            Returns true of the right operand Is a DerivedTableDefinition
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicRelationBase.JoinType">
            <summary>
            The join type to use. If right operand is null and left operand is a DerivedTableDefinition, this value is ignored.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase">
            <summary>
            Central base class for all DynamicQueryEngine classes. Shared logic is placed in this class, which can be overriden in the DynamicQueryEngine
            classes per database.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.InsertQueryBufferLength">
            <summary>
            Length of buffer in which Insert queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DeleteQueryBufferLength">
            <summary>
            Length of buffer in which Delete queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.UpdateQueryBufferLength">
            <summary>
            Length of buffer in which Update queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.SelectQueryBufferLength">
            <summary>
            Length of buffer in which Select queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.SelectJoinQueryBufferLength">
            <summary>
            Length of buffer in which Join constructs for select queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.SelectResultSetBufferLength">
            <summary>
            Length of buffer in which resultset definitions for select queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.Switch">
            <summary>
            The traceswitch used in the DQE. Set in the static constructor of the derived class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase"/> instance.
            </summary>
            <param name="useAliasesForExpressionsInSortClauses">flag to pass to sortClauses.ToQueryText to use aliases for expression (true) or not (false)</param>
            <param name="useRestrictedLengthOnAliasesOfFields">if set to true, aliases on fields are limited to 27 characters, otherwise no limit is used</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetNewCatalogName(System.String)">
            <summary>
            Gets the new name for the catalog, given the current name. If the current name is not found in the list of catalog name overwrites, 
            the current name is returned. This routine works on the catalog names specified in the config file.
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>New name for the catalog which name was passed in.</returns>
            <remarks>Thread safe, because the hashtable is never modified during execution.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetNewSchemaName(System.String)">
            <summary>
            Gets the new name for the schema, given the current name. If the current name is not found in the list of schema name overwrites, 
            the current name is returned. This routine works on the schema names specified in the config file.
            </summary>
            <param name="currentName">current Name</param>
            <returns>New name for the schema which name was passed in.</returns>
            <remarks>Thread safe, because the hashtable is never modified during execution.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetNewStoredProcedureName(System.String)">
            <summary>
            Gets the new name of the stored procedure passed in. Overwrites schema and catalog name with a new name if these names
            have been defined for overwriting. This routine works on the catalog and schema names specified in the config file.
            </summary>
            <param name="currentName">current Name</param>
            <remarks>Thread safe, because the hashtable is never modified during execution.</remarks>
            <returns>full stored procedure name with new catalog name/schema name.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetNewPerCallStoredProcedureName(System.String)">
            <summary>
            Gets the new name of the stored procedure passed in. Overwrites schema and catalog name with a new name if these names
            have been defined for overwriting.  This routine works on the PerCallCatalogNameOverwrites and PerCallSchemaNameOverwrites names specified on this instance
            </summary>
            <param name="currentName">current Name</param>
            <remarks>Thread safe, because the hashtable is never modified during execution.</remarks>
            <returns>full stored procedure name with new catalog name/schema name.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetNewSequenceName(System.String)">
            <summary>
            Gets the new name of the sequence passed in. Overwrites schema name with a new name if the name
            has been defined for overwriting. 
            </summary>
            <param name="currentName">current Name</param>
            <remarks>Thread safe, because the hashtable is never modified during execution.</remarks>
            <returns>full stored procedure name with new catalog name/schema name.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetNewPerCallSequenceName(System.String)">
            <summary>
            Gets the new name of the sequence passed in. Overwrites schema name with a new name if the name
            has been defined for overwriting. Works on the PerCallSchemaNameOverwrites set.
            </summary>
            <param name="currentName">current Name</param>
            <remarks>First the per-call name overwriting is called, then the config file defined name overwriting is called with the
            name retrieved from the per-call name overwriting, so config file settings overrule per-call settings, though are controlled by
            the per-call name overwriting.</remarks>
            <returns>full stored procedure name with new catalog name/schema name.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.Common.DbConnection)">
            <summary>
            Creates a new Insert Query object which is ready to use. 
            </summary>
            <param name="fields">EntityFields object to use to build the insert query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <returns>IActionQuery Instance which is ready to be used.</returns>
            <remarks>Self servicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityField instances.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection)">
            <summary>
            Creates a new Insert Query object which is ready to use. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the insert query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <returns>IActionQuery Instance which is ready to be used.</returns>
            <remarks>Generic version.</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException">When there are no fields to insert in the fields list. This exception is to prevent 
            INSERT INTO table () VALUES () style queries.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Data.Common.DbParameter})">
            <summary>
            Creates a new Insert Query object which is ready to use.
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the insert query</param>
            <param name="query">The query object to fill.</param>
            <param name="fieldToParameter">Hashtable which will contain after the call for each field the parameter which contains or will contain
            the field's value.</param>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException">When there are no fields to insert in the fields list. This exception is to prevent
            INSERT INTO table () VALUES () style queries.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="query">The query object to fill.</param>
            <param name="deleteFilter">A complete IPredicate implementing object which contains the filter for the rows to delete</param>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalDeleteFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="query">The query object to fill.</param>
            <param name="deleteFilter">A complete IPredicate implementing object which contains the filter for the rows to delete</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetDeleteDQUsingCorrelatedSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="query">The query object to fill.</param>
            <param name="deleteFilter">A complete IPredicate implementing object which contains the filter for the rows to delete</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetDeleteDQUsingKeywordClause(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String)">
            <summary>
            Creates a new Delete Query object which is ready to use. Uses keyword clause (using keyword FROM/USING etc.)) for filtering
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="query">The query object to fill.</param>
            <param name="deleteFilter">A complete IPredicate implementing object which contains the filter for the rows to delete</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <param name="keyword">The keyword for the filter clause</param>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.Common.DbConnection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFields are included in the update query.
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">EntityFields object to use to build the update query.</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityField instances.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.Common.DbConnection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query. 
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">EntityFields object to use to build the update query.</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalUpdateFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or when relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityField instances.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate})">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore fields are included in the update query. 
            </summary>
            <param name="fields">EntityFieldCore array to use to build the update query.</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IPredicate},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query.
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalUpdateFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or 
            when relationsToWalk is null or when fieldsPersistence is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore fields are included in the update query. 
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">EntityFieldCore array to use to build the update query.</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="query">The query object to fill.</param>
            <param name="updateFilter">A complete IPredicate implementing object which contains the filter for the rows to update</param>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query.
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="query">The query object to fill.</param>
            <param name="updateFilter">A complete IPredicate implementing object which contains the filter for the rows to update</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or 
            when relationsToWalk is null or when fieldsPersistence is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetUpdateDQUsingCorrelatedSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query.
            Primary Key fields are never updated. Uses a correlated subquery for filtering
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="query">The query object to fill.</param>
            <param name="updateFilter">A complete IPredicate implementing object which contains the filter for the rows to update</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="addSetClauseParametersLast">if set to <see langword="true"/> it will add the update set clause parameters as the last set of
            parameters to the command object. Some ado.net providers need this (OleDb / Jet for example)</param>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or
            when relationsToWalk is null or when fieldsPersistence is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetUpdateDQUsingFromClause(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query.
            Primary Key fields are never updated. Uses a FROM clause for filtering
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="query">The query object to fill.</param>
            <param name="updateFilter">A complete IPredicate implementing object which contains the filter for the rows to update</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or
            when relationsToWalk is null or when fieldsPersistence is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use. If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.Common.DbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of fields to select</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="pageNumber">the page number to retrieve. First page starts with 1.</param>
            <param name="pageSize">the page size to retrieve. If set to 0 or 1 no paging logic is applied.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or when relationsToWalk is null.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityField instances.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains one or more EntityField instances which are not present in a filled groupByClause.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="pageNumber">the page number to retrieve. First page starts with 1. If set to 0 or lower, no paging logic is applied</param>
            <param name="pageSize">the page size to retrieve. If set to 0 no paging logic is applied.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="query">The query to fill.</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="relationsSpecified">flag to signal if relations are specified, this is a result of a check. This routine should
            simply assume the value of this flag is correct.</param>
            <param name="sortClausesSpecified">flag to signal if sortClauses are specified, this is a result of a check. This routine should
            simply assume the value of this flag is correct.</param>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreatePagingSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="conectionToUse">The conection to use.</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="pageNumber">the page number to retrieve. First page starts with 1. If set to 0 or lower, no paging logic is applied</param>
            <param name="pageSize">the page size to retrieve. If set to 0 no paging logic is applied.</param>
            <returns>ready to use query</returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateRowCountDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.Common.DbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a select query which will be executed as a scalar, and which will return a single value, the number of rows in the query
            formed by the elements passed in. 
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DetermineIfFieldAliasIsRequired(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Determines if field alias is required.
            </summary>
            <param name="persistenceInfo">The persistence info.</param>
            <param name="field">The field.</param>
            <returns>true if the field alias should be emitted, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.HandleDistinctEmit(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.StringPlaceHolder,System.Boolean,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String})">
            <summary>
            Handles the emit of 'DISTINCT' into the query text and returns true if distinct was emitted or false if not.
            </summary>
            <param name="sortClauses">the sortclauses passed to the routine</param>
            <param name="allowDuplicates">flag if duplicates are allowed</param>
            <param name="sortClausesSpecified">flag if sortclauses is filled with at least one clause</param>
            <param name="selectQuery">the query object to build</param>
            <param name="distinctPlaceholder">The distinct placeholder.</param>
            <param name="distinctViolatingTypesFound">flag if distinct violating types were found</param>
            <param name="uniqueRows">if set to true, there are no duplicates possible due to joins. This is the case if there is a PK field and
            there are no relations or the relations don't result in duplicates.</param>
            <param name="fieldNamesInSelectList">the fieldnames in the select list (for sort field distinct violation checks)</param>
            <returns>
            true if distinct was emitted, false otherwise.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DetermineIfDuplicatesWillOccur(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Determines if duplicates will occur.
            </summary>
            <param name="relations">The relations.</param>
            <returns>
            true if duplicates could occur, false otherwise
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DetermineObjectAliasToUseForSelectListField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Determines the object alias to use for select list field.
            </summary>
            <param name="field">The field.</param>
            <param name="relations">The relations.</param>
            <returns>the object alias to use for the field in the select list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendWhereClause(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments,SD.LLBLGen.Pro.ORMSupportClasses.IQuery)">
            <summary>
            Appends a WHERE clause with the contents of the filter if it's not null / empty, to the fragments object specified. Parameters are added 
            to the query specified
            </summary>
            <param name="filter">The filter.</param>
            <param name="destination">The destination.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendGroupByClause(SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments,SD.LLBLGen.Pro.ORMSupportClasses.IQuery)">
            <summary>
            Appends a GROUP BY clause with the contents of the filter if it's not null / empty, to the fragments object specified. Parameters are added 
            to the query specified
            </summary>
            <param name="groupByClause">group by collection</param>
            <param name="destination">The destination.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendOrderByClause(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.QueryFragments,SD.LLBLGen.Pro.ORMSupportClasses.IQuery)">
            <summary>
            Appends an GROUP BY clause with the contents of the filter if it's not null / empty, to the fragments object specified. Parameters are added
            to the query specified
            </summary>
            <param name="sortClauses">sort clauses collection</param>
            <param name="destination">The destination.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendUpdateSetClauses(System.Collections.Generic.IList{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore},System.Collections.Generic.IList{SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo},SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList,System.Collections.IList)">
            <summary>
            Appends set clauses for an update query using the input specified to the destination list specified
            </summary>
            <param name="fieldsToUpdate">The fields to update.</param>
            <param name="persistenceInfoFieldsToUpdate">The persistence info fields to update.</param>
            <param name="destination">The destination.</param>
            <param name="parameterCollection">The parameter collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.ConstructFieldsToUpdateList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo}@)">
            <summary>
            Constructs the list of fields to update plus its corresponding fieldpersistenceinfo list.
            </summary>
            <param name="fields"></param>
            <param name="fieldsPersistenceInfo"></param>
            <param name="fieldsToUpdate">will be altered</param>
            <param name="persistenceInfoFieldsToUpdate">will be altered</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CheckIfFieldNeedsInsertAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Checks the if field needs insert action.
            </summary>
            <param name="field">Field.</param>
            <returns>true if the field needs to be included in the insert query. This is the case if the field is
            changed or not read only, or that it is linked to a supertype field (which indicates that the field will be receiving its value later)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DetermineFilterToUse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Determines the filter to use.
            </summary>
            <param name="filter">Filter.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSubqueryConnectionClausesUpdate(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Produces a set of WHERE Clauses to use in the UPDATE queries which have filters spanning multiple entities.
            It produces one clause if it finds the updateTable on the PK side and then stops and it produces n clauses if it finds updateTable
            on the FK side of n relations in relationsToWalk. 
            If the updateTable is on the PK side, it produces a clause: updatedTableAlias.PKField1 = updateTable.PKField1 AND... (for each field in the PK 1 clause)
            If the updateTable is on the FK side, it produces updatedTableAlias.Field1 = relatedEntityTable.Field1 AND ... clauses for each relation the table of the 
            persistence info is in.
            </summary>
            <param name="updatedEntity">The entity being updated. This entity is already in the relation list, and should be tied to
            entities inside the relation list</param>
            <param name="updatedTableAlias">Alias for updatedEntity. To use in the clauses</param>
            <param name="relationsToWalk">relations used in the query build up by caller</param>
            <returns>predicates to use in WHERE clause in subquery in mentioned update queries.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSubqueryConnectionClausesDelete(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Produces a set of WHERE Clauses to use in the DELETE queries which have filters spanning multiple entities.
            It produces one clause if it finds the deleteTable on the PK side and then stops and it produces n clauses if it finds deleteTable
            on the FK side of n relations in relationsToWalk. 
            If the deleteTable is on the PK side, it produces a clause: deleteTableAlias.PKField1 = deleteTable.PKField1 AND... (for each field in the PK 1 clause)
            If the deleteTable is on the FK side, it produces deleteTableAlias.Field1 = relatedEntityTable.Field1 AND ... clauses for each relation the table of the 
            persistence info is in.
            </summary>
            <param name="deleteTable">name of table the caller is building the query for</param>
            <param name="deleteTableAlias">Alias for deleteTable. To use in the clauses</param>
            <param name="relationsToWalk">relations used in the query build up by caller</param>
            <returns>predicates to use in WHERE clause in subquery in mentioned delete queries.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateCommand">
            <summary>
            Creates a new DbCommand object and initializes it
            </summary>
            <returns>ready to use DbCommand object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateCommand(System.String)">
            <summary>
            Creates a new DbCommand object and initializes it
            </summary>
            <param name="commandText">The command text.</param>
            <returns>ready to use DbCommand object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateCommand(System.String,System.Data.Common.DbConnection)">
            <summary>
            Creates a new DbCommand object and initializes it
            </summary>
            <param name="commandText">The command text.</param>
            <param name="connectionToUse">The connection to use.</param>
            <returns>ready to use DbCommand object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.ResetCreator">
            <summary>
            Resets the creator object with a new one. Only used by DAO objects which keep a Dynamic Query Engine object alive.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.MakeParametersAnonymous(System.Data.Common.DbCommand)">
            <summary>
            Makes the parameters anonymous in the passed in query. An anonymous parameter is '?', not '@foo'. It walks all parameters and replaces the
            names of these parameters with "?" in the query text
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.MakeParametersAnonymous(System.String,System.Collections.IList)">
            <summary>
            Makes the parameters anonymous in the passed in query. An anonymous parameter is '?', not '@foo'. It walks all parameters and replaces the
            names of these parameters with "?" in the query text
            </summary>
            <param name="commandText">The command text.</param>
            <param name="parameters">The parameters.</param>
            <returns>anonymized command text.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendResultsetFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.DelimitedStringList,System.Boolean,System.Boolean,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String},SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String}@,System.Boolean@,System.Boolean@)">
            <summary>
            Appends the resultset fields.
            </summary>
            <param name="selectList">The select list.</param>
            <param name="fieldsPersistenceInfo">The fields persistence info.</param>
            <param name="relationsToWalk">The relations to walk.</param>
            <param name="projection">The projection.</param>
            <param name="sortClausesSpecified">if set to <see langword="true"/> [sort clauses specified].</param>
            <param name="allowDuplicates">if set to <see langword="true"/> [allow duplicates].</param>
            <param name="allowAliasesInSubQuery">if set to <see langword="true"/> aliases for fields are allowed in subqueries. Used by ase</param>
            <param name="distinctViolatingTypes">The distinct violating types.</param>
            <param name="query">The query.</param>
            <param name="fieldNamesInSelectList">The field names in select list.</param>
            <param name="distinctViolatingTypesFound">if set to <see langword="true"/> [distinct violating types found].</param>
            <param name="pkFieldSeen">if set to <see langword="true"/> [pk field seen].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.GetCorrectFieldTypeBasedOnTypeSpecs(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Gets the correct field type, based on the type and lenght specified in the specified persistenceInfo
            </summary>
            <param name="persistenceInfo">The persistence info.</param>
            <returns>the correct field type</returns>
            <remarks>Necessary for db specific type conversion.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DetermineTargetAlias(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Determines the target alias to use for a single target FROM clause.
            </summary>
            <param name="firstFieldInTarget">The first field in target.</param>
            <param name="relationsToWalk">The relations to walk.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateDbSpecificCreator">
            <summary>
            Creates a new IDbSpecificCreator and initializes it
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CheckIfSortClausesAreInSelectList(SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Checks the if fields in the sort clauses are in select list and returns true if so, otherwise false.
            This check is used to determine if the DISTINCT marker has to be emitted or not.
            </summary>
            <param name="fieldNamesInSelectList">Field names in select list.</param>
            <param name="sortClauses">Sort clauses.</param>
            <returns>
            true if the fields in the sort clauses are all in the select list, false otherwise
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.FunctionMappings">
            <summary>
            Gets the function mappings for the particular DQE. These function mappings are static and therefore not changeable.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CommandTimeOut">
            <summary>
            Gets / sets the command time out (in seconds). This is a global setting, so every Command object created after you've set this
            property to a value will have that value as CommandTimeOut. Default is 30 seconds which is the ADO.NET default.
            Do not set this property by hand, use the selfservicing dbUtils class to do that for you.
            Adapter's DataAccessAdapter class has its own, per call, command timeout setting, which is recommended over this setting, which is global
            for all calls.
            </summary>
            <remarks>If set to a negative value it's ignored.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.Creator">
            <summary>
            Gets / sets creator
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.PerCallCatalogNameOverwrites">
            <summary>
            Gets / sets perCallCatalogNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.PerCallSchemaNameOverwrites">
            <summary>
            Gets / sets perCallSchemaNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.FactoryToUse">
            <summary>
            Gets the DbProviderFactory to use for this DQE. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase">
            <summary>
            Base class for elementcreator/elementcreator2 which are in the generated code.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore">
            <summary>
            Interface implemented by both IElementCreator(2) interfaces
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.CreateDynamicRelation(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperand">The left operand.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.CreateDynamicRelation(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="onClause">The on clause for the join.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.CreateDynamicRelation(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
            <param name="rightOperandEntityName">Name of the entity, which is used as the right operand.</param>
            <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
            string.Empty.</param>
            <param name="onClause">The on clause for the join.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.CreateDynamicRelation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperandEntityName">Name of the entity which is used as the left operand.</param>
            <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
            <param name="rightOperandEntityName">Name of the entity, which is used as the right operand.</param>
            <param name="aliasLeftOperand">The alias of the left operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
            string.Empty.</param>
            <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
            string.Empty.</param>
            <param name="onClause">The on clause for the join.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.ObtainInheritanceInfoProviderInstance">
            <summary>
            Obtains the inheritance info provider instance from the singleton 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.GetFactory(System.Int32)">
            <summary>
            Gets the factory of the Entity type with the EntityType value passed in
            </summary>
            <param name="entityTypeValue">The entity type value.</param>
            <returns>
            the entity factory of the entity type or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore.GetFactory(System.Type)">
            <summary>
            Gets the factory of the Entity type with the .NET type passed in
            </summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the entity factory of the entity type or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.CreateDynamicRelation(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperand">The left operand.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.CreateDynamicRelation(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
            <param name="rightOperand">The right operand.</param>
            <param name="onClause">The on clause for the join.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.CreateDynamicRelation(SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperand">The left operand.</param>
            <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
            <param name="rightOperandEntityName">Name of the entity, which is used as the right operand.</param>
            <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
            string.Empty.</param>
            <param name="onClause">The on clause for the join.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.CreateDynamicRelation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint,System.String,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new dynamic relation instance
            </summary>
            <param name="leftOperandEntityName">Name of the entity which is used as the left operand.</param>
            <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
            <param name="rightOperandEntityName">Name of the entity, which is used as the right operand.</param>
            <param name="aliasLeftOperand">The alias of the left operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
            string.Empty.</param>
            <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
            string.Empty.</param>
            <param name="onClause">The on clause for the join.</param>
            <returns>ready to use dynamic relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.ObtainInheritanceInfoProviderInstance">
            <summary>
            Obtains the inheritance info provider instance from the singleton
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.SD#LLBLGen#Pro#ORMSupportClasses#IElementCreatorCore#GetFactory(System.Int32)">
            <summary>
            Gets the factory of the Entity type with the EntityType value passed in
            </summary>
            <param name="entityTypeValue">The entity type value.</param>
            <returns>
            the entity factory of the entity type or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.SD#LLBLGen#Pro#ORMSupportClasses#IElementCreatorCore#GetFactory(System.Type)">
            <summary>
            Gets the factory of the Entity type with the .NET type passed in
            </summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the entity factory of the entity type or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.GetFactoryImpl(System.Int32)">
            <summary>Implementation of the routine which gets the factory of the Entity type with the EntityType value passed in</summary>
            <param name="entityTypeValue">The entity type value.</param>
            <returns>the entity factory of the entity type or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ElementCreatorBase.GetFactoryImpl(System.Type)">
            <summary>Implementation of the routine which gets the factory of the Entity type with the .NET type passed in</summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the entity factory of the entity type or null if not found</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase">
            <summary>
            Base class for DAO classes which are generated.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDao">
            <summary>
            Interface for Data Access Objects (DAO). Every IEntity implementation has one specific Dao object
            SelfServicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CallActionStoredProcedure(System.String,System.Data.Common.DbParameter[],SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Calls the specified action stored procedure in the database. If a transaction is in progress, it will participate in that transaction.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to pass</param>
            <param name="transaction">The transaction.</param>
            <returns>the number of rows affected.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the specified datatable. Will participate in the transaction if a
            transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="tableToFill">Datatable to fill by the stored procedure</param>
            <param name="transaction">The transaction.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataSet,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the
            specified DataSet. Will participate in the transaction if a transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
            <param name="transaction">The transaction.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CreateConnection">
            <summary>Creates a new closed ADO.NET Connection object based on the connection string read from the *.config file of the appdomain.
            The connection string is stored in a key with the name defined in the constant connectionKeyString</summary>
            <returns>A ready to use, closed, sqlconnection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CreateConnection(System.String)">
            <summary>Creates a new ADO.NET Connection</summary>
            <param name="connectionString">Conectionstring To use</param>
            <returns>A ready to use, closed, ADO.NET connection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.DetermineConnectionToUse(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>Determines which connection to use: the connection held by the passed in transaction (if any) or a new one (if no Transaction was passed in)</summary>
            <param name="containingTransaction">A transaction the caller participates in. If null, the caller is not participating in a transaction</param>
            <returns>A ready to use connection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CreateDataAdapter">
            <summary>Creates a new ADO.NET DataAdapter.</summary>
            <returns>Ready to use DbDataAdapter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.CreateTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Creates a new ADO.NET transaction
            </summary>
            <param name="connectionToUse">the connection to use</param>
            <param name="isolationLevelToUse">the isolation level to use</param>
            <returns>new ADO.NET transaction object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.AddNew(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Adds the given fields to the database as a new entity. 
            </summary>
            <param name="fields">The EntityField data to use for the insert.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <returns>true if the addition was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.UpdateExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Updates an existing entity using the given fields. 
            </summary>
            <param name="fields">The EntityField data to use for the update</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <returns>true if the update was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.UpdateExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates an existing entity using the given fields. 
            </summary>
            <param name="fields">The EntityField data to use for the update</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query</param>
            <returns>true if the update was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.PerformFetchEntityAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Reads the data of the entity passed in, and returns that object. Which data is read is determined using
            the set Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="selectFilter">Select filter.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Retrieves entities of the type this dao is for in a datatable which match the specified filter. It will always create a new connection to the database.
            </summary>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <returns>
            a filled datatable if succeeded, false otherwise
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMultiAsDataTable(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves entities of the type this dao is for in a datatable which match the specified filter. It will always create a new connection to the database.
            </summary>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>a filled datatable if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMultiAsDataTable(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>
            Retrieves entities of the type this dao is for in a datatable which match the specified filter. It will always create a new connection to the database.
            </summary>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>a filled datatable if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Retrieves the results of the query specified into the tableToFill.
            </summary>
            <param name="fieldsToReturn">The fields used to produce the query or tableToFill.</param>
            <param name="tableToFill">The table to fill.</param>
            <param name="queryToUse">The query to use. </param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>true if succeeded, false otherwise</returns>
            <remarks>Used with stored procedure calling IRetrievalQuery instances to fill a typed view mapped onto a resultset. Be sure
            to call Dispose() on the passed in query, as it's not disposed in this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Retrieves rows in the datatable provided which match the specified filter, containing the fields specified. It will always create a new connection to the database.
            </summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. If null is specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows or not</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>Retrieves rows in the datatable provided which match the specified filter, containing the fields specified. It will always create a new connection to the database.</summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. If null is specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows or not</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause collection, an exception is thrown.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary>
            Retrieves in the calling entity collection object all entity objects
            which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to 
            construct the total query. It will also prefetch all related objects defined in the prefetchpath specified.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes from the persistent storage all entities which match with the specified filter, formulated in
            the predicate or predicate expression definition, of the type and subtypes of the entity owning this DAO.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for deleting entities which are part of a TargetPerEntity hierarchy</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Deletes from the persistent storage all 'Employee' entities which match with the specified filter, formulated in
            the predicate or predicate expression definition.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for deleting entities which are part of a TargetPerEntity hierarchy</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated. 
            </summary>
            <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only
            changed fields are taken into account</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled. Use the returned value to determine if the
            update succeeded (value &gt; 0)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated.
            </summary>
            <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only
            changed fields are taken into account</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <param name="relations">Set of relations to walk to construct the total query</param>
            <returns>
            Number of entities affected, if the used persistent storage has rowcounting enabled. Use the returned value to determine if the
            update succeeded (value &gt; 0)
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Allow duplicates in the resultset.</param>
            <returns>
            the value which is the result of the expression defined on the specified field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows in the set defined by the query elements passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Allow duplicates in the resultset.</param>
            <returns>the number of rows in the set defined by the query elements passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.FetchExistingPolymorphic(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Performs the polymorphic entity fetch for the entity type of this DAO. It will produce an entity of that type or a subtype of that type, based
            on the values retrieved, or an empty entity if not found. The passed in fields object has its PK fields filled, which are used to
            produce a PK filter.
            </summary>
            <param name="containingTransaction">Containing transaction.</param>
            <param name="fields">Fields required for PK construction</param>
            <param name="contextToUse">Context to use for fetch</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>New entity with the data filtered by the passed in PK filter, or an empty entity if not found. Entity can be of type
            produced by the set entity factory (which produces entities of the type this DAO is for) or a subtype.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.FetchExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Reads the data of an entity into the specified EntityFields object and returns that object. Which data is read is determined using
            the passed in Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <exception cref="T:System.ArgumentNullException">When fieldsToFetch is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.DeleteExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes an entity from the persistent storage. Which entity is deleted is determined from the passed in EntityFields object.
            </summary>
            <param name="fields">The EntityField data to use for the deletion</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Can be null.</param>
            <returns>true if the delete was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="fieldsToFill">The IEntityFields object to store the fetched data in</param>
            <param name="fieldPersistenceInfos">The field persistence info objects used to produce the query. This array contains null for all excluded
            fields and is necessary for the row fetcher. Overriders of this method should pass fieldsToFill.GetAsPersistenceInfoArray() to this parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
            <param name="fieldPersistenceInfos">The field persistence info objects used to produce the query. This array contains null for all excluded
            fields and is necessary for the row fetcher. Overriders of this method should pass fieldsToFill.GetAsPersistenceInfoArray() to this parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.CommandBehavior)">
            <summary>
            Executes the passed in retrievalquery and returns an open, ready to use IDataReader. The datareader's command behavior is set to the
            readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="queryToExecute">The query to execute.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is specified, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is specified, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is specified, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in retrievalquery and projects the resultset using the value projectors and the projector specified.
            IF a transaction is specified, the command is wired to the transaction and executed inside the transaction. The projection results
            will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="queryToExecute">The query to execute.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Data.IDataReader)">
            <summary>
            Projects the current resultset of the passed in datareader using the value projectors and the projector specified. The reader will be left open
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="reader">The reader which points to the first row of a resultset</param>
            <remarks>Use this overload together with FetchDataReader if your datareader contains multiple resultsets, so you have fine-grained
            control over how you want to project which resultset in the datareader</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into the entity passed in. 
            </summary>
            <param name="entity">The entity to load the excluded field data into.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into all the entities in the entities collection passed in.
            </summary>
            <param name="entities">The entities to load the excluded field data into. The entities have to be either of the same type or have to be 
            in the same inheritance hierarchy as the entity which factory is set in the collection.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in collection. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.
            This routine batches fetches to have at most 5*ParameterizedThreshold of parameters per fetch. Keep in mind that most databases have a limit
            on the # of parameters per query. 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDao.EntityFactoryToUse">
            <summary>
            Gets / sets entityFactory to use
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDao.FunctionMappings">
            <summary>
            Gets the function mappings for the DQE related to this object. These function mappings are static and therefore not changeable.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ParameterisedPrefetchPathThreshold">
            <summary>
            The parameterised prefetch path threshold. This threshold is used to determine when the prefetch path logic should switch to a 
            subquery or when it should use a WHERE field IN (value1, value2, ... valueN) construct, based on the # of elements in the parent collection.
            If that # of elements exceeds this threshold, a subquery is constructed, otherwise field IN (value1, value2, ...) construct is used.
            The default value is 50. On average, this is faster than using a subquery which returns 50 elements. Use this to tune prefetch path fetch logic
            for your particular needs. 
            <br/><br/>
            This threshold is also used to determine if paging is possible. A page size bigger than this threshold will disable the paging functionality
            when using paging + prefetch paths. 
            </summary>
            <remarks>Testing showed that values larger than 300 will be slower than a subquery. This setting is a global setting, so will affect all
            database actions after setting it to a new value.
            <br/><br/>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code. 
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.#ctor">
            <summary>
            CTor for TypedListDAO
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory)">
            <summary>
            CTor
            </summary>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
            <param name="dqeToUse">Dqe to use.</param>
            <param name="typeOfInheritance">Type of inheritance.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="entityFactory">Entity factory.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Reads the data of an entity into the specified EntityFields object and returns that object. Which data is read is determined using
            the passed in Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <exception cref="T:System.ArgumentNullException">When fieldsToFetch is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.AddNew(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Adds the given fields to the database as a new entity. 
            </summary>
            <param name="fields">The EntityField data to use for the insert.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <returns>true if the addition was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Updates an existing entity using the given fields. 
            </summary>
            <param name="fields">The EntityField data to use for the update</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <returns>true if the update was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates an existing entity using the given fields. 
            </summary>
            <param name="fields">The EntityField data to use for the update</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query</param>
            <returns>true if the update was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformFetchEntityAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Reads the data of the entity passed in, and returns that object. Which data is read is determined using
            the set Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="selectFilter">Select filter.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExistingPolymorphic(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Performs the polymorphic entity fetch for the entity type of this DAO. It will produce an entity of that type or a subtype of that type, based
            on the values retrieved, or an empty entity if not found. The passed in fields object has its PK fields filled, which are used to
            produce a PK filter.
            </summary>
            <param name="containingTransaction">Containing transaction.</param>
            <param name="fields">Fields required for PK construction</param>
            <param name="contextToUse">Context to use for fetch</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>New entity with the data filtered by the passed in PK filter, or an empty entity if not found. Entity can be of type
            produced by the set entity factory (which produces entities of the type this DAO is for) or a subtype.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DeleteExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes an entity from the persistent storage. Which entity is deleted is determined from the passed in EntityFields object.
            </summary>
            <param name="fields">The EntityField data to use for the deletion</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Can be null.</param>
            <returns>true if the delete was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.CommandBehavior)">
            <summary>
            Executes the passed in retrievalquery and returns an open, ready to use IDataReader. The datareader's command behavior is set to the
            readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="queryToExecute">The query to execute.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsDataReader(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Data.CommandBehavior,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in and executes that retrievalquery to return an open, ready to use IDataReader.
            The datareader's command behavior is set to the readerBehavior passed in. If a transaction is specified, the command is wired to the transaction.
            </summary>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="readerBehavior">The reader behavior to set.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>Open, ready to use IDataReader</returns>
            <remarks>Advanced functionality: be aware that the datareader returned is open, and the connection used to open this datareader is also open</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is in progress, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is specified, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is specified, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new Retrieval query from the elements passed in, executes that retrievalquery and projects the resultset of that query using the
            value projectors and the projector specified. If a transaction is specified, the command is wired to the transaction and executed inside the
            transaction. The projection results will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="fields">The fields to use to build the query.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return. Specify 0 to return all elements</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">If set to true, allow duplicates in the resultset, otherwise it will emit DISTINCT into the query (if possible).</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in retrievalquery and projects the resultset using the value projectors and the projector specified.
            IF a transaction is specified, the command is wired to the transaction and executed inside the transaction. The projection results
            will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="queryToExecute">The query to execute.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Collections.Generic.Dictionary{System.Int32,System.ComponentModel.TypeConverter})">
            <summary>
            Executes the passed in retrievalquery and projects the resultset using the value projectors and the projector specified.
            IF a transaction is specified, the command is wired to the transaction and executed inside the transaction. The projection results
            will be stored in the projector.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="transactionToUse">The transaction to use, if you execute this method inside a transcation. Specify null otherwise</param>
            <param name="queryToExecute">The query to execute.</param>
            <param name="typeConvertersToRun">The type converters to use for the query. The key is the index in the result row, the value is the type converter
            to run on that value. These type converters have to run prior to the projectors will run.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetAsProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Data.IDataReader)">
            <summary>
            Projects the current resultset of the passed in datareader using the value projectors and the projector specified. The reader will be left open
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector to use for projecting a raw row onto a new object provided by the projector.</param>
            <param name="reader">The reader which points to the first row of a resultset</param>
            <remarks>Use this overload together with FetchDataReader if your datareader contains multiple resultsets, so you have fine-grained
            control over how you want to project which resultset in the datareader</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary>
            Retrieves in the calling entity collection object all entity objects
            which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to 
            construct the total query. It will also prefetch all related objects defined in the prefetchpath specified.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Retrieves entities of the type this dao is for in a datatable which match the specified filter. It will always create a new connection to the database.
            </summary>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <returns>
            a filled datatable if succeeded, false otherwise
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTable(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves entities of the type this dao is for in a datatable which match the specified filter. It will always create a new connection to the database.
            </summary>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>a filled datatable if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTable(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>
            Retrieves entities of the type this dao is for in a datatable which match the specified filter. It will always create a new connection to the database.
            </summary>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>a filled datatable if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Retrieves the results of the query specified into the tableToFill.
            </summary>
            <param name="fieldsToReturn">The fields used to produce the query or tableToFill.</param>
            <param name="tableToFill">The table to fill.</param>
            <param name="queryToUse">The query to use. </param>
            <param name="transactionToUse">The transaction to use.</param>
            <returns>true if succeeded, false otherwise</returns>
            <remarks>Used with stored procedure calling IRetrievalQuery instances to fill a typed view mapped onto a resultset. Be sure
            to call Dispose() on the passed in query, as it's not disposed in this method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Retrieves rows in the datatable provided which match the specified filter, containing the fields specified. It will always create a new connection to the database.
            </summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. If null is specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows or not</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>Retrieves rows in the datatable provided which match the specified filter, containing the fields specified. It will always create a new connection to the database.</summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. If null is specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows or not</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause collection, an exception is thrown.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiInternal(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
            <remarks>Internal version used for prefetch path fetching. This method alters the relations and filter objects in a hierarchical fetch
            to make sure the additional relations for hierarchical fetches are returned to the caller so they can be re-used in a recursive fetch
            like a prefetch path fetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAction(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Retrieves in the passed in entity collection object all entity objects which match with the specified filter,
            formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiActionInternal(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary>
            Retrieves in the passed in entity collection object all entity objects which match with the specified filter,
            formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns></returns>
            <remarks>Internal version used for prefetch path fetching. This method alters the relations and filter objects in a hierarchical fetch
            to make sure the additional relations for hierarchical fetches are returned to the caller so they can be re-used in a recursive fetch
            like a prefetch path fetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAsDataTableAction(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>
            Retrieves entities of the type produced by the set entityfactory, in a datatable which match the specified filter. 
            It will always create a new connection to the database.
            </summary>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>a filled datatable if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAsDataTableAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>
            Retrieves rows in the datatable provided which match the specified filter, containing the fields specified. 
            It will always create a new connection to the database.
            </summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows or not</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformPolymorphicEntityFetch(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.Context,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Performs the polymorphic entity fetch for the entity type of this DAO. It will produce an entity of that type or a subtype of that type, based
            on the values retrieved, or an empty entity if not found. The passed in filter, is a filter to be used to filter out the entity to fetch.
            </summary>
            <param name="containingTransaction">Containing transaction.</param>
            <param name="filter">Filter.</param>
            <param name="contextToUse">Context to use for fetch</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <returns>
            New entity with the data filtered by the passed in PK filter, or an empty entity if not found. Entity can be of type
            produced by the set entity factory (which produces entities of the type this DAO is for) or a subtype.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes from the persistent storage all entities which match with the specified filter, formulated in
            the predicate or predicate expression definition, of the type and subtypes of the entity owning this DAO.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for deleting entities which are part of a TargetPerEntity hierarchy</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Deletes from the persistent storage all 'Employee' entities which match with the specified filter, formulated in
            the predicate or predicate expression definition.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for deleting entities which are part of a TargetPerEntity hierarchy</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated. 
            </summary>
            <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only
            changed fields are taken into account</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled. Use the returned value to determine if the
            update succeeded (value &gt; 0)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated.
            </summary>
            <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only
            changed fields are taken into account</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <param name="relations">Set of relations to walk to construct the total query</param>
            <returns>
            Number of entities affected, if the used persistent storage has rowcounting enabled. Use the returned value to determine if the
            update succeeded (value &gt; 0)
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Allow duplicates in the resultset.</param>
            <returns>
            the value which is the result of the expression defined on the specified field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows in the set defined by the query elements passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Allow duplicates in the resultset.</param>
            <returns>the number of rows in the set defined by the query elements passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="fieldsToFill">The IEntityFields object to store the fetched data in</param>
            <param name="fieldPersistenceInfos">The field persistence info objects used to produce the query. This array contains null for all excluded
            fields and is necessary for the row fetcher. Overriders of this method should pass fieldsToFill.GetAsPersistenceInfoArray() to this parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
            <param name="fieldPersistenceInfos">The field persistence info objects used to produce the query. This array contains null for all excluded
            fields and is necessary for the row fetcher. Overriders of this method should pass fieldsToFill.GetAsPersistenceInfoArray() to this parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and returns the results as a datatable using the passed in data-adapter. 
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="fieldsToReturn">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>DataTable with the rows requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and returns the results in thedatatable specified using the passed in data-adapter. 
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="tableToFill">DataTable to fill</param>
            <param name="fieldsToReturn">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.WireTransaction(SD.LLBLGen.Pro.ORMSupportClasses.IQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Wires the passed in transaction to the command object of the passed in query. If no transaction is passed in, nothing is wired.
            </summary>
            <param name="queryToWire">Query to wire up with the passed in transaction</param>
            <param name="activeTransaction">transaction to wire to the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateConnection">
            <summary>Creates a new closed ADO.NET Connection object based on the connection string read from the *.config file of the appdomain.
            The connection string is stored in a key with the name defined in the constant connectionKeyString</summary>
            <returns>A ready to use, closed, sqlconnection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateConnection(System.String)">
            <summary>Creates a new ADO.NET Connection</summary>
            <param name="connectionString">Conectionstring To use</param>
            <returns>A ready to use, closed, ADO.NET connection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DetermineConnectionToUse(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>Determines which connection to use: the connection held by the passed in transaction (if any) or a new one (if no Transaction was passed in)</summary>
            <param name="containingTransaction">A transaction the caller participates in. If null, the caller is not participating in a transaction</param>
            <returns>A ready to use connection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateDataAdapter">
            <summary>Creates a new ADO.NET DataAdapter.</summary>
            <returns>Ready to use DbDataAdapter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Creates a new ADO.NET transaction
            </summary>
            <param name="connectionToUse">the connection to use</param>
            <param name="isolationLevelToUse">the isolation level to use</param>
            <returns>new ADO.NET transaction object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into the entity passed in. 
            </summary>
            <param name="entity">The entity to load the excluded field data into.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into all the entities in the entities collection passed in.
            </summary>
            <param name="entities">The entities to load the excluded field data into. The entities have to be either of the same type or have to be 
            in the same inheritance hierarchy as the entity which factory is set in the collection.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the entitycollection. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.
            This routine batches fetches to have at most 5*ParameterisedPrefetchPathThreshold of parameters per fetch. Keep in mind that most databases have a limit
            on the # of parameters per query. 
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.HandleValueReadErrors(System.Data.IDataReader,System.Object[],System.Exception)">
            <summary>
            Routine which is meant to handle value read errors when GetValues is called on the passed in reader. This routine is only called when the
            GetValues() method on the passed in reader throws an exception. Implementors of this routine thus have to call different methods to retrieve
            the values for the current row. The data has to be read into the toFill array.
            </summary>
            <param name="openReader">The open datareader, positioned at the current active row</param>
            <param name="toFill">array to fill with the current row's values</param>
            <param name="ex">The exception thrown by GetValues(toFill)</param>
            <returns>
            true if the values are succesfully read, false otherwise. By default this routine returns false. If false is returned, 
            ex is bubbled upwards by the caller. 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PersistQueue(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}},System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32@)">
            <summary>
            Persists the queue passed in. The queue contains ActionQueueElements and is in the right order, just save it from front to back
            </summary>
            <param name="queueToPersist">Queue to persist.</param>
            <param name="insertActions">if true, the actions to perform are save actions, otherwise update actions</param>
            <param name="transactionToUse">Transaction to use.</param>
            <param name="totalAmountSaved">The total amount saved.</param>
            <returns>bool if the actions all went ok.</returns>
            <remarks>It assumes a transaction, if needed, is already created and opened and passed in. All exceptions are bubbled upwards</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CallActionStoredProcedure(System.String,System.Data.Common.DbParameter[],SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Calls the specified action stored procedure in the database. If a transaction is in progress, it will participate in that transaction.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to pass</param>
            <param name="transaction">The transaction.</param>
            <returns>the number of rows affected.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the specified datatable. Will participate in the transaction if a
            transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="tableToFill">Datatable to fill by the stored procedure</param>
            <param name="transaction">The transaction.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataSet,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the
            specified DataSet. Will participate in the transaction if a transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
            <param name="transaction">The transaction.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetConnectionString">
            <summary>
            Gets the connection string to use
            </summary>
            <returns>the connection string as set by code or in the config file.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.CommandBehavior)">
            <summary>
            Performs the execute single row retrieval query action. This method simply calls Execute on the queryToExecute passed in. 
            </summary>
            <param name="queryToExecute">The query to execute.</param>
            <param name="behavior">The commandbehavior to pass to Execute.</param>
            <returns>live datareader created by the execute method</returns>
            <remarks>Use this method to pass a different command behavior to queryToExecute.Execute(), which is necessary for ASE sybase for example, as the 
            Sybase ASE provider has a critical bug in some versions where SingleRow doesn't work but SingleResult will.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateStoredProcedureCallCommand(System.String,System.Data.Common.DbParameter[],SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Creates the stored procedure call command for the stored proc specified.
            </summary>
            <param name="storedProcedureToCall">The stored procedure to call.</param>
            <param name="parameters">array of parameters to pass</param>
            <param name="transaction">The transaction.</param>
            <returns>ready to use DbCommand</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMultiAsDataTableMergeManyToMany(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Retrieves rows in the datatable provided which match the specified filter, containing the fields specified.
            It will always create a new connection to the database.
            Special routine for MergeManyToMany.
            </summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the datatable which avoids deadlocks on SqlServer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchOneRow(System.Data.IDataReader,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Fetches one row from the open data-reader and places that row into the passed in object rowDestination. rowDestination
            should match the format of the rows read by DataSource. Will only read the current row.
            </summary>
            <param name="dataSource">The open datareader used to fetch the data</param>
            <param name="rowDestination">The IEntityFields implementing object where the data should be stored.</param>
            <param name="fieldPersistenceInfos">The field persistence info objects used to produce the query. This array contains null for all excluded fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ReadRowIntoFields(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}})">
            <summary>
            Fetches the values passed in into the rowDestination. 
            </summary>
            <param name="values">the values to read into rowDestination</param>
            <param name="rowDestination">The IEntityFields implementing object where the data should be stored.</param>
            <param name="fieldIndexToOrdinal">list with valuepairs with per fieldIndex the ordinal position in values.</param>
            <remarks>Override this routine if you want to perform string / value caching.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Boolean)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="rootEntities">EntityCollection object containing one or more root objects which will contain the entities to fetch (and their paths)
            defined in the prefetch path.</param>
            <param name="filter">filter information used to retrieve the root entities.</param>
            <param name="relations">relations information used to retrieve the root entities</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return limit used to retrieve the root entities.</param>
            <param name="sortClauses">SortClause expression which was applied to the query executed to retrieve the root entities</param>
            <param name="prefetchPath">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="containingTransaction">The transaction the caller is in.</param>
            <param name="forceParameterizedPPath">if set to true, it always will use a parameterized prefetch path, no matter what. Used for paging
            scenario's</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.MergeManyToMany(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Merges the entities fetched in currentElement.RetrievalCollection with the rootEntities for a many to many relation
            </summary>
            <param name="currentElement">Current element.</param>
            <param name="filter">Element filter.</param>
            <param name="relations">element filter relations</param>
            <param name="rootEntities">Root entities.</param>
            <param name="containingTransaction">the transaction we're in, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreatePrimaryKeyFilter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates a new predicate expression which filters on the primary key fields and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="fields">IEntityField collection with all the fields of the entity for which the filter has to be constructed</param>
            <returns>filled in predicate expression or null if no primary key fields are specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreatePrimaryKeyFilters(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates for each entity which PK field(s) are in the passed in arraylist a new predicate expression which filters on the 
            primary key fields of that entity and the set values for the given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="fields">IEntityField collection with all the fields of the entity for which the filter has to be constructed</param>
            <returns>ArrayList with for each entity a filled in predicate expression or null if no primary key fields are specified. PK filters
            are stored in the same order as entities appear in the pkfields, which is the same order in which entities are located in the hierarchy
            (from root to leaf)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateQueryFromElements(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates the query from elements.
            </summary>
            <param name="transactionToUse">The transaction to use.</param>
            <param name="fields">The fields.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="sortClauses">The sort clauses.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="allowDuplicates">if set to <c>true</c> [allow duplicates].</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateEntityInstanceFromReaderRow(System.Collections.ICollection,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}}},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean,System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory@)">
            <summary>
            Creates an entity instance from the reader row passed in as valuesOfRow
            </summary>
            <param name="fieldsUsedForQuery">The fields used for query.</param>
            <param name="fieldPersistenceInfos">The field persistence infos.</param>
            <param name="hierarchyFieldAliasesToOrdinals">The hierarchy field aliases to ordinals.</param>
            <param name="fieldIndexToOrdinal">The field index to ordinal.</param>
            <param name="entityFieldStartIndexesPerEntity">The entity field start indexes per entity.</param>
            <param name="hasExcludedFields">if set to <c>true</c> [has excluded fields].</param>
            <param name="valuesOfRow">The values of row.</param>
            <param name="entityFactoryToUse">The entity factory to use. Set by this routine, if the entity is an inheritance entity</param>
            <returns>
            the newly created entity instance with the values set into its fields
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExcludedFieldsBatches(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Collections.Generic.IList{SD.LLBLGen.Pro.ORMSupportClasses.IEntityField},System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Fetches the excluded fields batches.
            </summary>
            <param name="entities">The entities.</param>
            <param name="containingTransaction">The containing transaction.</param>
            <param name="allPkFields">All pk fields of the entity type to fetch the data into.</param>
            <param name="batchSize">Size of the batch.</param>
            <param name="numberOfPkFields">The number of pk fields.</param>
            <param name="numberOfBatches">The number of batches.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="excludedFieldsToUse">The excluded fields to use.</param>
            <param name="resultFields">The result fields.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DbProviderFactoryToUse">
            <summary>
            Gets the db provider factory to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DbSpecificCreatorToUse">
            <summary>
            Gets the db specific creator to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CommandTimeOut">
            <summary>
            Gets / sets the command time out (in seconds). This is a global setting, so every Command object created after you've set this
            property to a value will have that value as CommandTimeOut. Default is 30 seconds which is the ADO.NET default.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.EntityFactoryToUse">
            <summary>
            Gets / sets entityFactory to use
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FunctionMappings">
            <summary>
            Gets the function mappings for the DQE related to this Dao class. These function mappings are static and therefore not changeable.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.StringCacheForFetcher">
            <summary>
            Gets or sets the string cache for the fetcher. This string cache is used to keep just 1 instance of a given string value in memory. Strings are 
            unmutable objects, and during a fetch multiple instances of the same string value can be read. Using this string cache, only one instance is kept
            which saves a lot of memory during fetches with a lot of duplicate strings.
            </summary>
            <remarks>Setting this property will make the fetch logic use the stringcache you passed in. Keeping the cache around in-between daobase instances
            can be efficient if you re-fetch the same sets over and over again. This form of value uniquing is preferred over making strings 'interned' as
            interned strings have the disadvantage that they stay around for the lifetime of the application. Strings uniqued with this list are kept
            alive as long as their container and as long as the string cache is kept alive. String uniquing with the UniqueList is very fast, so fetches
            aren't really affected in performance. </remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl">
            <summary>
            Wrapper class around a DaoBase instance and an ITransaction object to call stored procedures using StoredProcedureCall instances.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.DaoBase,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl"/> class.
            </summary>
            <param name="daoInstance">The DAO instance to use for data access.</param>
            <param name="transaction">The transaction object. Can be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl.CallActionStoredProcedure(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Calls the specified action stored procedure in the database. If a transaction is in progress, it will participate in that transaction.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to pass</param>
            <returns>the number of rows affected. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataTable)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the specified datatable. Will participate in the transaction if a
            transaction is in progress.</summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="tableToFill">Datatable to fill by the stored procedure</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl.CallRetrievalStoredProcedure(System.String,System.Data.Common.DbParameter[],System.Data.DataSet)">
            <summary>
            Calls the specified retrieval stored procedure in the database. Fills the
            specified DataSet. Will participate in the transaction if a transaction is in progress.
            </summary>
            <param name="storedProcedureToCall">Stored procedure to call</param>
            <param name="parameters">array of parameters to specify</param>
            <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl.GetDbProviderFactoryInstance">
            <summary>
            Gets the DB provider factory instance. 
            </summary>
            <returns>ready to use Db provider factory instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SelfServicingSpecific.DataAccessCoreImpl.GetDbSpecificCreatorInstance">
            <summary>
            Gets the db specific creator instance for the database this object targets.
            </summary>
            <returns>ready to use creator</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase">
            <summary>
            General Entity Base class, which is used to inherit the Entity classes from.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity">
            <summary>
            Interface used for all Entity classes, it's the interface implemented by the abstract base class which is used to derive every entity class from
            SelfServicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore">
            <summary>
            Interface used for as a base for all Entity classes
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.FlagAsSaved">
            <summary>
            Method which will fire the AfterSave event to signal that this entity is persisted and refetched succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetNewFieldValue(System.String,System.Object)">
            <summary>
            Sets the EntityField with the name fieldName to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldName">Name of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetNewFieldValue(System.Int32,System.Object)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetCurrentFieldValue(System.Int32)">
            <summary>
            Gets the current value of the EntityField with the index fieldIndex. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to get the current value of</param>
            <returns>The current value of the EntityField specified</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.FlagMeAsChanged">
            <summary>
            Routine which will flag all subscribers of the EntityContentsChanged event that this entity's contents is changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetFieldByName(System.String)">
            <summary>
            Helper method which performs a lookup in the fields based on the name specified.
            </summary>
            <param name="fieldName">the name of the field to search</param>
            <returns>the field with the name specified or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present, 
            in which case the predicate is ignored</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SaveFields(System.String)">
            <summary>
            Saves the current set of fields under the name specified in an internal hashtable. All data inside the field objects is preserved.
            If there is already a set of fields saved under the name specified, that set of fields is overwritten.
            </summary>
            <param name="name">Name to store the fields under. Case sensitive</param>
            <remarks>Creates a deep copy of the fields object.</remarks>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.RollbackFields(System.String)">
            <summary>
            Replaces the current set of fields with the fields saved under the name specified. If no set of fields is found with the name specified
            an exception is thrown. Removes the entry after a succesful rollback.
            </summary>
            <param name="name">Name under which the fields are stored which have to replace the current set of fields. Case sensitive</param>
            <remarks>replaces the current set of fields with the set of fields saved under the name specified. The current set of fields, with all the
            data are lost after a succesful rollback.</remarks>
            <exception cref="T:System.ArgumentException">thrown when the name specified is not found.</exception>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.DiscardSavedFields">
            <summary>
            Removes all saved field sets from the internal hashtable, clearing up space. This method is also called when 
            an entity is saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.CheckIfIsSubTypeOf(System.Int32)">
            <summary>Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum</summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>true if the passed in type is a supertype of this entity, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetEntityError(System.String)">
            <summary>
            Sets the error message which is returned by IDataErrorInfo.Error
            </summary>
            <param name="errorMessage">the message to set</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetEntityFieldError(System.String,System.String,System.Boolean)">
            <summary>
            Sets the error message for the field specified. If there's already a message stored for this field, it's overwritten unless append is
            set to true, which appends the message to the existing error using a semi-colon as separator. The message stored
            is returned by IDataErrorInfo[fieldName];
            </summary>
            <param name="fieldName">name of the field</param>
            <param name="errorMessage">message to store</param>
            <param name="append">If true, the value is appended to an already existing error message. As separator a semi-colon is used.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ValidateEntity">
            <summary>
            General validation method which isn't used by the LLBLGen Pro framework, but can be used by your own code to validate an entity at any given moment.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(System.String@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively. 
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively. 
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(System.String,System.String@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the Xml string passed in. The string xmlData has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetAllRelations">
            <summary>
            Gets a list of all the EntityRelation objects the type of this instance has. 
            </summary>
            <returns>A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetRelationsForFieldOfType(System.String)">
            <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
            <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
            <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.TestOriginalFieldValueForNull(System.Enum)">
            <summary> Returns true if the original value for the field with the fieldIndex passed in, read from the persistent storage was NULL, false otherwise.
            Should not be used for testing if the current value is NULL, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.TestCurrentFieldValueForNull(System.Enum)"/> for that.</summary>
            <param name="fieldIndex">Index of the field to test if that field was NULL in the persistent storage</param>
            <returns>true if the field with the passed in index was NULL in the persistent storage, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.TestCurrentFieldValueForNull(System.Enum)">
            <summary>Returns true if the current value for the field with the fieldIndex passed in represents null/not defined, false otherwise.
            Should not be used for testing if the original value (read from the db) is NULL</summary>
            <param name="fieldIndex">Index of the field to test if its currentvalue is null/undefined</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.EntityContentsChanged">
            <summary>
            Event handler declaration for the event that is raised each time the one of values of this entity are changed.
            The event does not contain the value / field which is changed, it only signals subscribers the entity is changed
            and the subscriber should act accordingly, f.e. fire a ListChanged event.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.PropertyChanged">
            <summary>
            Event fired when a field / property is changed. To fire this event from a derived class, call OnPropertyChanged.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.AfterSave">
            <summary>
            Event handler declaration for the event that is raised each time this entity is persisted. Related entities can subscribe to
            this event to start housekeeping actions, like syncing internal FK fields with the PK fields of this entity.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Initializing">
            <summary>
            Event which is raised at the start of the initialization routine of the entity. The entity is clean and has no entity fields object yet. 
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Initialized">
            <summary>
            Event which is raised at the end of the initialization routine of the entity. This event is also raised if the entity is pre-filled with a 
            filled EntityFields(2) object. In your handler, check the State property of the entity Fields to see if you're dealing with a new entity or with an 
            entity which is new, but pre-initialized with filled field objects.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.IsNew">
            <summary>
            Marker for the entity object if the object is new and should be inserted when saved (true) or read from the
            database (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.IsDirty">
            <summary>
            Marker for the entity object if the object is 'dirty' (changed, true) or not (false). Affects/reads .Fields.IsDirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Validator">
            <summary>
            The validator object used to validate the entity on several moments in the entity's life.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory to use for <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ActiveContext">
            <summary>
            Gets / sets the active context this entity is in. Setting this property is not adding the entity to the context, it will make contained
            entities be added to the passed in context. If the entity is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.LLBLGenProEntityName">
            <summary>
            Returns the full name for this entity, which is important for the DAO to find back persistence info for this entity.
            </summary>
            <example>CustomerEntity</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.TypeDefaultValueProviderToUse">
            <summary>
            Gets or sets the TypeDefaultValue provider to use. This object is used to provide default values for value typed fields which are null 
            and not of type Nullable(Of T)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.AuthorizerToUse">
            <summary>
            Gets or sets the Authorizer for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.AuditorToUse">
            <summary>
            Gets or sets the Auditor for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.CustomPropertiesOfType">
            <summary> The custom properties for the type of this entity instance.</summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.FieldsCustomPropertiesOfType">
            <summary> The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Fields">
            <summary>
            Gets the fields object of this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.PrimaryKeyFields">
            <summary>
            List of IEntityFieldCore references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String,System.Boolean)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
            <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetMemberEntityCollections">
            <summary>
            Gets a list of all entity collections stored as member variables in this entity. The contents of the list is
            used by the Save logic to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>Collection with 0 or more IEntityCollection objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. Will not recursively save internal dirty entities. 
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save(System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database.
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values. Will not recursively save internal dirty entities. 
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values.
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Delete">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit delete activity.
            </summary>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Delete(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            </summary>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Overrules the predicate returned
            by a set ConcurrencyPredicateFactory object.</param>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Refetch">
            <summary>
            Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. 
            Refetching an empty Entity has no effect.
            </summary>
            <returns>true if Refetch succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetEntityFactory">
            <summary>
            Returns a new ready to use factory for the type of this instance.
            </summary>
            <returns>a new ready to use factory for the type of this instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into this entity. 
            </summary>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.IsSerializing">
            <summary>
            Returns true if this entity instance is in the middle of a serialization process, for example during a WriteXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement">
            <summary>
            Interface which is necessary for the Transaction class. Every class which has to be controlled by a Transaction object
            has to implement this interface. Examples are: an Entity class and an Entity Collection Class.
            SelfServicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is commited, this element can succesfully finish actions performed by this
            element. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this element doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is rolled back, this element has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.ParticipatesInTransaction"/> is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCoreInternal">
            <summary>
            Internal interface which is used to call entity methods in generic code where there's just an IEntityCore instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCoreInternal.CallGetRelatedData">
            <summary>
            Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element. 
            </summary>
            <returns>Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null</returns>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.MakeInvalidFieldReadsFatal">
            <summary>
            Flag (default: false), which can be used to track down errors in code at runtime when migrating from LLBLGen Pro v1.0.xx to v2.0. 
            When set to true, it will make invalid field reads fatal and will make the entity throw an ORMInvalidFieldReadException when a field is
            read while the field's value hasn't been set yet.
            </summary>
            <remarks>This is to track down the following errors:<br/>
            <code>
            OrderEntity order = new OrderEntity();
            order.SomeNullableField+=10;
            </code>
            This code resulted in the value 10 in v1.0, but will result in 0 in v2, if you're using .NET 2.0. This is caused by the fact that SomeNullableField
            is null/Nothing in v2 when the entity is initialized, not 0.
            By switching on this flag you can track down these errors at runtime. <br/>
            It will cause problems with asp.net grids and new entities, so use this flag only for checking the code after you've migrated to v2.
            </remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.BuildInValidationBypassMode">
            <summary>
            The mode (default: NoBypass) to use for the build-in validation checks. Build-in validation checks are performed on every value a field is set to,
            unless this mode is set to a different value than NoBypass which makes the code to bypass these build-in validation checks. The build-in validation checks
            are used to prevent overflow exceptions when the entity is persisted to the database. 
            </summary>
            <remarks>You can also set this field by adding a key-value pair to the appSettings section of your application's config file. Use 
            'buildInValidationBypassMode' as key and the numeric value of the BuildInValidationBypass enum value as value.</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.MarkSavedEntitiesAsFetched">
            <summary>
            Flag (default: false) which controls if saved entities which aren't fetched back in the same call should be marked as Fetched instead of the
            default 'OutOfSync'. Setting this to true can save fetch roundtrips to the database to refetch data for the entity already in memory. However
            setting this setting to true can also cause getting the entity out of sync with the database because another thread has updated the same
            entity data. Use with care. It's recommended to leave it on its default value: false and only set this to true if you're sure the data in-memory
            reflects the entity data in the database.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ScaleOverflowCorrectionActionToUse">
            <summary>
            The action to use when the build-in validation detects a scale overflow (e.g. scale of a field is 2, and the value to set the field to is 10.455, which 
            has a scale of 3). Default is 'Truncate', which means that the overflow value will be truncated to the scale size.
            If validation is bypassed by setting BuildInValidationBypassMode to a value which makes the build-in validation to be bypassed, this
            setting has no effect.
            </summary>
            <remarks>You can also set this field by adding a key-value pair to the appSettings section of your application's config file. Use 
            'scaleOverflowCorrectionActionToUse ' as key and the numeric value of the ScaleOverFlowCorrectionAction enum value as value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.#cctor">
            <summary>
            Static CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Entity2Xml(System.String,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity, recursively. Because it recurses through referenced entities, it keeps track of which objects are processed
            so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Dictionary with ObjectIDs of all the objects already processed. If this entity's ObjectID is in the
            key list, a ProcessedObjectReference tag is emitted and the routine simply returns. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the Xml string passed in. The string xmlData has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Xml2Entity(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity data. 
            </summary>
            <param name="node">current node which points to an entity node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this entity using the eXclusive OR of the 
            hashcodes of the primary key fields in this entity. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ValidateEntity">
            <summary>
            General validation method which isn't used by the LLBLGen Pro framework, but can be used by your own code to validate an entity at any given moment.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Validate">
            <summary>
            Method to keep code compilable however which is now marked as obsolete, as people should call ValidateEntity.
            </summary>
            <returns>always true</returns>
            <remarks>Calls ValidateEntity.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. Will not recursively save internal dirty entities. 
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <returns>true if all changed fields were successfully persisted to the database, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save(System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if all changed fields were successfully persisted to the database, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values. Will not recursively save internal dirty entities. 
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <returns>true if all changed fields were successfully persisted to the database, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values.
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if all changed fields were successfully persisted to the database, false otherwise</returns>
            <remarks>Do not call this routine directly, use the overloaded version in a derived class as this version doesn't construct a
            local transaction during recursive save, this is done in the overloaded version in a derived class.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">IEntity implementing object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
            <remarks>If this entity or the passed in entity is new, no values are compared, but the physical objects are compared (object.Equals()),
            because new entities can look the same, value wise due to identity fields which are all 0, however which are physical different entities 
            (object wise)</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into this entity. 
            </summary>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Delete">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit delete activity.
            </summary>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Delete(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            </summary>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Overrules the predicate returned
            by a set ConcurrencyPredicateFactory object.</param>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetCurrentFieldValue(System.Int32)">
            <summary>
            Gets the current value of the EntityField with the index fieldIndex. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to get the current value of</param>
            <returns>The current value of the EntityField specified</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)">
            <summary>
            Sets the EntityField with the name fieldName to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldName">Name of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.Int32,System.Object)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="checkForRefetch">If set to true, it will check if this entity is out of sync and will refetch it first if it is. Use true in normal
            behavior, false for framework specific code.</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.Int32,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="checkForRefetch">If set to true, it will check if this entity is out of sync and will refetch it first if it is. Use true in normal
            behavior, false for framework specific code.</param>
            <param name="fireChangeEvent">if set to true, the change event is fired if the value is set, if applicable. 
            If set to false, the caller is responsible for calling the change event mechanism, recommended is then: PostFieldValueSetAction()</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <remarks>This method is used by templates released first on 26-may-2005, hence the 'protected' modifier</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SaveFields(System.String)">
            <summary>
            Saves the current set of fields under the name specified in an internal hashtable. All data inside the field objects is preserved.
            If there is already a set of fields saved under the name specified, that set of fields is overwritten.
            </summary>
            <param name="name">Name to store the fields under. Case sensitive</param>
            <remarks>Creates a deep copy of the fields object.</remarks>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.RollbackFields(System.String)">
            <summary>
            Replaces the current set of fields with the fields saved under the name specified. If no set of fields is found with the name specified
            an exception is thrown. Removes the entry after a succesful rollback.
            </summary>
            <param name="name">Name under which the fields are stored which have to replace the current set of fields. Case sensitive</param>
            <remarks>replaces the current set of fields with the set of fields saved under the name specified. The current set of fields, with all the
            data are lost after a succesful rollback.</remarks>
            <exception cref="T:System.ArgumentException">thrown when the name specified is not found.</exception>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.DiscardSavedFields">
            <summary>
            Removes all saved field sets from the internal hashtable, clearing up space. This method is also called when 
            an entity is saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetEntityError(System.String)">
            <summary>
            Sets the error message which is returned by IDataErrorInfo.Error
            </summary>
            <param name="errorMessage">the message to set</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetEntityFieldError(System.String,System.String,System.Boolean)">
            <summary>
            Sets the error message for the field specified. If there's already a message stored for this field, it's overwritten unless append is
            set to true, which appends the message to the existing error using a semi-colon as separator. The message stored
            is returned by IDataErrorInfo[fieldName];
            </summary>
            <param name="fieldName">name of the field</param>
            <param name="errorMessage">message to store. If it's an empty string, an existing error message for fieldName is cleared instead</param>
            <param name="append">If true, the value is appended to an already existing error message. As separator a semi-colon is used.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TestOriginalFieldValueForNull(System.Enum)">
            <summary> Returns true if the original value for the field with the fieldIndex passed in, read from the persistent storage was NULL, false otherwise.
            Should not be used for testing if the current value is NULL, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TestCurrentFieldValueForNull(System.Enum)"/> for that.</summary>
            <param name="fieldIndex">Index of the field to test if that field was NULL in the persistent storage</param>
            <returns>true if the field with the passed in index was NULL in the persistent storage, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TestCurrentFieldValueForNull(System.Enum)">
            <summary>Returns true if the current value for the field with the fieldIndex passed in represents null/not defined, false otherwise.
            Should not be used for testing if the original value (read from the db) is NULL</summary>
            <param name="fieldIndex">Index of the field to test if its currentvalue is null/undefined</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallCheckIfCurrentFieldValueIsNull(System.Int32)">
            <summary>
            Calls CheckIfCurrentFieldValueIsNull which is a protected method, but also useful for internal interpretation code. 
            </summary>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnFetchComplete">
            <summary>
            Calls the OnFetchComplete routine, which is a protected routine. This method is used by the DaoBase multi-entity fetch logic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnSave">
            <summary>
            Calls the OnSave routine, which is a protected routine. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnSaveComplete">
            <summary>
            Calls the OnSaveComplete routine, which is a protected routine. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnGetFetchNewAuthorizationFailureResultHint">
            <summary>
            Calls OnGetFetchNewAuthorizationFailureResultHint on the authorizer. Only called when the CanGetLoad failed (authorization failed, so load was denied)
            </summary>
            <returns>any of the FetchNewAuthorizationFailureResultHint values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnRequiresTransactionForAuditEntities(SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction)">
            <summary>
            Calls the OnRequiresTransactionForAuditEntities routine
            </summary>
            <param name="actionToStart">The action to start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnAuditDirectDeleteOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            calls the OnAuditDirectDeleteOfEntities routine
            </summary>
            <param name="filter">The filter to filter out the entities to delete. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesDeleted">The number of entities deleted.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnAuditDirectUpdateOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            calls the OnAuditDirectUpdateOfEntities routine
            </summary>
            <param name="filter">The filter to filter out the entities to update. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesUpdated">The number of entities updated.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnAuditLoadOfEntity">
            <summary>
            Calls the OnAuditLoadOfEntity() routine.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnAuditInsertOfNewEntity">
            <summary>
            Calls the OnAuditInsertOfNewEntity routine.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnAuditUpdateOfExistingEntity">
            <summary>
            Calls the OnAuditUpdateOfExistingEntity routine.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnCanSaveNewEntity">
            <summary>
            Calls the OnCanSaveNewEntity routine for this entity
            </summary>
            <returns>the result of OnCanSaveNewEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnCanSaveExistingEntity">
            <summary>
            Calls the OnCanSaveExistingEntity routine for this entity
            </summary>
            <returns>the result of OnCanSaveExistingEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnCanBatchUpdateEntitiesDirectly">
            <summary>
            Calls the OnCanBatchUpdateEntitiesDirectly routine for this entity
            </summary>
            <returns>the result of OnCanBatchUpdateEntitiesDirectly</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnCanBatchDeleteEntitiesDirectly">
            <summary>
            Calls the OnCanBatchDeleteEntitiesDirectly routine for this entity
            </summary>
            <returns>the result of OnCanBatchDeleteEntitiesDirectly</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnCanDeleteEntity">
            <summary>
            Calls the OnCanDeleteEntity routine for this entity
            </summary>
            <returns>the result of OnCanDeleteEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallInsertEntity">
            <summary>
            Calls the insert entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallUpdateEntity">
            <summary>
            Calls the update entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallUpdateEntity(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Calls the update entity.
            </summary>
            <param name="updateRestriction">Update restriction.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallValidateEntityAfterLoad">
            <summary>
            Calls the validate entity after load method.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallValidateEntityBeforeSave">
            <summary>
            Calls the validate entity before save method
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallValidateEntityAfterSave">
            <summary>
            Calls the validate entity after save method
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallValidateEntityBeforeDelete">
            <summary>
            Calls the validate entity before delete method.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnCanLoadEntity">
            <summary>
            Calls the OnCanLoadEntity routine for this entity.
            </summary>
            <returns>the result of OnCanLoadEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallPostReadXmlFixups">
            <summary>
            Method to be used by XmlHelper, which is using this method to call this entity's PostReadXmlFixups.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.QueueAuditorForCommitFlush">
            <summary>
            Queues the auditor of this entity (if any) for commit flush in the transaction in progress. This way, entities produced by the auditor will
            be flushed in the transaction. If no transaction is in progress and there are entities produced by the auditor of this entity, the audit
            entities are flushed with a new transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetEntityDescription(System.Boolean)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetEntityDescription(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase", if verbose tracing is switched off for the GeneralSwitch, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase" will be returned</param>
            <param name="entity">the entity to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetInheritanceHierarchyType">
            <summary>
            Gets the type of the inheritance hierarchy this entity is in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfEntityHasPendingFkSyncs(System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity})">
            <summary>
            Checks whether this instance has pending fk syncs. A pending FK sync is a sync which hasn't been used yet.
            If an entity has pending FK syncs, it has to be included into a save queue. Only syncs with entities in the passed in queue are considered. 
            If a sync is with an entity which isn't in the passed in queue, the sync isn't honoured anyway, so the fk sync can be ignored.
            </summary>
            <param name="inQueue">Hashtable of the entities which are currently scheduled to be saved in the queue. A pending sync has to be with an entity in this queue</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Refetch">
            <summary>
            Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. 
            Refetching an empty Entity has no effect.
            </summary>
            <returns>true if Refetch succeeded, false otherwise</returns>
            <exception cref="T:System.ApplicationException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String,System.Boolean)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity()
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
            <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetMemberEntityCollections">
            <summary>
            Gets a list of all entity collections stored as member variables in this entity. The contents of the list is
            used by the Save logic to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>
            Collection with 0 or more IEntityCollection objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetAllRelations">
            <summary>
            Gets a list of all the EntityRelation objects the type of this instance has. 
            </summary>
            <returns>A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetRelationsForFieldOfType(System.String)">
            <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
            <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
            <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateDAOInstance">
            <summary>
            Creates the DAO instance for this type
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateEntityFactory">
            <summary>
            Creates the entity factory for this type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetRelatedData">
            <summary>
            Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element. 
            </summary>
            <returns>Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateTransaction(System.Data.IsolationLevel,System.String)">
            <summary>Creates a new transaction object</summary>
            <param name="levelOfIsolation">The level of isolation.</param>
            <param name="name">The name.</param>
            <returns>Transaction ready to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. Does custom serialization so event handlers do not get serialized.
            </summary>
            <param name="info">See ISerializable</param>
            <param name="context">See ISerialilzable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present, 
            in which case the predicate is ignored</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckForRefetch">
            <summary>
            Will check if the entity should refetch itself. Will use the factory pattern trick.
            Refetching occurs when the EntityFields are marked OutOfSync and thus not dirty. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfIsSubTypeOf(System.Int32)">
            <summary>Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum</summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>true if the passed in type is a supertype of this entity, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateFields">
            <summary>Creates entity fields object for this entity. Used in constructor to setup this entity in a polymorphic scenario.</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.InsertEntity">
            <summary>
            Performs the insert action of a new Entity to the persistent storage.
            </summary>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UpdateEntity">
            <summary>
            Performs the update action of an existing Entity to the persistent storage.
            </summary>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UpdateEntity(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Performs the update action of an existing Entity to the persistent storage.
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PerformRelatedEntityRemoval(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Boolean)">
            <summary>
            Performs the related entity removal.
            </summary>
            <param name="collection">The collection.</param>
            <param name="toRemove">To remove.</param>
            <param name="signalRelatedEntityManyToOne">if set to <c>true</c> [signal related entity many to one].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateValidator">
            <summary>
            Creates the validator object for this entity. Routine is called when the entity is constructed. Implement in an entity
            class to set a particular entity validator object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>ready to use validator.</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateAuthorizer">
            <summary>
            Creates the authorizer object for this entity. Routine is called when the entity is constructed. Implement in an entity
            class to set a particular entity authorizer object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>ready to use authorizer</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateAuditor">
            <summary>
            Creates the auditor object for this entity. Routine is called when the entity is constructed. Implement in an entity
            class to set a particular entity auditor object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>ready to use auditor</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateTypeDefaultValueProvider">
            <summary>
            Creates the ITypeDefaultValue instance used to provide default values for value types which aren't of type nullable(of T)
            </summary>
            <returns>ready to use TypeDefaultvalueProvider</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateConcurrencyPredicateFactory">
            <summary>
            Creates the concurrency predicate factory for this entity. Routine is called from the entity constructor. Implement in an entity
            class to set a particular ConcurrentyPredicateFactory object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>Ready to use ConcurrencyPredicateFactory</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PerformDependencyInjection">
            <summary>
            Performs the dependency injection of related objects. This method will call the Create* methods to create validator, concurrency predicate factory 
            and will then kick in the DependencyInjection functionality build into LLBLGen Pro. 
            This method is called at the end of an entity's InitClassMembers method in the generated code.
            </summary>
            <remarks>If a Validator object is already set for this entity, this method won't set the Validator property to a different object, this to 
            avoid breaking code written for previous versions of LLBLGen Pro.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed value. Call this method to signal databound controls a property has changed. 
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FixupDeserialization(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider)">
            <summary>
            Fixes deserialization empty references, because fieldinfo isn't serialized into the data.
            </summary>
            <param name="fieldProvider">The field provider.</param>
            <param name="persistenceProvider">The persistence provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfCurrentFieldValueIsNull(System.Int32)">
            <summary>
            Checks if the current value of the field on the index specified is null / not defined. 
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetInheritanceInfo">
            <summary>
            Gets the inheritance info for this entity, if applicable (it's then overriden) or null if not.
            </summary>
            <returns>InheritanceInfo object if this entity is in a hierarchy of type TargetPerEntity, or null otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetInheritanceInfoProvider">
            <summary>Gets the inheritance info provider instance of the project this entity instance is located in. </summary>
            <returns>ready to use inheritance info provider instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AddInternalsToContext">
            <summary>
            Adds the internals to context. No-op in base class, overriden in generated code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FlagAllFieldsAsChanged">
            <summary>
            A method to call OnPropertyChanged for all fields to signal to bound controls that all fields have been changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PreProcessValueToSet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object@)">
            <summary>
            Method which is meant to be overriden to pre-process a value right before it is set as a field's new value. In general you don't need to override
            this method. By default it's a no-op.
            </summary>
            <param name="fieldToSet">The field to set.</param>
            <param name="valueToSet">The value to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PostProcessValueToGet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object@)">
            <summary>
            Post-processes the value to return from GetValue. Override this method to be able to post-process any value to return from an entity field's property.
            </summary>
            <param name="fieldToGet">The field to get the value for.</param>
            <param name="valueToReturn">The value to return.</param>
            <remarks>It's recommended that you don't change the type of the value passed in. If you want to change the type, use a type-converter.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetValue(System.Int32,System.Boolean)">
            <summary>
            Gets the value of the field with the index specified. 
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <param name="returnDefaultIfNull">helper flag which signals the routine if a default value should be obtained for the type of the field or not if 
            the value is null.</param>
            <returns>the value of the field</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException">When the entity is out of sync and needs to be refetched first.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="checkForRefetch">If set to true, it will check if this entity is out of sync and will refetch it first if it is. Use true in normal
            behavior, false for framework specific code.</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetValue(System.Int32,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="checkForRefetch">If set to true, it will check if this entity is out of sync and will refetch it first if it is. Use true in normal
            behavior, false for framework specific code.</param>
            <param name="performDesyncForFKFields">if set to true, it will call into the desync routine if the field with the index passed in is an FK field.</param>
            <returns>
            true if the value is actually set, false otherwise.
            </returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PerformDesyncSetupFKFieldChange(System.Int32)">
            <summary>
            Performs the desync setup when an FK field has been changed. The entity referenced based on the FK field will be dereferenced and sync
            info will be removed.
            </summary>
            <param name="fieldindex">The fieldindex.</param>
            <remarks>Method is implemented in generated code.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnGetValue(System.Int32,System.Boolean@)">
            <summary>
            Called right at the beginning of GetValue(), which is called from an entity field property getter
            </summary>
            <param name="fieldIndex">Index of the field to get.</param>
            <param name="cancel">if set to true, the getvalue is cancelled and null is returned instead.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnGetValueComplete(System.Int32)">
            <summary>
            Called right at the end of GetValue(), which is called from an entity field property getter
            </summary>
            <param name="fieldIndex">Index of the field to get.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnSetValue(System.Int32,System.Object,System.Boolean@)">
            <summary>
            Called right at the beginning of SetValue(), which is called from an entity field property setter
            </summary>
            <param name="fieldIndex">Index of the field to set.</param>
            <param name="valueToSet">The value to set.</param>
            <param name="cancel">if set to true, the setvalue is cancelled and the set action is terminated</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnSetValueComplete(System.Int32)">
            <summary>
            Called right at the end of SetValue(), which is called from an entity field property setter
            </summary>
            <param name="fieldIndex">Index of the field to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnSave">
            <summary>
            Called right before the entity's save logic is started. This is right after all entities this entity depends on are saved succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnSaveComplete">
            <summary>
            Called after the entity's save routine is finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnDelete">
            <summary>
            Called right before the entity's Delete logic is started. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnDeleteComplete">
            <summary>
            Called after the entity's delete routine is finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFetch">
            <summary>
            Called right before the entity's Fetch logic is started. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFetchComplete">
            <summary>
            Called after the entity's Fetch routine is finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnTransactionCommit">
            <summary>
            Called after the TransactionCommit routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnTransactionRollback">
            <summary>
            Called after the TransactionRollback routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnBeginEdit">
            <summary>
            Called after BeginEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnEndEdit">
            <summary>
            Called after EndEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCancelEdit">
            <summary>
            Called after CancelEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFieldValueChanged(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Method which is called right after a field's value has been changed. There are a couple of methods called in the process of setting a 
            field's value. This particular method is solely there to act on a field's value set action. It doesn't 
            raise an event, though it receives the old and new value of the field. Not called if a fieldvalue set action failed. This method is 
            called before changed events are raised. 
            </summary>
            <param name="originalValue">The original value of the field, can be null if the field didn't have a value.</param>
            <param name="field">The field which value was set.</param>
            <remarks>In an override, cast the field's fieldindex to the fieldindex of the entity to quickly determine which field you're dealing with</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnRelatedEntitySet(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Method which is called at the end of the SetRelatedEntity() routine. Usable to act on the fact that a related entity has been set.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="fieldName">Name of the field mapped onto the relation which resolves to the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnRelatedEntityUnset(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Method which is called at the end of the UnsetRelatedEntity() routine. Usable to act on the fact that an entity has been 
            dereferenced as a related entity by the containing entity.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="fieldName">Name of the field mapped onto the relation which resolves to the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnInitializing">
            <summary>
            Called at the start of the initialization routine. Raises Initializing event.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnInitialized">
            <summary>
            Called at the end of the initialization routine. Raises Initialized event.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnInitClassMembersComplete">
            <summary>
            Called when InitClassMembers is complete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called at the end of GetObjectData. Method is used when this object is serialized. Override this method to 
            tap into the serialization sequence. (binary/soap formatter specific).
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnDeserialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called at the end of the deserialization constructor. Method is used when this object is deserialized. Override this method to 
            tap into the deserialization sequence. (binary/soap formatter specific).
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnGetFetchNewAuthorizationFailureResultHint">
            <summary>
            Returns the FetchNewAuthorizationFailureResultHint as returned by the authorizer. Only called when the CanGetLoad failed (authorization failed, so load was denied)
            </summary>
            <returns>any of the FetchNewAuthorizationFailureResultHint values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnRequiresTransactionForAuditEntities(SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction)">
            <summary>
            Method which returns true if this auditor expects to have audit entities to persist and therefore needs a transaction.
            This method is called in the situation when there's no transaction going on though one should be started right before the single-statement action
            in the case if the auditor has entities to save afterwards. It's recommended to return true if the auditor might have audit entities
            to persist after an entity save/delete/direct update/direct delete of entities. Default: false
            </summary>
            <param name="actionToStart">The single statement action which is about to be started.</param>
            <returns>
            true if a transaction should be started prior to the action to perform (entity save/delete/direct update/direct delete of entities)
            false otherwise.
            </returns>
            <remarks>If false is returned and GetAuditEntitiesToSave returns 1 or more entities, a new transaction is started to save these audit entities
            which means that this transaction isn't re-tryable if this transaction might fail.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditEntityFieldGet(System.Int32)">
            <summary>
            Audits when an entity field's value is succesfully obtained from the passed in entity
            </summary>
            <param name="fieldIndex">Index of the field which value was obtained.</param>
            <remarks>Be careful when using this auditing routine, because a lot of calls will be made to this routine when data is for example shown in
            a grid. Another thing to realize is that the audit information is stored inside the auditor which is inside an entity which might not be
            persisted/deleted later on. This means that if you use the audit data to produce entities which are then returned by GetAuditEntitiesToSave
            are never persisted if the entity this auditor is the auditor of is never persisted/deleted. In that situation, to get reliable journalling,
            use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditEntityFieldSet(System.Int32,System.Object)">
            <summary>
            Audits when an entity field is set succesfully to a new value.
            </summary>
            <param name="fieldIndex">Index of the field which got a new value.</param>
            <param name="originalValue">The original value of the field with the index passed in before it received a new value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditDereferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful dereference of related entity from the entity passed in.
            </summary>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was dereferenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditReferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful reference of related entity from the entity passed in.
            </summary>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was referenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditInsertOfNewEntity">
            <summary>
            Audits the successful insert of a new entity into the database.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditUpdateOfExistingEntity">
            <summary>
            Audits the successful update of an existing entity in the database
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditDirectUpdateOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the succesful direct update of entities in the database.
            </summary>
            <param name="filter">The filter to filter out the entities to update. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesUpdated">The number of entities updated.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditDeleteOfEntity">
            <summary>
            Audits the successful delete of an entity from the database
            </summary>
            <remarks>As the entity passed in was deleted succesfully, reading values from the passed in entity is only possible in this routine. After this call, the
            state of the entity will be reset to Deleted again and reading the fields will result in an exception. It's also recommended not to reference
            the passed in entity in any audit entity you might want to persist as the entity doesn't exist anymore in the database.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditLoadOfEntity">
            <summary>
            Audits the successful load of an entity from the database
            </summary>
            <remarks>Be careful when using this auditing routine, because the audit information is stored inside the auditor which is inside an entity 
            which might not be persisted/deleted later on. This means that if you use the audit data to produce entities which are then 
            returned by GetAuditEntitiesToSave are never persisted if the entity this auditor is the auditor of is never persisted/deleted. 
            In that situation, to get reliable journalling, use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnAuditDirectDeleteOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the successful direct delete of entities in the database
            </summary>
            <param name="filter">The filter to filter out the entities to delete. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesDeleted">The number of entities deleted.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanGetFieldValue(System.Int32)">
            <summary>
            Method which will check if the caller is allowed to get the field value with the index specified.
            </summary>
            <param name="fieldIndex">Index of the field of which the value has to be obtained.</param>
            <returns>true if the caller is allowed to obtain the value for the field specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanSetFieldValue(System.Int32)">
            <summary>
            Method which will check if the caller is allowed to set the field value with the index specified.
            </summary>
            <param name="fieldIndex">Index of the field of which the value has to be set.</param>
            <returns>true if the caller is allowed to set the value for the field specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanLoadEntity">
            <summary>
            Method which will check if the caller is allowed to fill this entity object with entity data from the database or not.
            </summary>
            <returns>true if the caller is allowed to load the data into this instance, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanSaveNewEntity">
            <summary>
            Method which will check if the caller is allowed to save this new entity object
            </summary>
            <returns>true if the caller is allowed to save this new entity, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanSaveExistingEntity">
            <summary>
            Method which will check if the caller is allowed to save this existing entity object
            </summary>
            <returns>true if the caller is allowed to save this existing entity, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanBatchUpdateEntitiesDirectly">
            <summary>
            Method which will check if the caller is allowed to update entities directly in the database. 
            </summary>
            <returns>true if the caller is allowed to update entities directly in the database, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanBatchDeleteEntitiesDirectly">
            <summary>
            Method which will check if the caller is allowed to delete entities directly in the database. 
            </summary>
            <returns>true if the caller is allowed to delete entities directly in the database, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCanDeleteEntity">
            <summary>
            Method which will check if the caller is allowed to delete this existing entity object
            </summary>
            <returns>true if the caller is allowed to delete this existing entity, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnValidateFieldValue(System.Int32,System.Object)">
            <summary>
            Method which will validate, using custom code supplied this class, the field with index fieldIndex if it should accept
            the specified value. This routine is only called when standard checks already succeeded, so value isn't null, and value does match the
            destination column definition of the EntityField related to fieldIndex.
            </summary>
            <param name="fieldIndex">Index of field to validate</param>
            <param name="value">value to validate</param>
            <returns>True if the validation succeeded, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnValidateEntityAfterLoad">
            <summary>
            Method to validate the containing entity after it is loaded. This method is called after the entity has been fully loaded.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnValidateEntityBeforeSave">
            <summary>
            Method to validate the containing entity right before the save sequence for the entity will start. LLBLGen Pro will call this method right after the
            containing entity is selected from the save queue to be saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnValidateEntityAfterSave">
            <summary>
            Method to validate the containing entity right after the entity's save action has been completed and the entity has been refetched (if applicable). 
            Note for adapter users: if the entity wasn't set to be refetched, take into account that reading properties from the containing entity will result in an
            OutOfSync exception.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnValidateEntityBeforeDelete">
            <summary>
            Method to validate the containig entity right beforethe entity's delete action will take place. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PostReadXmlFixups">
            <summary>
            Routine which is used by the generated code to set _alreadyFetched* flags after a ReadXml() action on this entity instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PostFieldValueSetAction(System.Boolean,System.String)">
            <summary>
            Method to perform post-fieldvalue set actions, like flagging this object as changed.
            This code was previously part of SetNewFieldValue, but the timing to fire the changed event was then not controllable.
            </summary>
            <param name="fieldValueSet">Field value set flag. If false, nothing happens in this method.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SyncFKFields(SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo{SD.LLBLGen.Pro.ORMSupportClasses.IEntity})">
            <summary>
            Synchronizes the PK values of the dataSupplier with the related FK values of this entity.
            </summary>
            <param name="syncInfo">Sync info with the information which to synch with what.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnEntityAfterSave(System.Object,System.EventArgs)">
            <summary> Event handler which is called by a related entity after that entity is persisted.</summary>
            <param name="sender">IEntity instance</param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetEntitySyncInformation(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Will retrieve all stored entity synchronization information for the passed in entity. If no information is
            stored, an empty hashtable is returned. All sync info is stored by fieldname
            </summary>
            <param name="relatedEntity">related entity to retrieve the sync info for</param>
            <returns>Hashtable with the sync info, stored per fieldname, set for this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UnsetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will unset (remove) the passed in information as Entity sync information. If there is no sync information stored for the related entity
            after this info has been removed, the complete hashentry is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will set the passed in information as Entity sync information. If there is no sync information stored yet for the related entity
            then a new entry is created, otherwise it's info is added to the sync information of this entity, if it isn't already present.
            If there is already sync information for this field stored for another related entity, that information is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PerformDesetupSyncRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.ComponentModel.PropertyChangedEventHandler,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32[])">
            <summary>
            Performs the desetup of the sync info related to the relatedentity passed in
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="propertiesChangedHandler">The properties changed handler.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="relation">The relation.</param>
            <param name="disconnectFromSaveEvent">if set to <c>true</c> [disconnect from save event].</param>
            <param name="signalRelatedEntity">if set to true, it will signal the related entity that it's been dereferenced by calling it's UnsetRelatedEntity
            method. If the relation is a m:1 relation, the related entity is told not to signal us back IF resetFKFields is false. 
            This is a special case because the 1:n location is in a collection and by telling the related entity not to signal us back, the related 
            entity will use a silent remove on the collection, otherwise the remove is done by the public Remove method which will always signal us back. THe
            resetFKFields flag signals that this call originates from a location where FK fields are written manually, and the signal back from the related
            entity will do that again, if performed, hence the special case.</param>
            <param name="fieldInRelatedEntity">The field in related entity.</param>
            <param name="resetFKFields">if set to <c>true</c> [reset FK fields].</param>
            <param name="fkFieldIndexes">The fk field indexes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PerformSetupSyncRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.ComponentModel.PropertyChangedEventHandler,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Boolean,System.Boolean@,System.String[])">
            <summary>
            Performs the setup sync related entity.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="propertiesChangedHandler">The properties changed handler.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="relation">The relation.</param>
            <param name="connectToSaveEvent">if set to <c>true</c> [connect to save event].</param>
            <param name="alreadyFetchedFlag">The already fetched flag.</param>
            <param name="forfNames">The forf names.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfLazyLoadingShouldOccur(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Checks if lazy loading should occur for the relation passed in and the FK fields in this entity for the relation 
            Routine is used by GetSingle... lazy loaders in selfservicing entities.
            </summary>
            <param name="relation">The relation. Is 1:1 or m:1 relation</param>
            <returns>
            If lazy loading should take place, true is returned, otherwise false. True is returned if the fk fields aren't null.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AddToTransactionIfNecessary(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the specified entity to the transaction this entity is in, if necessary.
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.RemoveFromTransactionIfNecessary(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the specified element from the  transaction this entity is in if necessary.
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetSingleRelatedEntityNavigator(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Boolean)">
            <summary>
            Sets the single related entity navigator to the value (toSet) specified. This isn't done directly, but indirecly by
            </summary>
            <param name="toSet">To set.</param>
            <param name="navigatorNameInRelatedEntity">The navigator name in related entity.</param>
            <param name="navigatorNameInThis">The navigator name in this.</param>
            <param name="currentValue">The current value.</param>
            <param name="oppositeNavigatorIsPresent">if set to <see langword="true"/> [opposite navigator is present].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetFromActiveContext(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Gets the original entity class instance containing the same data (entity instance) as present in toGet from active context. 
            If no active context is set, toGet is returned.
            </summary>
            <param name="toGet">To get.</param>
            <returns>original entity class instance with same entity instance (data) as present in toGet, or toGet if not found or no active context is set.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ValidateValue(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo,System.Object@,System.Int32)">
            <summary>
            Validates the input variable if it is a valid value for the target table field related to the passed in EntityField fieldToValidate.
            </summary>
            <param name="fieldToValidate">EntityField which is the destination of the value to validate</param>
            <param name="value">Value to validate. In the case of a scale overflow and a correction action, this value will be altered.</param>
            <param name="fieldIndex">The index of ValueDestination in the EntityFields2 array.</param>
            <returns>true if the value is valid, false otherwise</returns>
            <remarks>If a scale overflow is detected and the ScaleOverflowCorrectionActionToUse property suggests to alter the value instead
            the value is altered and no exception is thrown.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as ValueDestination field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfFieldErrorMessageIsAlreadyPresent(System.String,System.String)">
            <summary>
            Checks if the specified field error message is already present for the given field. 
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="errorMessage">The error message.</param>
            <returns>true if the error message is already present for the field, otherwise false. Case insensitive compare</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TransactionStart">
            <summary>
            Called when this Entity is added to a transaction object. This routine make sure all data currently inside the entity can be
            recovered when the transaction is rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.HandleInterfacesForCurrentPropertyDuringXmlSerialization(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode,SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Handles the interfaces for current property during XML serialization.
            </summary>
            <param name="parentDocument">The parent document.</param>
            <param name="processedObjectIDs">The processed object I ds.</param>
            <param name="aspects">The aspects.</param>
            <param name="entityNode">The entity node.</param>
            <param name="nodeCreator">The node creator.</param>
            <param name="descriptor">The current property descriptor.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.InitClass">
            <summary>
            Initializes the class' members
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCoreInternal#CallGetRelatedData">
            <summary>
            Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element.
            </summary>
            <returns>
            Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity.
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity()
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String,System.Boolean)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity()
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
            <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>
            Collection with 0 or more IEntity objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>
            Collection with 0 or more IEntity objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#GetMemberEntityCollections">
            <summary>
            Gets a list of all entity collections stored as member variables in this entity. The contents of the list is
            used by the Save logic to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>
            Collection with 0 or more IEntityCollection objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#GetEntityFactory">
            <summary>
            Returns a new ready to use factory for the type of this instance.
            </summary>
            <returns>
            a new ready to use factory for the type of this instance.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#FlagAsSaved">
            <summary>
            Method which will fire the AfterSave event to signal that this entity is persisted and refetched succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#FlagMeAsChanged">
            <summary>
            Routine which will flag all subscribers of the EntityContentsChanged event that this entity's contents is changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetFieldByName(System.String)">
            <summary>
            Helper method which performs a lookup in the fields based on the name specified.
            </summary>
            <param name="fieldName">the name of the field to search</param>
            <returns>
            the field with the name specified or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>
            A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present,
            in which case the predicate is ignored
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#CheckIfIsSubTypeOf(System.Int32)">
            <summary>
            Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum
            </summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>
            true if the passed in type is a supertype of this entity, otherwise false
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetAllRelations">
            <summary>
            Gets a list of all the EntityRelation objects the type of this instance has.
            </summary>
            <returns>
            A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetRelationsForFieldOfType(System.String)">
            <summary>
            Gets the relation objects which represent the relation the fieldName specified is mapped on.
            </summary>
            <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
            <returns>
            RelationCollection with relation object(s) which represent the relation the field is maped on
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> or <see cref="M:System.ComponentModel.IBindingList.AddNew"/> call into the underlying object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is commited, this element can succesfully finish actions performed by this
            element. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this element doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#TransactionRollback">
            <summary>
            When the ITransaction in which this element participates is rolled back, this element has to roll back its internal variables.
            This method is called by ITransaction, you should not call it by yourself.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PropertyChanged">
            <summary>
            Event fired when a field / property is changed. To fire this event from a derived class, call OnPropertyChanged.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.EntityContentsChanged">
            <summary>
            Event handler declaration for the event that is fired each time the one of values of this entity are changed.
            The event does not contain the value / field which is changed, it only signals subscribers the entity is changed
            and the subscriber should act accordingly, f.e. fire a ListChanged event.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AfterSave">
            <summary>
            Event handler declaration for the event that is fired each time this entity is persisted. Related entities can subscribe to
            this event to start housekeeping actions, like syncing internal FK fields with the PK fields of this entity.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Initializing">
            <summary>
            Event which is raised at the start of the initialization routine of the entity. The entity is clean and has no entity fields object yet. 
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Initialized">
            <summary>
            Event which is raised at the end of the initialization routine of the entity. This event is also raised if the entity is pre-filled with a 
            filled EntityFields(2) object. In your handler, check the State property of the entity Fields to see if you're dealing with a new entity or with an 
            entity which is new, but pre-initialized with filled field objects.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <value></value>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified column name.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#IsSerializing">
            <summary>
            Returns true if this entity instance is in the middle of a serialization process, for example during a WriteXml() call.
            For internal use only.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntity#PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#LLBLGenProEntityName">
            <summary>
            Returns the full name for this entity, which is important for the DAO to find back persistence info for this entity.
            </summary>
            <example>CustomerEntity</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#TypeDefaultValueProviderToUse">
            <summary>
            Gets or sets the TypeDefaultValue provider to use. This object is used to provide default values for value typed fields which are null
            and not of type Nullable(Of T)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#CustomPropertiesOfType">
            <summary>
            The custom properties for the type of this entity instance.
            </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#FieldsCustomPropertiesOfType">
            <summary>
            The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs.
            </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#Fields">
            <summary>
            Gets the fields object of this entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#PrimaryKeyFields">
            <summary>
            List of IEntityFieldCore references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            ParticipatesInTransaction is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CustomPropertiesOfType">
            <summary> The custom properties for the type of this entity instance.</summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FieldsCustomPropertiesOfType">
            <summary> The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsNewViaDataBinding">
            <summary>
            Gets / sets isAddedViaDataBinding. Databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ParentCollection">
            <summary>
            Gets / sets parentCollection. databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Validator">
            <summary>
            The validator object used to validate the entity on several moments in the entity's life.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AuthorizerToUse">
            <summary>
            Gets or sets the Authorizer for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AuditorToUse">
            <summary>
            Gets or sets the auditor object for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsNew">
            <summary>
            Marker for the entity object if the object is new and should be inserted when saved (true) or read from the
            database (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsSerializing">
            <summary>
            Returns true if this entity instance is in the middle of a Serialization process, for example during a WriteXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory to use for <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsDirty">
            <summary>
            Marker for the entity object if the object is 'dirty' (changed, true) or not (false). Affects/reads .Fields.IsDirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ActiveContext">
            <summary>
            Gets / sets the active context this entity is in. Setting this property is not adding the entity to the context, it will make contained
            entities be added to the passed in context. If the entity is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProEntityName">
            <summary>
            Returns the full name for this entity, which is important for the DAO to find back persistence info for this entity.
            </summary>
            <example>CustomerEntity</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsUpdateOnlyEntity">
            <summary>
            Gets a value indicating whether this instance is an update only entity. UpdateOnly entities are entities which are 'split off' from the main
            entity and only update rows in the database, never insert rows.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProIsSubType">
            <summary>
            Gets or sets a value indicating whether this entity is a subtype
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Site">
            <summary>
            Gets or sets the site, which is set during design time databinding. 
            </summary>
            <value>The site.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.DataErrorInfoErrorsPerField">
            <summary>
            Gets the stored error messages per field name. Used for IDataErrorInfo. Use this property in your own code to re-channel the error messages through
            another interface. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.DataErrorInfoError">
            <summary>
            Gets the data error info error message set by SetEntityError
            </summary>
            <value>The data error info error.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.InDesignMode">
            <summary>
            returns true if the classes are used in design-mode in vs.net.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.MarkedForDeletion">
            <summary>
            flag which is set when the entity is removed from an entity collection and added to a tracker. This flag is 
            used to cut off hierarchies in serialization scenario's
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            ParticipatesInTransaction is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2">
            <summary>
            General Entity Base class, which is used to inherit the Entity classes from. Used in the Adapter template set.
            This entity does not have any persistence info on board.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2">
            <summary>
            Interface used for all Entity2 classes 
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String,System.Boolean)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
            <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetMemberEntityCollections">
            <summary>
            Gets a list of all entity collections stored as member variables in this entity. The contents of the list is
            used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>Collection with 0 or more IEntityCollection2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetEntityFactory">
            <summary>
            Returns a new ready to use factory for the type of this instance.
            </summary>
            <returns>a new ready to use factory for the type of this instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Converts this entity to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String)">
            <summary>
            Converts this entity to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Converts this entity to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="processedObjectIDs">The objectIDs of entities already serialized.</param>
            <remarks>Used for serializing embedded entity data in for example auditors.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields2 object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.MakeInvalidFieldReadsFatal">
            <summary>
            Flag (default: false), which can be used to track down errors in code at runtime when migrating from LLBLGen Pro v1.0.xx to v2.0. 
            When set to true, it will make invalid field reads fatal and will make the entity throw an ORMInvalidFieldReadException when a field is
            read while the field's value hasn't been set yet.
            </summary>
            <remarks>This is to track down the following errors:<br/>
            <code>
            OrderEntity order = new OrderEntity();
            order.SomeNullableField+=10;
            </code>
            This code resulted in the value 10 in v1.0, but will result in 0 in v2, if you're using .NET 2.0. This is caused by the fact that SomeNullableField
            is null/Nothing in v2 when the entity is initialized, not 0.
            By switching on this flag you can track down these errors at runtime. <br/>
            It will cause problems with asp.net grids and new entities, so use this flag only for checking the code after you've migrated to v2.
            </remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.BuildInValidationBypassMode">
            <summary>
            The mode (default: NoBypass) to use for the build-in validation checks. Build-in validation checks are performed on every value a field is set to,
            unless this mode is set to a different value than NoBypass which makes the code to bypass these build-in validation checks. The build-in validation checks
            are used to prevent overflow exceptions when the entity is persisted to the database. 
            </summary>
            <remarks>You can also set this field by adding a key-value pair to the appSettings section of your application's config file. Use 
            'buildInValidationBypassMode' as key and the numeric value of the BuildInValidationBypass enum value as value.</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.MarkSavedEntitiesAsFetched">
            <summary>
            Flag (default: false) which controls if saved entities which aren't fetched back in the same call should be marked as Fetched instead of the
            default 'OutOfSync'. Setting this to true can save fetch roundtrips to the database to refetch data for the entity already in memory. However
            setting this setting to true can also cause getting the entity out of sync with the database because another thread has updated the same
            entity data. Use with care. It's recommended to leave it on its default value: false and only set this to true if you're sure the data in-memory
            reflects the entity data in the database.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ScaleOverflowCorrectionActionToUse">
            <summary>
            The action to use when the build-in validation detects a scale overflow (e.g. scale of a field is 2, and the value to set the field to is 10.455, which 
            has a scale of 3). Default is 'Truncate', which means that the overflow value will be truncated to the scale size.
            If validation is bypassed by setting BuildInValidationBypassMode to a value which makes the build-in validation to be bypassed, this
            setting has no effect.
            </summary>
            <remarks>You can also set this field by adding a key-value pair to the appSettings section of your application's config file. Use 
            'scaleOverflowCorrectionActionToUse ' as key and the numeric value of the ScaleOverFlowCorrectionAction enum value as value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#cctor">
            <summary>
            Static CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="name">The full name for this entity, which is important for the DAO to find back persistence info for this entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this entity using the eXclusive OR of the 
            hashcodes of the primary key fields in this entity. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetEntityError(System.String)">
            <summary>
            Sets the error message which is returned by IDataErrorInfo.Error
            </summary>
            <param name="errorMessage">the message to set</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetEntityFieldError(System.String,System.String,System.Boolean)">
            <summary>
            Sets the error message for the field specified. If there's already a message stored for this field, it's overwritten unless append is
            set to true, which appends the message to the existing error using a semi-colon as separator. The message stored
            is returned by IDataErrorInfo[fieldName];
            </summary>
            <param name="fieldName">name of the field</param>
            <param name="errorMessage">message to store. If it's an empty string, an existing error message for fieldName is cleared instead</param>
            <param name="append">If true, the value is appended to an already existing error message. As separator a semi-colon is used.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.String@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Converts this entity to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String)">
            <summary>
            Converts this entity to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Converts this entity to XML
            </summary>
            <param name="writer">The writer to write the output to.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="processedObjectIDs">The objectIDs of entities already serialized.</param>
            <remarks>Used for serializing embedded entity data in for example auditors.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Entity2Xml(System.String,System.Xml.XmlWriter,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Boolean)">
            <summary>
            Produces the actual XML for this entity, recursively. Because it recurses through referenced entities, it keeps track of which objects are processed
            so cyclic references are not resulting in cyclic recursion and thus a crash.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="writer">The writer to write the output to.</param>
            <param name="processedObjectIDs">Dictionary with ObjectIDs of all the objects already processed. If this entity's ObjectID is in the
            Dictionary's key list, a ProcessedObjectReference tag is emitted and the routine simply returns.</param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="isRootElement">if set to true, the start element produced is the absolute root element of the xml to produce.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.Xml.XmlNode,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
            <param name="format">The format.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.Xml.XmlReader,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">The reader.</param>
            <param name="format">The format the xml of the reader is in.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Xml2Entity(System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity data.
            </summary>
            <param name="reader">The reader to read the xml from.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Xml2Entity(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity data. 
            </summary>
            <param name="node">current node which points to an entity node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">IEntity2 implementing object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
            <remarks>If this entity or the passed in entity is new, no values are compared, but the physical objects are compared (object.Equals()),
            because new entities can look the same, value wise due to identity fields which are all 0, however which are physical different entities 
            (object wise)</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetCurrentFieldValue(System.Int32)">
            <summary>
            Gets the current value of the EntityField2 with the index fieldIndex.
            </summary>
            <param name="fieldIndex">Index of EntityField2 to get the current value of</param>
            <returns>The current value of the EntityField2 specified</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException">When the entity is out of sync and needs to be refetched first.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetNewFieldValue(System.String,System.Object)">
            <summary>
            Sets the EntityField with the name fieldName to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldName">Name of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetNewFieldValue(System.Int32,System.Object)">
            <summary>
            Sets the EntityField2 on index fieldIndex to the new value value. Marks also the entityfields2 as dirty. 
            </summary>
            <param name="fieldIndex">Index of EntityField2 to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ValidateEntity">
            <summary>
            General validation method which isn't used by the LLBLGen Pro framework, but can be used by your own code to validate an entity at any given moment.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Validate">
            <summary>
            Method to keep code compilable however which is now marked as obsolete, as people should call ValidateEntity.
            </summary>
            <returns>always true</returns>
            <remarks>Calls ValidateEntity.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SaveFields(System.String)">
            <summary>
            Saves the current set of fields under the name specified in an internal hashtable. All data inside the field objects is preserved.
            If there is already a set of fields saved under the name specified, that set of fields is overwritten.
            </summary>
            <param name="name">Name to store the fields under. Case sensitive</param>
            <remarks>Creates a deep copy of the fields object.</remarks>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.RollbackFields(System.String)">
            <summary>
            Replaces the current set of fields with the fields saved under the name specified. If no set of fields is found with the name specified
            an exception is thrown. Removes the entry after a succesful rollback.
            </summary>
            <param name="name">Name under which the fields are stored which have to replace the current set of fields. Case sensitive</param>
            <remarks>replaces the current set of fields with the set of fields saved under the name specified. The current set of fields, with all the
            data are lost after a succesful rollback.</remarks>
            <exception cref="T:System.ArgumentException">thrown when the name specified is not found.</exception>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.DiscardSavedFields">
            <summary>
            Removes all saved field sets from the internal hashtable, clearing up space. This method is also called when 
            an entity is saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TestOriginalFieldValueForNull(System.Enum)">
            <summary> Returns true if the original value for the field with the fieldIndex passed in, read from the persistent storage was NULL, false otherwise.
            Should not be used for testing if the current value is NULL, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TestCurrentFieldValueForNull(System.Enum)"/> for that.</summary>
            <param name="fieldIndex">Index of the field to test if that field was NULL in the persistent storage</param>
            <returns>true if the field with the passed in index was NULL in the persistent storage, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TestCurrentFieldValueForNull(System.Enum)">
            <summary>Returns true if the current value for the field with the fieldIndex passed in represents null/not defined, false otherwise.
            Should not be used for testing if the original value (read from the db) is NULL</summary>
            <param name="fieldIndex">Index of the field to test if its currentvalue is null/undefined</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallCreateEntityFactory">
            <summary>
            Calls the create entity factory.
            </summary>
            <returns>IEntityFactory2 instance created by the protected method CreateEntityFactory</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallCheckIfCurrentFieldValueIsNull(System.Int32)">
            <summary>
            Calls CheckIfCurrentFieldValueIsNull which is a protected method, but also useful for internal interpretation code. 
            </summary>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallValidateEntityAfterLoad">
            <summary>
            Calls the validate entity after load method.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallValidateEntityBeforeSave">
            <summary>
            Calls the validate entity before save method
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallValidateEntityAfterSave">
            <summary>
            Calls the validate entity after save method
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallValidateEntityBeforeDelete">
            <summary>
            Calls the validate entity before delete method.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnGetFetchNewAuthorizationFailureResultHint">
            <summary>
            Calls OnGetFetchNewAuthorizationFailureResultHint on the authorizer. Only called when the CanGetLoad failed (authorization failed, so load was denied)
            </summary>
            <returns>any of the FetchNewAuthorizationFailureResultHint values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfEntityShouldBeSaved">
            <summary>
            Checks if this entity should be saved.
            </summary>
            <returns>true if this entity should be saved, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnRequiresTransactionForAuditEntities(SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction)">
            <summary>
            Calls the OnRequiresTransactionForAuditEntities routine
            </summary>
            <param name="actionToStart">The action to start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnAuditLoadOfEntity">
            <summary>
            Calls the OnAuditLoadOfEntity() routine.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnAuditDeleteOfEntity">
            <summary>
            Calls the OnAuditDeleteOfEntity routine
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnAuditDirectUpdateOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            calls the OnAuditDirectUpdateOfEntities routine
            </summary>
            <param name="filter">The filter to filter out the entities to update. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesUpdated">The number of entities updated.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnAuditDirectDeleteOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            calls teh OnAuditDirectDeleteOfEntities routine
            </summary>
            <param name="filter">The filter to filter out the entities to delete. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesDeleted">The number of entities deleted.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnAuditInsertOfNewEntity">
            <summary>
            Calls the OnAuditInsertOfNewEntity routine.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnAuditUpdateOfExistingEntity">
            <summary>
            Calls the OnAuditUpdateOfExistingEntity routine.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnCanLoadEntity">
            <summary>
            Calls the OnCanLoadEntity routine for this entity.
            </summary>
            <returns>the result of OnCanLoadEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnCanSaveNewEntity">
            <summary>
            Calls the OnCanSaveNewEntity routine for this entity
            </summary>
            <returns>the result of OnCanSaveNewEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnCanSaveExistingEntity">
            <summary>
            Calls the OnCanSaveExistingEntity routine for this entity
            </summary>
            <returns>the result of OnCanSaveExistingEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnCanBatchUpdateEntitiesDirectly">
            <summary>
            Calls the OnCanBatchUpdateEntitiesDirectly routine for this entity
            </summary>
            <returns>the result of OnCanBatchUpdateEntitiesDirectly</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnCanBatchDeleteEntitiesDirectly">
            <summary>
            Calls the OnCanBatchDeleteEntitiesDirectly routine for this entity
            </summary>
            <returns>the result of OnCanBatchDeleteEntitiesDirectly</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnCanDeleteEntity">
            <summary>
            Calls the OnCanDeleteEntity routine for this entity
            </summary>
            <returns>the result of OnCanDeleteEntity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallOnBeforeEntitySave">
            <summary>
            Calls the on before entity save. This call originates from DataAccessAdapterBase.OnBeforeEntitySave.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetInheritanceHierarchyType">
            <summary>
            Gets the type of the inheritance hierarchy this entity is in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetIsSubType">
            <summary>
            Gets the flag to signal if this entity is a subtype or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetEntityDescription(System.Boolean)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase2", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase2" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetEntityDescription(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase2", if verbose tracing is switched off for the GeneralSwitch, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase2" will be returned</param>
            <param name="entity">the entity to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfEntityHasPendingFkSyncs(System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Checks whether this instance has pending fk syncs. A pending FK sync is a sync which hasn't been used yet.
            If an entity has pending FK syncs, it has to be included into a save queue. Only syncs with entities in the passed in queue are considered. 
            If a sync is with an entity which isn't in the passed in queue, the sync isn't honoured anyway, so the fk sync can be ignored.
            </summary>
            <param name="inQueue">Hashtable of the entities which are currently scheduled to be saved in the queue. A pending sync has to be with an entity in this queue</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String,System.Boolean)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
            <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetMemberEntityCollections">
            <summary>
            Gets a list of all entity collections stored as member variables in this entity. The contents of the list is
            used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>
            Collection with 0 or more IEntityCollection2 objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetAllRelations">
            <summary>
            Gets a list of all the EntityRelation objects the type of this instance has. 
            </summary>
            <returns>A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetRelatedData">
            <summary>
            Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element. 
            </summary>
            <returns>Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetRelationsForFieldOfType(System.String)">
            <summary>Gets the relation objects which represent the relation the fieldName specified is mapped on. </summary>
            <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
            <returns>RelationCollection with relation object(s) which represent the relation the field is maped on</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetInheritanceInfo">
            <summary>
            Gets the inheritance info for this entity, if applicable (it's then overriden) or null if not.
            </summary>
            <returns>InheritanceInfo object if this entity is in a hierarchy of type TargetPerEntity, or null otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetInheritanceInfoProvider">
            <summary>Gets the inheritance info provider instance of the project this entity instance is located in. </summary>
            <returns>ready to use inheritance info provider instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformRelatedEntityRemoval(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Performs the related entity removal.
            </summary>
            <param name="collection">The collection.</param>
            <param name="toRemove">To remove.</param>
            <param name="signalRelatedEntityManyToOne">if set to <c>true</c> [signal related entity many to one].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.FixupDeserialization(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider)">
            <summary>
            Fixes deserialization empty references, because fieldinfo isn't serialized into the data.
            </summary>
            <param name="fieldProvider">The field provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateEntityFactory">
            <summary>
            Creates the factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateValidator">
            <summary>
            Creates the validator object for this entity. Routine is called when the entity is constructed. Implement in an entity
            class to set a particular entity validator object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>ready to use validator.</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateAuthorizer">
            <summary>
            Creates the authorizer object for this entity. Routine is called when the entity is constructed. Implement in an entity
            class to set a particular entity authorizer object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>ready to use authorizer</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateAuditor">
            <summary>
            Creates the auditor object for this entity. Routine is called when the entity is constructed. Implement in an entity
            class to set a particular entity auditor object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>ready to use auditor</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateTypeDefaultValueProvider">
            <summary>
            Creates the ITypeDefaultValue instance used to provide default values for value types which aren't of type nullable(of T)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateConcurrencyPredicateFactory">
            <summary>
            Creates the concurrency predicate factory for this entity. Routine is called from the entity constructor. Implement in an entity
            class to set a particular ConcurrentyPredicateFactory object at construction time. Use this routine if you don't want to use
            LLBLGen Pro's build in dependency injection mechanism.
            </summary>
            <returns>Ready to use ConcurrencyPredicateFactory</returns>
            <remarks>Users of the .NET compact framework can't use dependency injection and should use this method instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PreProcessValueToSet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Object@)">
            <summary>
            Method which is meant to be overriden to pre-process a value right before it is set as a field's new value. In general you don't need to override
            this method. By default it's a no-op.
            </summary>
            <param name="fieldToSet">The field to set.</param>
            <param name="valueToSet">The value to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PostProcessValueToGet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Object@)">
            <summary>
            Post-processes the value to return from GetValue. Override this method to be able to post-process any value to return from an entity field's property.
            </summary>
            <param name="fieldToGet">The field to get the value for.</param>
            <param name="valueToReturn">The value to return.</param>
            <remarks>It's recommended that you don't change the type of the value passed in. If you want to change the type, use a type-converter.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformCustomXmlSerialization(System.ComponentModel.PropertyDescriptor,System.Object,System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Performs custom XML serialization for properties which have the CustomXmlSerializationAttribute. 
            Override this method if for some property the data has to be serialized into the output.
            The xmlwriter should be used to write xml to. You shouldn't emit a startelement with the propertyname, that's already done. Also
            you shouldn't emit an endelement with the propertyname, that will be done for you. Simply emit XML with the data. Be sure the xml
            data is valid. You can use the XmlHelper class if necessary.
            </summary>
            <param name="descriptor">The descriptor of the property to serialize.</param>
            <param name="propertyValue">The property value.</param>
            <param name="writer">The writer.</param>
            <param name="aspects">The aspects.</param>
            <remarks>Deserialize the value with an override of PerformCustomXmlDeserialization. Adapter specific, Compact25 specific.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformCustomXmlDeserialization(System.ComponentModel.PropertyDescriptor,System.Xml.XmlReader)">
            <summary>
            Performs custom XML deserialization for properties which have the CustomXmlSerializationAttribute. 
            The xmlreader should be used to read the xml from. The reader is positioned on the StartElement of the property which has the name of the property.
            Check if the element is empty and if not, read till the reader is positioned on the EndElement of the property (which also has the same name). 
            Your override has to set the property's value, using the descriptor's SetValue method. 
            </summary>
            <param name="descriptor">The descriptor of the property to deserialize the value for.</param>
            <param name="reader">The reader.</param>
            <remarks>Use this method to deserialize a value which was serialized with an override of PerformCustomXmlDeserialization.
            Adapter specific, Compact25 specific.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformDependencyInjection">
            <summary>
            Performs the dependency injection of related objects. This method will call the Create* methods to create validator, concurrency predicate factory 
            and will then kick in the DependencyInjection functionality build into LLBLGen Pro. 
            This method is called at the end of an entity's InitClassMembers method in the generated code.
            </summary>
            <remarks>If a Validator object is already set for this entity, this method won't set the Validator property to a different object, this to 
            avoid breaking code written for previous versions of LLBLGen Pro.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfCurrentFieldValueIsNull(System.Int32)">
            <summary>
            Checks if the current value of the field on the index specified is null / not defined. 
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AddInternalsToContext">
            <summary>
            Adds the internals to context. No-op in base class, overriden in generated code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.FlagAllFieldsAsChanged">
            <summary>
            A method to call OnPropertyChanged for all fields to signal to bound controls that all fields have been changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnBeginEdit">
            <summary>
            Called after BeginEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnEndEdit">
            <summary>
            Called after EndEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCancelEdit">
            <summary>
            Called after CancelEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnTransactionCommit">
            <summary>
            Called after the TransactionCommit routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnTransactionRollback">
            <summary>
            Called after the TransactionRollback routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnFieldValueChanged(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Method which is called right after a field's value has been changed. There are a couple of methods called in the process of setting a 
            field's value. This particular method is solely there to act on a field's value set action. It doesn't 
            raise an event, though it receives the old and new value of the field. Not called if a fieldvalue set action failed. This method is 
            called before changed events are raised. 
            </summary>
            <param name="originalValue">The original value of the field, can be null if the field didn't have a value.</param>
            <param name="field">The field which value was set.</param>
            <remarks>In an override, cast the field's fieldindex to the fieldindex of the entity to quickly determine which field you're dealing with</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnInitializing">
            <summary>
            Called at the start of the initialization routine. Raises Initializing event.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnInitialized">
            <summary>
            Called at the end of the initialization routine. Raises Initialized event.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnInitClassMembersComplete">
            <summary>
            Called when InitClassMembers is complete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetValue(System.Int32,System.Boolean)">
            <summary>
            Gets the value of the field with the index specified. 
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <param name="returnDefaultIfNull">helper flag which signals the routine if a default value should be obtained for the type of the field or not if 
            the value is null.</param>
            <returns>the value of the field</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException">When the entity is out of sync and needs to be refetched first.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the value of the field with the index specified to the value specified. 
            </summary>
            <param name="fieldIndex">The fieldindex of the field which value to set.</param>
            <param name="value">The value to set the field's currentvalue to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
            <returns>true if the value is actually set, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the value of the field with the index specified to the value specified. 
            </summary>
            <param name="fieldIndex">The fieldindex of the field which value to set.</param>
            <param name="value">The value to set the field's currentvalue to.</param>
            <param name="performDesyncForFKFields">if set to true, it will call into the desync routine if the field with the index passed in is an FK field.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
            <returns>true if the value is actually set, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformDesyncSetupFKFieldChange(System.Int32)">
            <summary>
            Performs the desync setup when an FK field has been changed. The entity referenced based on the FK field will be dereferenced and sync
            info will be removed.
            </summary>
            <param name="fieldindex">The fieldindex.</param>
            <remarks>Method is implemented in generated code.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnGetValue(System.Int32,System.Boolean@)">
            <summary>
            Called right at the beginning of GetValue(), which is called from an entity field property getter
            </summary>
            <param name="fieldIndex">Index of the field to get.</param>
            <param name="cancel">if set to true, the getvalue is cancelled and null is returned instead.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnGetValueComplete(System.Int32)">
            <summary>
            Called right at the end of GetValue(), which is called from an entity field property getter
            </summary>
            <param name="fieldIndex">Index of the field to get.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnSetValue(System.Int32,System.Object,System.Boolean@)">
            <summary>
            Called right at the beginning of SetValue(), which is called from an entity field property setter
            </summary>
            <param name="fieldIndex">Index of the field to set.</param>
            <param name="valueToSet">The value to set.</param>
            <param name="cancel">if set to true, the setvalue is cancelled and the set action is terminated</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnSetValueComplete(System.Int32)">
            <summary>
            Called right at the end of SetValue(), which is called from an entity field property setter
            </summary>
            <param name="fieldIndex">Index of the field to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnBeforeEntitySave">
            <summary>
            This method is called from the DataAccessAdapter method OnBeforeEntitySave(), unless that method is overriden. You can override 
            this OnSave method instead, which allows you to make last minute changes, though keep the logic to do that in the entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnRelatedEntitySet(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Method which is called at the end of the SetRelatedEntity() routine. Usable to act on the fact that a related entity has been set.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="fieldName">Name of the field mapped onto the relation which resolves to the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnRelatedEntityUnset(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Method which is called at the end of the UnsetRelatedEntity() routine. Usable to act on the fact that an entity has been 
            dereferenced as a related entity by the containing entity.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="fieldName">Name of the field mapped onto the relation which resolves to the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called at the end of GetObjectData. Method is used when this object is serialized. Override this method to 
            tap into the serialization sequence. (binary/soap formatter specific).
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnDeserialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called at the end of the deserialization constructor. Method is used when this object is deserialized. Override this method to 
            tap into the deserialization sequence. (binary/soap formatter specific).
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnGetFetchNewAuthorizationFailureResultHint">
            <summary>
            Returns the FetchNewAuthorizationFailureResultHint as returned by the authorizer. Only called when the CanGetLoad failed (authorization failed, so load was denied)
            </summary>
            <returns>any of the FetchNewAuthorizationFailureResultHint values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnRequiresTransactionForAuditEntities(SD.LLBLGen.Pro.ORMSupportClasses.SingleStatementQueryAction)">
            <summary>
            Method which returns true if this auditor expects to have audit entities to persist and therefore needs a transaction.
            This method is called in the situation when there's no transaction going on though one should be started right before the single-statement action
            in the case if the auditor has entities to save afterwards. It's recommended to return true if the auditor might have audit entities
            to persist after an entity save/delete/direct update/direct delete of entities. Default: false
            </summary>
            <param name="actionToStart">The single statement action which is about to be started.</param>
            <returns>
            true if a transaction should be started prior to the action to perform (entity save/delete/direct update/direct delete of entities)
            false otherwise.
            </returns>
            <remarks>If false is returned and GetAuditEntitiesToSave returns 1 or more entities, a new transaction is started to save these audit entities
            which means that this transaction isn't re-tryable if this transaction might fail.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditEntityFieldGet(System.Int32)">
            <summary>
            Audits when an entity field's value is succesfully obtained from the passed in entity
            </summary>
            <param name="fieldIndex">Index of the field which value was obtained.</param>
            <remarks>Be careful when using this auditing routine, because a lot of calls will be made to this routine when data is for example shown in
            a grid. Another thing to realize is that the audit information is stored inside the auditor which is inside an entity which might not be
            persisted/deleted later on. This means that if you use the audit data to produce entities which are then returned by GetAuditEntitiesToSave
            are never persisted if the entity this auditor is the auditor of is never persisted/deleted. In that situation, to get reliable journalling,
            use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditEntityFieldSet(System.Int32,System.Object)">
            <summary>
            Audits when an entity field is set succesfully to a new value.
            </summary>
            <param name="fieldIndex">Index of the field which got a new value.</param>
            <param name="originalValue">The original value of the field with the index passed in before it received a new value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditDereferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful dereference of related entity from the entity passed in.
            </summary>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was dereferenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditReferenceOfRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.String)">
            <summary>
            Audits the successful reference of related entity from the entity passed in.
            </summary>
            <param name="relatedEntity">The related entity which was dereferenced from entity</param>
            <param name="mappedFieldName">Name of the mapped field onto the relation from entity to related entity for which the related entity was referenced.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditInsertOfNewEntity">
            <summary>
            Audits the successful insert of a new entity into the database.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditUpdateOfExistingEntity">
            <summary>
            Audits the successful update of an existing entity in the database
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditDirectUpdateOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the succesful direct update of entities in the database.
            </summary>
            <param name="filter">The filter to filter out the entities to update. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesUpdated">The number of entities updated.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditDeleteOfEntity">
            <summary>
            Audits the successful delete of an entity from the database
            </summary>
            <remarks>As the entity passed in was deleted succesfully, reading values from the passed in entity is only possible in this routine. After this call, the
            state of the entity will be reset to Deleted again and reading the fields will result in an exception. It's also recommended not to reference
            the passed in entity in any audit entity you might want to persist as the entity doesn't exist anymore in the database.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditLoadOfEntity">
            <summary>
            Audits the successful load of an entity from the database
            </summary>
            <remarks>Be careful when using this auditing routine, because the audit information is stored inside the auditor which is inside an entity 
            which might not be persisted/deleted later on. This means that if you use the audit data to produce entities which are then 
            returned by GetAuditEntitiesToSave are never persisted if the entity this auditor is the auditor of is never persisted/deleted. 
            In that situation, to get reliable journalling, use an external service to log the audit data.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnAuditDirectDeleteOfEntities(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32)">
            <summary>
            Audits the successful direct delete of entities in the database
            </summary>
            <param name="filter">The filter to filter out the entities to delete. Can be null and can be an IPredicateExpression.</param>
            <param name="relations">The relations to use with the filter. Can be null.</param>
            <param name="numberOfEntitiesDeleted">The number of entities deleted.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanGetFieldValue(System.Int32)">
            <summary>
            Method which will check if the caller is allowed to get the field value with the index specified.
            </summary>
            <param name="fieldIndex">Index of the field of which the value has to be obtained.</param>
            <returns>true if the caller is allowed to obtain the value for the field specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanSetFieldValue(System.Int32)">
            <summary>
            Method which will check if the caller is allowed to set the field value with the index specified.
            </summary>
            <param name="fieldIndex">Index of the field of which the value has to be set.</param>
            <returns>true if the caller is allowed to set the value for the field specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanLoadEntity">
            <summary>
            Method which will check if the caller is allowed to fill this entity object with entity data from the database or not.
            </summary>
            <returns>true if the caller is allowed to load the data into this instance, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanSaveNewEntity">
            <summary>
            Method which will check if the caller is allowed to save this new entity object
            </summary>
            <returns>true if the caller is allowed to save this new entity, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanSaveExistingEntity">
            <summary>
            Method which will check if the caller is allowed to save this existing entity object
            </summary>
            <returns>true if the caller is allowed to save this existing entity, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanBatchUpdateEntitiesDirectly">
            <summary>
            Method which will check if the caller is allowed to update entities directly in the database. 
            </summary>
            <returns>true if the caller is allowed to update entities directly in the database, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanBatchDeleteEntitiesDirectly">
            <summary>
            Method which will check if the caller is allowed to delete entities directly in the database. 
            </summary>
            <returns>true if the caller is allowed to delete entities directly in the database, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCanDeleteEntity">
            <summary>
            Method which will check if the caller is allowed to delete this existing entity object
            </summary>
            <returns>true if the caller is allowed to delete this existing entity, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnValidateFieldValue(System.Int32,System.Object)">
            <summary>
            Method which will validate, using custom code supplied this class, the field with index fieldIndex if it should accept
            the specified value. This routine is only called when standard checks already succeeded, so value isn't null, and value does match the
            destination column definition of the EntityField related to fieldIndex.
            </summary>
            <param name="fieldIndex">Index of field to validate</param>
            <param name="value">value to validate</param>
            <returns>True if the validation succeeded, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnValidateEntityAfterLoad">
            <summary>
            Method to validate the containing entity after it is loaded. This method is called after the entity has been fully loaded.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnValidateEntityBeforeSave">
            <summary>
            Method to validate the containing entity right before the save sequence for the entity will start. LLBLGen Pro will call this method right after the
            containing entity is selected from the save queue to be saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnValidateEntityAfterSave">
            <summary>
            Method to validate the containing entity right after the entity's save action has been completed and the entity has been refetched (if applicable). 
            Note for adapter users: if the entity wasn't set to be refetched, take into account that reading properties from the containing entity will result in an
            OutOfSync exception.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnValidateEntityBeforeDelete">
            <summary>
            Method to validate the containig entity right beforethe entity's delete action will take place. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed value. Call this method to signal databound controls a property has changed. 
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PostFieldValueSetAction(System.Boolean,System.String)">
            <summary>
            Method to perform post-fieldvalue set actions, like flagging this object as changed.
            </summary>
            <param name="fieldValueSet">Field value set flag. If false, nothing happens in this method.</param>
            <param name="propertyName">Name of the property.</param>
            <remarks>Call this method from an override of SetNewFieldValue after that routine has been called with 'false' for FireChangeEvent</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnEntityAfterSave(System.Object,System.EventArgs)">
            <summary> Event handler which is called by a related entity after that entity is persisted.</summary>
            <param name="sender">IEntity2 instance</param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SyncFKFields(SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Synchronizes the PK values of the dataSupplier with the related FK values of this entity.
            </summary>
            <param name="syncInfo">Sync info with the information which to synch with what.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetEntitySyncInformation(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Will retrieve all stored entity synchronization information for the passed in entity. If no information is
            stored, an empty hashtable is returned. All sync info is stored by fieldname
            </summary>
            <param name="relatedEntity">related entity to retrieve the sync info for</param>
            <returns>Hashtable with the sync info, stored per fieldname, set for this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.UnsetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will unset (remove) the passed in information as Entity sync information. If there is no sync information stored for the related entity
            after this info has been removed, the complete hashentry is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformDesetupSyncRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.ComponentModel.PropertyChangedEventHandler,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Boolean,System.Boolean,System.String,System.Boolean,System.Int32[])">
            <summary>
            Performs the desetup of the sync info related to the relatedentity passed in
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="propertiesChangedHandler">The properties changed handler.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="relation">The relation.</param>
            <param name="disconnectFromSaveEvent">if set to <c>true</c> [disconnect from save event].</param>
            <param name="signalRelatedEntity">if set to true, it will signal the related entity that it's been dereferenced by calling it's UnsetRelatedEntity
            method. If the relation is a m:1 relation, the related entity is told not to signal us back IF resetFKFields is false. 
            This is a special case because the 1:n location is in a collection and by telling the related entity not to signal us back, the related 
            entity will use a silent remove on the collection, otherwise the remove is done by the public Remove method which will always signal us back. THe
            resetFKFields flag signals that this call originates from a location where FK fields are written manually, and the signal back from the related
            entity will do that again, if performed, hence the special case.</param>
            <param name="fieldInRelatedEntity">The field in related entity.</param>
            <param name="resetFKFields">if set to <c>true</c> [reset FK fields].</param>
            <param name="fkFieldIndexes">The fk field indexes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PerformSetupSyncRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.ComponentModel.PropertyChangedEventHandler,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Boolean,System.String[])">
            <summary>
            Performs the setup sync related entity.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="propertiesChangedHandler">The properties changed handler.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="relation">The relation.</param>
            <param name="connectToSaveEvent">if set to <c>true</c> [connect to save event].</param>
            <param name="forfNames">The forf names.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetName(System.String)">
            <summary>
            Sets the LLBLGenPro entity name for this entity.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will set the passed in information as Entity sync information. If there is no sync information stored yet for the related entity
            then a new entry is created, otherwise it's info is added to the sync information of this entity, if it isn't already present.
            If there is already sync information for this field stored for another related entity, that information is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CallSetRelatedEntityDuringDeserialization(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Calls the SetRelatedEntity method on the related entity specified during fast serialization. Used in 1:1 properties of generated entities in
            the deserialization branch of the setter.
            </summary>
            <param name="relatedEntity">The related entity.</param>
            <param name="navigatorNameRelatedEntity">The navigator name related entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetSingleRelatedEntityNavigator(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Sets the single related entity navigator to the value (toSet) specified. This isn't done directly, but indirecly by
            </summary>
            <param name="toSet">To set.</param>
            <param name="navigatorNameInRelatedEntity">The navigator name in related entity.</param>
            <param name="navigatorNameInThis">The navigator name in this.</param>
            <param name="currentValue">The current value.</param>
            <param name="oppositeNavigatorIsPresent">if set to <see langword="true"/> [opposite navigator is present].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. Does custom serialization so event handlers do not get serialized.
            </summary>
            <param name="info">See ISerializable</param>
            <param name="context">See ISerialilzable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present, 
            in which case the predicate is ignored</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetNewFieldValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the EntityField2 on index fieldIndex to the new value value. Marks also the entityfields2 as dirty. 
            </summary>
            <param name="fieldIndex">Index of EntityField2 to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="fireChangeEvent">if set to true, the change event is fired if the value is set, if applicable. 
            If set to false, the caller is responsible for calling the change event mechanism, recommended is then: PostFieldValueSetAction()</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfIsSubTypeOf(System.Int32)">
            <summary>Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum</summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>true if the passed in type is a supertype of this entity, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.InitClass(System.String)">
            <summary>
            Initializes the class' internals
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ValidateValue(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo,System.Object@,System.Int32)">
            <summary>
            Validates the input variable if it is a valid value for the target table field related to the passed in EntityField2 fieldToValidate.
            If value is null/nothing, true is returned.
            </summary>
            <param name="fieldToValidate">EntityField2 which is the destination of the value to validate</param>
            <param name="value">Value to validate. In the case of a scale overflow and a correction action, this value will be altered.</param>
            <param name="fieldIndex">The index of ValueDestination in the EntityFields2 array.</param>
            <returns>true if the value is valid, false otherwise</returns>
            <remarks>If a scale overflow is detected and the ScaleOverflowCorrectionActionToUse property suggests to alter the value instead
            the value is altered and no exception is thrown.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField2.DataType as ValueDestination field.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfFieldErrorMessageIsAlreadyPresent(System.String,System.String)">
            <summary>
            Checks if the specified field error message is already present for the given field. 
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="errorMessage">The error message.</param>
            <returns>true if the error message is already present for the field, otherwise false. Case insensitive compare</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TransactionStart">
            <summary>
            Called when this Entity2 is added to a transaction object. This routine make sure all data currently inside the entity can be
            recovered when the transaction is rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact25 | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact25 | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCoreInternal#CallGetRelatedData">
            <summary>
            Gets all related data objects, stored by name. The name is the field name mapped onto the relation for that particular data element.
            </summary>
            <returns>
            Dictionary with per name the related referenced data element, which can be an entity collection or an entity or null
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetSerializationFlags">
            <summary>
            Gets the serialization flags.
            </summary>
            <returns>
            Bitvector with flags which control what's serialized.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckOneWayRelations(System.String)">
            <summary>
            Checks if the relation mapped by the property with the name specified is a one way / single sided relation. If the passed in name is null, it
            will return true if the entity has any single-sided relation
            </summary>
            <param name="propertyName">Name of the property which is mapped onto the relation to check, or null to check if the entity has any relation
            which is single sided</param>
            <returns>true if the relation is single sided / one way (so the opposite relation isn't present), false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.DeserializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Object)">
            <summary>
            Method which restores owned data - i.e. considered private to this entity
            and not shared with any external object
            </summary>
            <param name="reader">The SerializationReader containing the serialized data</param>
            <param name="context">The serialization flags (previously read)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SerializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            Method which stores owned data - i.e. considered private to this entity
            and not shared with any external object
            </summary>
            <param name="writer">SerializationWriter</param>
            <param name="context">The serialization flags (previously constructed)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AddToMemberEntityCollectionsQueue(System.Collections.Generic.Queue{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Adds the member collections to the collections queue (base first)
            </summary>
            <param name="collectionsQueue">The collections queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetFromMemberEntityCollectionsQueue(System.Collections.Generic.Queue{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2})">
            <summary>
            Gets the member collections queue from the queue (base first)
            </summary>
            <param name="collectionsQueue">The collections queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.HasPopulatedMemberEntityCollections">
            <summary>
            Determines whether the entity has populated member collections
            </summary>
            <returns>true if the entity has populated member collections.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateMemberEntityCollectionsQueue(System.Collections.Generic.Queue{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2},System.Collections.Generic.Queue{System.Boolean})">
            <summary>
            Creates the member entity collections queue.
            </summary>
            <param name="collectionsQueue">The collections queue.</param>
            <param name="requiredQueue">The required queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateFields">
            <summary>Creates entity fields object for this entity. Used in constructor to setup this entity in a polymorphic scenario.</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetObjectIDInternal">
            <summary>
            Gets the object ID internal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetMemberEntityCollectionsInternal">
            <summary>
            Gets the member entity collections internal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetCreatedMemberEntityCollectionsInternal(System.Collections.BitArray)">
            <summary>
            Gets the created member entity collections internal.
            </summary>
            <param name="requiredFlags">The required flags.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity.
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity()
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String,System.Boolean)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity()
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
            <param name="signalRelatedEntityManyToOne">if set to true it will notify the manytoone side, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>
            Collection with 0 or more IEntity2 objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>
            Collection with 0 or more IEntity2 objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#GetMemberEntityCollections">
            <summary>
            Gets a list of all entity collections stored as member variables in this entity. The contents of the list is
            used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>
            Collection with 0 or more IEntityCollection2 objects, referenced by this entity
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#GetEntityFactory">
            <summary>
            Returns a new ready to use factory for the type of this instance.
            </summary>
            <returns>
            a new ready to use factory for the type of this instance.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#FlagMeAsChanged">
            <summary>
            Routine which will flag all subscribers of the EntityContentsChanged event that this entity's contents is changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#FlagAsSaved">
            <summary>
            Flags me as saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetFieldByName(System.String)">
            <summary>
            Helper method which performs a lookup in the fields based on the name specified.
            </summary>
            <param name="fieldName">the name of the field to search</param>
            <returns>
            the field with the name specified or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>
            A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present,
            in which case the predicate is ignored
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#CheckIfIsSubTypeOf(System.Int32)">
            <summary>
            Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum
            </summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>
            true if the passed in type is a supertype of this entity, otherwise false
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetAllRelations">
            <summary>
            Gets a list of all the EntityRelation objects the type of this instance has.
            </summary>
            <returns>
            A list of all the EntityRelation objects the type of this instance has. Hierarchy relations are excluded.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#GetRelationsForFieldOfType(System.String)">
            <summary>
            Gets the relation objects which represent the relation the fieldName specified is mapped on.
            </summary>
            <param name="fieldName">Name of the field mapped onto the relation of which the relation objects have to be obtained.</param>
            <returns>
            RelationCollection with relation object(s) which represent the relation the field is maped on
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> or <see cref="M:System.ComponentModel.IBindingList.AddNew"/> call into the underlying object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is commited, this element can succesfully finish actions performed by this
            element. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this element doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is rolled back, this element has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PropertyChanged">
            <summary>
            Event fired when a field / property is changed. To fire this event from a derived class, call OnPropertyChanged.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.EntityContentsChanged">
            <summary>
            Event handler declaration for the event that is fired each time the one of values of this entity are changed.
            The event does not contain the value / field which is changed, it only signals subscribers the entity is changed
            and the subscriber should act accordingly, f.e. fire a ListChanged event.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AfterSave">
            <summary>
            Event handler declaration for the event that is fired each time this entity is persisted. Related entities can subscribe to
            this event to start housekeeping actions, like syncing internal FK fields with the PK fields of this entity.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Initializing">
            <summary>
            Event which is raised at the start of the initialization routine of the entity. The entity is clean and has no entity fields object yet. 
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Initialized">
            <summary>
            Event which is raised at the end of the initialization routine of the entity. This event is also raised if the entity is pre-filled with a 
            filled EntityFields(2) object. In your handler, check the State property of the entity Fields to see if you're dealing with a new entity or with an 
            entity which is new, but pre-initialized with filled field objects.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <value></value>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified column name.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.RelatedEntitySyncInfosInternal">
            <summary>
            Gets or sets the related entity sync infos internal.
            </summary>
            <value>The related entity sync infos internal.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Field2RelatedEntityInternal">
            <summary>
            Gets or sets the field to related entity combination
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntity2#PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#LLBLGenProEntityName">
            <summary>
            Returns the full name for this entity, which is important for the DAO to find back persistence info for this entity.
            </summary>
            <example>CustomerEntity</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#TypeDefaultValueProviderToUse">
            <summary>
            Gets or sets the TypeDefaultValue provider to use. This object is used to provide default values for value typed fields which are null
            and not of type Nullable(Of T)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#CustomPropertiesOfType">
            <summary>
            The custom properties for the type of this entity instance.
            </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#FieldsCustomPropertiesOfType">
            <summary>
            The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs.
            </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCore#Fields">
            <summary>
            Gets the fields object of this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#Transaction">
            <summary>
            The ITransactionthis ITransactionalElement implementing object is participating in. Only valid if
            ParticipatesInTransaction is true. If set to null, the ITransactionalElement is no longer participating in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionalElement#ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CustomPropertiesOfType">
            <summary> The custom properties for the type of this entity instance.</summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.FieldsCustomPropertiesOfType">
            <summary> The custom properties for the fields of the type of this entity instance. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
            <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsUpdateOnlyEntity">
            <summary>
            Gets a value indicating whether this instance is an update only entity. UpdateOnly entities are entities which are 'split off' from the main
            entity and only update rows in the database, never insert rows.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsNewViaDataBinding">
            <summary>
            Gets / sets isAddedViaDataBinding. Databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ParentCollection">
            <summary>
            Gets / sets parentCollection. databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsNew">
            <summary>
            Marker for the entity object if the object is new and should be inserted when saved (true) or read from the
            database (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsDirty">
            <summary>
            Marker for the entity object if the object is 'dirty' (changed, true) or not (false). Affects/reads .Fields.IsDirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ActiveContext">
            <summary>
            Gets / sets the active context this entity is in. Setting this property is not adding the entity to the context, it will make contained
            entities be added to the passed in context. If the entity is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProIsSubType">
            <summary>
            Gets or sets a value indicating whether this entity is a subtype
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Site">
            <summary>
            Gets or sets the site, which is set during design time databinding. 
            </summary>
            <value>The site.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.DataErrorInfoErrorsPerField">
            <summary>
            Gets the stored error messages per field name. Used for IDataErrorInfo. Use this property in your own code to re-channel the error messages through
            another interface. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.DataErrorInfoError">
            <summary>
            Gets the data error info error message set by SetEntityError
            </summary>
            <value>The data error info error.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.InDesignMode">
            <summary>
            returns true if the classes are used in design-mode in vs.net.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.MarkedForDeletion">
            <summary>
            flag which is set when the entity is removed from an entity collection and added to a tracker. This flag is 
            used to cut off hierarchies in serialization scenario's
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PrimaryKeyFields">
            <summary>
            List of IEntityFieldCore references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory to use for <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AuthorizerToUse">
            <summary>
            Gets or sets the Authorizer for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AuditorToUse">
            <summary>
            Gets or sets the Auditor for this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Validator">
            <summary>
            The validator object used to validate the entity on several moments in the entity's life.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1">
            <summary>
            Implementation of the entity collection base class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection">
            <summary>
            Interface for the EntityCollection type. The collection defines typed basic collection behavior. 
            Selfservicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds an IEntity object to the list.
            </summary>
            <param name="entityToAdd">Entity to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.AddRange(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the range of objects passed in. Objects have to be IEntity implementing objects
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Inserts an IEntity on position Index
            </summary>
            <param name="index">Index where to insert the Object Entity</param>
            <param name="entityToAdd">Entity to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Remove given IEntity from the list.
            </summary>
            <param name="entityToRemove">Entity object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns true if the list contains the given IEntity Object
            </summary>
            <param name="entityToFind">Entity object to check.</param>
            <returns>true if Entity exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns index in the list of given IEntity object.
            </summary>
            <param name="entityToFind">Entity Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity[],System.Int32)">
            <summary>
            copy the complete list of IEntity objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain IEntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the containing entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SaveMulti">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.). Will not recursively save entities inside the collection.
            </summary>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SaveMulti(System.Boolean)">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.)
            </summary>
            <param name="recurse">If true, will recursively save the entities inside the collection</param>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.DeleteMulti">
            <summary>
            Deletes all Entities in the IEntityCollection from the persistent storage. If this IEntityCollection is added
            to a transaction, the delete processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the deletes are done in a
            new Transaction (which is created in an inherited method.)
            Deleted entities are marked deleted and are removed from the collection.
            </summary>
            <returns>Amount of entities deleted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int64)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetDbCount">
            <summary> Gets the amount of Entity objects in the database.</summary>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified.</summary>
            <param name="filter">the filter to apply</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified and the relations specified.</summary>
            <param name="filter">the filter to apply</param>
            <param name="relations">The relations to walk</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateHierarchicalProjection(System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, a new datatable is created inside destination or if one with the name of the entity is already present, 
            that one is used. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this 
            collection, using the collectionProjections data passed in. Per entity type found, a new datatable is created inside destination or if one with 
            the name of the entity is already present, that one is used.
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateHierarchicalProjection(System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, an entry is stored inside the destination dictionary. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this collection,
            using the collectionProjections data passed in. Per entity type found, an entry is stored inside the destination dictionary. 
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateView">
            <summary>
            Creates a new EntityView object of the right type on this collection with no filter nor sorter applied.
            </summary>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter applied
            </summary>
            <param name="filter">The filter.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter and sorter applied to it.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter and sorter applied to it and the 
            dataChangeAction set to the passed in value.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into all the entities in this collection.
            </summary>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the passed in collection. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.
            This routine batches fetches to have at most 5*DaoBase.ParameterisedPrefetchPathThreshold of parameters per fetch. Keep in mind 
            that most databases have a limit on the # of parameters per query. 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.DefaultView">
            <summary>
            Gets the default view for this entitycollection. The returned value is the same instance every time this property is read. 
            It's a new entity view without a filter or a sorter.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty. 
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.MaxNumberOfItemsToReturn">
            <summary>
            The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SortClauses">
            <summary>
            The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. This property is calculated in real time
            and can be time consuming when the collection contains a lot of objects. Use this property only in cases when the value
            of this property is used to do a refetch or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.EntityFactoryToUse">
            <summary>
            The EntityFactory to use when creating entity objects during a GetMulti() call or other logic which requires the creation of new entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SuppressClearInGetMulti">
            <summary>
            Surpresses the removal of all contents of the collection in a GetMulti*() call. Used by code in related entities to prevent the removal
            of objects when collection properties are accessed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during a GetMulti() call or when AddNew is called.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.DoNotPerformAddIfPresent">
            <summary>
            When set to true, an entity passed to Add() or Insert() will be tested if it's already present. If so, the index is returned and the
            object is not added again. If set to false (default: true) this check is not performed. Setting this property to true can slow down fetch logic.
            DataAccessAdapter's fetch logic sets this property to false during a multi-entity fetch.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Capacity">
            <summary>
            Gets / sets the initial capacity of the entity collection. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.RemovedEntitiesTracker">
            <summary>
            Gets or sets the entity collection which should be used as removed entities tracker. If this property is set to an IEntityCollection2 instance,
            all entities which are removed from this collection are marked for deletion and placed in this removed entities tracker collection.
            This collection can then later on be used to delete these entities from the database in one go.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess">
            <summary>
            Internal interface for entity collection method access when the type of the collection isn't known.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess.EntityCollection2Xml(System.String,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities, 
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess.Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionAccess.GetMultiInternal(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
            <remarks>special version which is used by prefetch path code, and which modifies the relation collection and filter for hierarchical fetches</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory)">
            <summary>
            CTor
            </summary>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.AddNew">
            <summary>
            Will add a new entity to the list, will set its parent collection property so CancelEdit will remove
            it from the list again, and will set its flag that it is added by databinding. 
            </summary>
            <remarks>Do not call this method from your own code. This is a databinding ONLY method.</remarks>
            <exception cref="T:System.InvalidOperationException">If this collection is set to ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain EntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the related entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity participates is commited, this IEntity can succesfully finish actions performed by this
            IEntity. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this IEntity doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity participates is rolled back, this IEntity has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateHierarchicalProjection(System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, a new datatable is created inside destination or if one with the name of the entity is already present, 
            that one is used. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateHierarchicalProjection(System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in 
            this collection. Per entity type found, an entry is stored inside the destination dictionary. It will simply project every data element. 
            </summary>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this 
            collection, using the collectionProjections data passed in. Per entity type found, a new datatable is created inside destination or if one with 
            the name of the entity is already present, that one is used.
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>Data in destination's datatables (if present) is removed before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates a hierarchical projection of all the data in this view and for each type in the complete graph found starting with each entity in this view,
            using the viewProjections data passed in. Per entity type found, an entry is stored inside the destination dictionary. 
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.BuildCollectionProjectors(System.Collections.Generic.ICollection{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection}@)">
            <summary>
            Builds the collection projectors for this collection.
            </summary>
            <param name="collectionProjections">The collection projections.</param>
            <param name="entitiesPerType">Type of the entities per.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateHierarchicalProjectionInternal(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet,System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates the hierarchical projection for the entities per type passed in into the destination specified.
            </summary>
            <param name="collectionProjections">The collection projections.</param>
            <param name="destination">The destination.</param>
            <param name="entitiesPerType">Type of the entities per.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateHierarchicalProjectionInternal(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates the hierarchical projection for the entities per type passed in into the destination specified.
            </summary>
            <param name="collectionProjections">The collection projections.</param>
            <param name="destination">The destination.</param>
            <param name="entitiesPerType">Type of the entities per.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateView">
            <summary>
            Creates a new EntityView object of the right type on this collection with no filter nor sorter applied.
            </summary>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter applied
            </summary>
            <param name="filter">The filter.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter and sorter applied to it.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter and sorter applied to it and the 
            dataChangeAction set to the passed in value.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SaveMulti">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.). Will not recursively save entities inside the collection.
            </summary>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SaveMulti(System.Boolean)">
            <summary> Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a new Transaction (which is created in an inherited method.)</summary>
            <param name="recurse">If true, will recursively save the entities inside the collection</param>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.DeleteMulti">
            <summary> Deletes all Entities in the IEntityCollection from the persistent storage. If this IEntityCollection is added
            to a transaction, the delete processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the deletes are done in a/ new Transaction.
            Deleted entities are marked deleted and are removed from the collection.</summary>
            <returns>Amount of entities deleted</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Deletes from the persistent storage all entities of the type this collection is for which match with the specified filter, 
            formulated in the predicate or predicate expression definition.</summary>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete. Can be null, 
            which will result in a query removing all entities of the type this collection is for from the persistent storage</param>
            <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for entities which are in a hierarchy of TargetPerEntity</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Deletes from the persistent storage all entities of the type this collection is for which match with the specified filter, 
            formulated in the predicate or predicate expression definition.</summary>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete. Can be null, 
            which will result in a query removing all entities of the type this collection is for from the persistent storage</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <remarks>Not supported for entities which are in a hierarchy of TargetPerEntity</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>Updates in the persistent storage all entities of the type this collection is for which have data in common with the specified 
            entity. Which fields are updated in those matching entities depends on which fields are
            <i>changed</i> in entityWithNewValues. The new values of these fields are read from entityWithNewValues. </summary>
            <param name="entityWithNewValues">entity instance which holds the new values for the matching entities to update. Only changed fields are taken 
            into account</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update. Can be null, which
            will result in an update action which will affect all Customer entities.</param>
            <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>Updates in the persistent storage all entities of the type this collection is for which have data in common with the specified 
            entity. Which fields are updated in those matching entities depends on which fields are
            <i>changed</i> in entityWithNewValues. The new values of these fields are read from entityWithNewValues. </summary>
            <param name="entityWithNewValues">entity instance which holds the new values for the matching entities to update. Only changed fields are taken 
            into account</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.FetchExcludedFields(SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList)">
            <summary>
            Loads the data for the excluded fields specified in the list of excluded fields into all the entities in this collection.
            </summary>
            <param name="excludedIncludedFields">The excludedIncludedFields object as it is used when fetching the entity. If you used 
            the excludedIncludedFields object to fetch only the fields in that list (i.e. excludedIncludedFields.ExcludeContainedFields==false), the routine
            will fetch all other fields in the resultset for the entities in the collection excluding the fields in excludedIncludedFields.</param>
            <remarks>The field data is set like a normal field value set, so authorization is applied to it.
            This routine batches fetches to have at most 5*DaoBase.ParameterisedPrefetchPathThreshold of parameters per fetch. Keep in mind 
            that most databases have a limit on the # of parameters per query. 
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int64)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetDbCount">
            <summary> Gets the amount of Entity objects in the database.</summary>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified.</summary>
            <param name="filter">the filter to apply</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified and the relations specified.</summary>
            <param name="filter">the filter to apply</param>
            <param name="relations">The relations to walk</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
            <remarks>For backwards compatibility.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            It will produce "EntityCollectionBase", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityCollectionBase" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.EntityCollection2Xml(System.String,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities, 
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">List with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#SilentRemove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Removes the passed in entity from the collection without notifying the entity to remove that it has been removed from this collection.
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#RaiseListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Raises the list changed event, with the parameters passed in.
            </summary>
            <param name="index">The index.</param>
            <param name="typeOfChange">The type of change.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#ResetCachedPkHashes">
            <summary>
            Resets the CachedPkHashes. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            </summary>
            <param name="switchFlag">switch flag.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#CreateDummyInstance">
            <summary>
            Creates a dummy instance using the entity factory stored in an inherited collection. This dummy instance is then used to produce
            property descriptors.
            </summary>
            <returns>
            Dummy instance of entity contained in this collection, using the set factory.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionAccess#EntityCollection2Xml(System.String,System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities, 
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionAccess#Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference})">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">list with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollectionAccess#GetMultiInternal(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
            <remarks>special version which is used by prefetch path code, and which modifies the relation collection and filter for hierarchical fetches</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.PerformSetRelatedEntity(`0)">
            <summary>
            Performs the set related entity action on the passed in entity. This action is delegated to an inheritor.
            </summary>
            <param name="entity">The entity to perform the setrelated entity action on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.PerformUnsetRelatedEntity(`0)">
            <summary>
            Performs the unset related entity action on the passed in entity. This action is delegated to an inheritor.
            </summary>
            <param name="entity">The entity to perform the unsetrelated entity action on.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.PerformAddToActiveContext(`0)">
            <summary>
            Performs the add action to the active context for this collection
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetEntityDescription(`0,System.Boolean)">
            <summary>
            Gets the entity description for the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <param name="switchFlag">if true, the method will produce TEntity.GetEntityDescription, otherwise it's a no-op</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.PlaceInRemovedEntitiesTracker(`0)">
            <summary>
            Places the item in the set RemovedEntitiesTracker.
            </summary>
            <param name="item">The item to add to the tracker.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateDAOInstance">
            <summary>Creats a new DAO instance so code which is in the base class can still use the proper DAO object.</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.CreateTransaction(System.Data.IsolationLevel,System.String)">
            <summary>Creates a new transaction object</summary>
            <param name="levelOfIsolation">The level of isolation.</param>
            <param name="name">The name.</param>
            <returns>Transaction ready to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.AddContainedEntitiesToContext">
            <summary>
            Adds the contained entities to the active set context.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory)">
            <summary>
            Inits the class
            </summary>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.InitClass">
            <summary>
            Inits the class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.PerformSaveMulti(System.Boolean)">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.)
            </summary>
            <param name="recurse">If true, will recursively save the entities inside the collection</param>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.PerformDeleteMulti">
            <summary>
            Deletes all Entities in the IEntityCollection from the persistent storage. If this IEntityCollection is added
            to a transaction, the delete processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the deletes are done in a
            new Transaction (which is created in an inherited method.)
            Deleted entities are marked deleted and are removed from the collection.
            </summary>
            <returns>Amount of entities deleted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetMultiInternal(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@,SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
            If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
            is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
            <remarks>special version which is used by prefetch path code, and which modifies the relation collection and filter for hierarchical fetches</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetDbCount">
            <summary> Gets the amount of Entity objects in the database.</summary>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified.</summary>
            <param name="filter">the filter to apply</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified and the relations specified.</summary>
            <param name="filter">the filter to apply</param>
            <param name="relations">The relations to walk</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds an IEntity object to the list.
            </summary>
            <param name="entityToAdd">Entity to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#AddRange(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the range of objects passed in. Objects have to be IEntity implementing objects
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Inserts an IEntity on position Index
            </summary>
            <param name="index">Index where to insert the Object Entity</param>
            <param name="entityToAdd">Entity to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Remove given IEntity from the list.
            </summary>
            <param name="entityToRemove">Entity object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns true if the list contains the given IEntity Object
            </summary>
            <param name="entityToFind">Entity object to check.</param>
            <returns>true if Entity exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns index in the list of given IEntity object.
            </summary>
            <param name="entityToFind">Entity Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity[],System.Int32)">
            <summary>
            copy the complete list of IEntity objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain IEntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the containing entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Data.DataSet)">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this collection,
            using the collectionProjections data passed in. Per entity type found, a new datatable is created inside destination.
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dataset in which the projection result is stored. Each DataTable has the name of the entity contained,
            e.g. "CustomerEntity". DataRelations are created between the data if applicable.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CreateHierarchicalProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData},System.Collections.Generic.Dictionary{System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection})">
            <summary>
            Creates a hierarchical projection of all the data in this collection and for each type in the complete graph found starting with each entity in this collection,
            using the collectionProjections data passed in. Per entity type found, an entry is stored inside the destination dictionary. 
            </summary>
            <param name="collectionProjections">The projection data per entity type</param>
            <param name="destination">The destination dictionary in which the projection result is stored.</param>
            <remarks>destination is cleared before a projection is performed.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CreateView">
            <summary>
            Creates a new EntityView object of the right type on this collection with no filter nor sorter applied.
            </summary>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter applied
            </summary>
            <param name="filter">The filter.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter and sorter applied to it.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#CreateView(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Creates a new EntityView object of the right type on this collection with the passed in filter and sorter applied to it and the 
            dataChangeAction set to the passed in value.
            </summary>
            <param name="filter">The filter.</param>
            <param name="sorter">The sorter.</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
            <returns>new EntityView on this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetList">
            <summary>
            Returns an <see cref="T:System.Collections.IList"></see> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList"></see> itself.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IList"></see> that can be bound to a data source from the object.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#SurpressListChangedEvents">
            <summary>
            Gets or sets a value indicating whether [surpress list changed events].
            </summary>
            <value>
            	<c>true</c> if [surpress list changed events]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ICollectionMaintenance#DeserializationInProgress">
            <summary>
            Gets / sets the DeserializationInProgress flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty.
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#DefaultView">
            <summary>
            Gets the default view for this entitycollection. The returned value is a new instance every time this property is read. It's a new entity view without a 
            filter or a sorter.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityCollection#Capacity">
            <summary>
            Gets / sets the initial capacity of the entity collection. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ContainsListCollection">
            <summary>
            Gets a value indicating whether the collection is a collection of <see cref="T:System.Collections.IList"></see> objects.
            </summary>
            <value></value>
            <returns>true if the collection is a collection of <see cref="T:System.Collections.IList"></see> objects; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ParticipatesInTransaction"/> is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.MaxNumberOfItemsToReturn">
            <summary>
            The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SortClauses">
            <summary>
            The order by specifications for the sorting of the resultset when fetching it from the persistent storage.
            When not specified, no sorting is applied.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. This property is calculated in real time
            and can be time consuming when the collection contains a lot of objects. Use this property only in cases when the value
            of this property is used to do a refetch or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.SuppressClearInGetMulti">
            <summary>
            Surpresses the removal of all contents of the collection in a GetMulti*() call. Used by code in related entities to prevent the removal
            of objects when collection properties are accessed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.EntityFactoryToUse">
            <summary>
            The EntityFactory to use when creating entity objects during a GetMulti() call or other logic which requires the creation of new entities.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.DefaultView">
            <summary>
            Gets the default view for this entitycollection. The returned value is the same instance every time this property is read. 
            It's an entity view without a filter or a sorter.
            </summary>
            <value>The default view.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.RemovedEntitiesTracker">
            <summary>
            Gets or sets the entity collection which should be used as removed entities tracker. If this property is set to an IEntityCollection instance,
            all entities which are removed from this collection are marked for deletion and placed in this removed entities tracker collection.
            This collection can then later on be used to delete these entities from the database in one go.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ContainingEntity">
            <summary>
            Gets the entity which contains this collection (e.g. Customer, if this collection is the Customer's Orders collection), or null if this
            collection isn't part of any entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase`1.ContainingEntityMappedField">
            <summary>
            Gets the name of the field mapped onto the relation in the opposite entity which is represented by this collection, if this collection is 
            contained by an entity. E.g. it will return "Customer" if the relation Customer - Order has the field 'Customer' mapped onto it in Order and 
            this collection is the Orders collection in Customer. If this collection isn't contained in any entity, an empty string is returned.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner">
            <summary>
            Simple designer class for adapter collections to set the entity factory when no factory is set.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.InDesignMode">
            <summary>
            Variable which is set as soon as the code determines the objects are used in design mode, instead of runtime mode. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.OnSetEntityFactory(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the Set EntityFactory to use command in the menu
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">E.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.SelectEntityFactoryToUse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,System.Boolean@)">
            <summary>
            Selects the entity factory to use for the EntityCollectionBase2 instance which is the component.
            </summary>
            <param name="currentFactory">The current factory.</param>
            <param name="cancelClicked">if set to <c>true</c> [cancel clicked].</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.Verbs">
            <summary>
            Gets the verbs.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem">
            <summary>
            Toolbox item for EntityCollectionBase2 derived classes. This class makes sure the designer pops up the first time an entity collection
            is dragged onto the form.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem"/> instance.
            </summary>
            <param name="typeToRepresent">Type to represent.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem"/> instance.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Creates the components core.
            </summary>
            <param name="host">Host.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactory2Converter">
            <summary>
            Type converter class which is used during design time to serialize a correct constructor call for an entity factory2. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactory2Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified context.
            </summary>
            <param name="context">Context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>
            	<c>true</c> if this instance [can convert to] the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactory2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to the specified type, if applicable.
            </summary>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value.</param>
            <param name="destinationType">Destination type.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCache2">
            <summary>
            Cache class which ensures that only one instance of an entity factory is created/stored during serialization
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCache2.GetEntityFactory(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Gets the entity factory for the specified entity from the cache 
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCache2.GetEntityFactory(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Gets the unique entity factory instance for the entity factory passed in to use for serialization.
            </summary>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCache2.GetEntityFactory(System.Type)">
            <summary>
            Gets the entity factory instance to use for the type passed in. 
            </summary>
            <param name="factoryType">Type of the factory.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore">
            <summary>
            Abstract base class for entity factories. The class is suffixed with 'Core' as the generated code contains another base class, EntityFactoryBase, which
            is the direct base class for the generated entity factories. 
            </summary>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory">
            <summary>
            Interface for EntityFactory objects used by several methods which have to create entity objects on the fly.
            SelfServicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore">
            <summary>
            Interface to define a common interface between the factory interfaces for adapter and selfservicing.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore.Create">
            <summary>
            Creates a new entity instance.
            </summary>
            <returns>new entity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore.CreateHierarchyRelations">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched. Uses string.Empty as alias.
            </summary>
            <returns>null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore.CreateHierarchyRelations(System.String)">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched. Uses the passed in objectAlias as alias for
            the elements in the relations.
            </summary>
            <param name="objectAlias">The object alias to use for the elements in the relations.</param>
            <returns>
            null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore.ForEntityName">
            <summary>
            returns the name of the entity this factory is for, e.g. "EmployeeEntity"
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.Create">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> instance 
            </summary>
            <returns>the new IEntity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.Create(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> instance but uses a special constructor which will set the Fields object of the new
            IEntity instance to the passed in fields object. Implement this method to support multi-type in single table inheritance.
            </summary>
            <param name="fields">Populated IEntityFields object for the new entity to create</param>
            <returns>Fully created and populated (due to the IEntityFields object) IEntity object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateFields">
            <summary>
            Creates, using the generated EntityFieldsFactory, the IEntityFields object for the entity to create. This method is used
            by internal code to create the fields object to store fetched data. 
            </summary>
            <returns>Empty IEntityFields object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateHierarchyFields">
            <summary>
            Creates the hierarchy fields for the entity to which this factory belongs.
            </summary>
            <returns>IEntityFields object with the fields of all the entities in the hierarchy of this entity or the fields of this entity if
            the entity isn't in a hierarchy.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.GetEntityFactory(System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            This method retrieves, using the InheritanceInfoprovider, the factory for the entity represented by the values passed in.
            </summary>
            <param name="fieldValues">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateEntityCollection">
            <summary>
            Creates a new entity collection for the entity of this factory.
            </summary>
            <returns>ready to use new entity collection, typed.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateEntityFromEntityTypeValue(System.Int32)">
            <summary>
            Creates a new entity instance using the GeneralEntityFactory in the generated code, using the passed in entitytype value
            </summary>
            <param name="entityTypeValue">The entity type value of the entity to create an instance for.</param>
            <returns>new IEntity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.Create">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> instance
            </summary>
            <returns>the new IEntity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.Create(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> instance but uses a special constructor which will set the Fields object of the new
            IEntity instance to the passed in fields object. Implement this method to support multi-type in single table inheritance.
            </summary>
            <param name="fields">Populated IEntityFields object for the new entity to create</param>
            <returns>
            Fully created and populated (due to the IEntityFields object) IEntity object
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.CreateFields">
            <summary>
            Creates, using the generated EntityFieldsFactory, the IEntityFields object for the entity to create. This method is used
            by internal code to create the fields object to store fetched data.
            </summary>
            <returns>Empty IEntityFields object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.CreateHierarchyFields">
            <summary>
            Creates the hierarchy fields for the entity to which this factory belongs.
            </summary>
            <returns>
            IEntityFields object with the fields of all the entities in the hierarchy of this entity or the fields of this entity if
            the entity isn't in a hierarchy.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.GetEntityFactory(System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            This method retrieves, using the InheritanceInfoprovider, the factory for the entity represented by the values passed in.
            </summary>
            <param name="fieldValues">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.CreateEntityCollection">
            <summary>
            Creates a new entity collection for the entity of this factory.
            </summary>
            <returns>
            ready to use new entity collection, typed.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.CreateHierarchyRelations">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched.
            </summary>
            <returns>
            null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.CreateHierarchyRelations(System.String)">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched. Uses the passed in objectAlias as alias for
            the elements in the relations.
            </summary>
            <param name="objectAlias">The object alias to use for the elements in the relations.</param>
            <returns>
            null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.CreateEntityFromEntityTypeValue(System.Int32)">
            <summary>
            Creates a new entity instance using the GeneralEntityFactory in the generated code, using the passed in entitytype value
            </summary>
            <param name="entityTypeValue">The entity type value of the entity to create an instance for.</param>
            <returns>new IEntity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFactoryCore#Create">
            <summary>
            Creates a new entity instance.
            </summary>
            <returns>new entity instance</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore.ForEntityName">
            <summary>
            returns the name of the entity this factory is for, e.g. "EmployeeEntity"
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2">
            <summary>
            Abstract base class for entity factories. The class is suffixed with 'Core' as the generated code contains another base class, EntityFactoryBase2, which
            is the direct base class for the generated entity factories. 
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2">
            <summary>
            Interface for EntityFactory2 objects used by several methods which have to create entity objects on the fly.
            Factories have to add a valid validator object to the entities.
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.Create">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> instance 
            </summary>
            <returns>the new IEntity2 instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.Create(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> instance but uses a special constructor which will set the Fields object of the new
            IEntity2 instance to the passed in fields object. Implement this method to support multi-type in single table inheritance.
            </summary>
            <param name="fields">Populated IEntityFields2 object for the new entity2 to create</param>
            <returns>Fully created and populated (due to the IEntityFields2 object) IEntity2 object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.CreateFields">
            <summary>
            Creates, using the generated EntityFieldsFactory, the IEntityFields2 object for the entity to create. This method is used
            by internal code to create the fields object to store fetched data. 
            </summary>
            <returns>Empty IEntityFields2 object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.CreateHierarchyFields">
            <summary>
            Creates the hierarchy fields for the entity to which this factory belongs.
            </summary>
            <returns>IEntityFields2 object with the fields of all the entities in the hierarchy of this entity or the fields of this entity if
            the entity isn't in a hierarchy.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.GetEntityFactory(System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            This method retrieves, using the InheritanceInfoprovider, the factory for the entity represented by the values passed in.
            </summary>
            <param name="fieldValues">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.GetEntityTypeFilter(System.Boolean)">
            <summary>Gets a predicateexpression which filters on the entity with type belonging to this factory. Uses string.Empty for object alias</summary>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
            <returns>ready to use predicateexpression, or an empty predicate expression if the belonging entity isn't a hierarchical type.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.GetEntityTypeFilter(System.Boolean,System.String)">
            <summary>
            Gets a predicateexpression which filters on the entity with type belonging to this factory. Uses the passed in objectAlias for aliasing
            the elements in the filters.
            </summary>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false).</param>
            <param name="objectAlias">The object alias to use for the predicate(s).</param>
            <returns>
            ready to use predicateexpression, or an empty predicate expression if the belonging entity isn't a hierarchical type.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.CreateEntityFromEntityTypeValue(System.Int32)">
            <summary>
            Creates a new entity instance using the GeneralEntityFactory in the generated code, using the passed in entitytype value
            </summary>
            <param name="entityTypeValue">The entity type value of the entity to create an instance for.</param>
            <returns>new IEntity2 instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.CreateEntityCollection">
            <summary>
            Creates a new generic EntityCollection(Of T) for the entity to which this factory belongs. 
            </summary>
            <returns>ready to use generic EntityCollection(Of T) with this factory set as the factory</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2"/> class.
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.Create">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> instance
            </summary>
            <returns>the new IEntity2 instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.Create(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> instance but uses a special constructor which will set the Fields object of the new
            IEntity2 instance to the passed in fields object. Implement this method to support multi-type in single table inheritance.
            </summary>
            <param name="fields">Populated IEntityFields2 object for the new entity2 to create</param>
            <returns>
            Fully created and populated (due to the IEntityFields2 object) IEntity2 object
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.CreateFields">
            <summary>
            Creates, using the generated EntityFieldsFactory, the IEntityFields2 object for the entity to create. This method is used
            by internal code to create the fields object to store fetched data.
            </summary>
            <returns>Empty IEntityFields2 object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.CreateHierarchyFields">
            <summary>
            Creates the hierarchy fields for the entity to which this factory belongs.
            </summary>
            <returns>
            IEntityFields2 object with the fields of all the entities in the hierarchy of this entity or the fields of this entity if
            the entity isn't in a hierarchy.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.GetEntityFactory(System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            This method retrieves, using the InheritanceInfoprovider, the factory for the entity represented by the values passed in.
            </summary>
            <param name="fieldValues">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.GetEntityTypeFilter(System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type belonging to this factory.
            </summary>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false).</param>
            <returns>
            ready to use predicateexpression, or an empty predicate expression if the belonging entity isn't a hierarchical type.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.GetEntityTypeFilter(System.Boolean,System.String)">
            <summary>
            Gets a predicateexpression which filters on the entity with type belonging to this factory. Uses the passed in objectAlias for aliasing
            the elements in the filters.
            </summary>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false).</param>
            <param name="objectAlias">The object alias to use for the predicate(s).</param>
            <returns>
            ready to use predicateexpression, or an empty predicate expression if the belonging entity isn't a hierarchical type.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.CreateHierarchyRelations">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched.
            </summary>
            <returns>
            null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.CreateHierarchyRelations(System.String)">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched. Uses the passed in objectAlias as alias for
            the elements in the relations.
            </summary>
            <param name="objectAlias">The object alias to use for the elements in the relations.</param>
            <returns>
            null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.CreateEntityFromEntityTypeValue(System.Int32)">
            <summary>
            Creates a new entity instance using the GeneralEntityFactory in the generated code, using the passed in entitytype value
            </summary>
            <param name="entityTypeValue">The entity type value of the entity to create an instance for.</param>
            <returns>new IEntity2 instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.CreateEntityCollection">
            <summary>
            Creates a new generic EntityCollection(Of T) for the entity to which this factory belongs. 
            </summary>
            <returns>ready to use generic EntityCollection(Of T) with this factory set as the factory</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFactoryCore#Create">
            <summary>
            Creates a new entity instance.
            </summary>
            <returns>new entity instance</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryCore2.ForEntityName">
            <summary>
            returns the name of the entity this factory is for, e.g. "EmployeeEntity"
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField">
            <summary>
            Generic class which is used for the columns in the EntityFields collection, which forms the data store of
            any Entity class generated by LLBLGen Pro. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore">
            <summary>
            Generic base class for entity fields.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore">
            <summary>
            Interface definition which defines the core IEntityField set. Is implemented by other interfaces like IEntityField and IEntityField2.
            Generic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ForcedCurrentValueWrite(System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ForcedCurrentValueWrite(System.Object,System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
            <param name="dbValue">the value read from the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode. 
            </summary>
            <returns>hashcode of the value of the field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.GetDiscriminatorColumnFlag">
            <summary>
            Gets the discriminator column flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.Clone">
            <summary>
            Clones this field instance
            </summary>
            <returns>A clone instance of this field instance</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.Alias">
            <summary>
            The alias to use for this field. Only used when this field object is part of a typed list. 
            Adapter: returns the alias set in the designer
            SelfServicing: returns Name
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue">
            <summary>
            Gets the current value for this field and sets the new value for this field, by overwriting current value. The value in 
            currentValue is discarded, versioning control has to save the original value of currentValue before this property is called. 
            </summary>
            <remarks>
            Calling this property directly will not trigger versioning control,
            thus calling this property directly is not recommended. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)"/> instead.
            Type of the new value has to be the same as IFieldInfo.DataType, which is set in the
            constructor. If this field is set to readonly, an exception is raised. 
            </remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">The field is set to readonly and can't be changed.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IFieldInfo.DataType as this field.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.DbValue">
            <summary>
            Gets the value read from the database for this field. Use this field in optimistic concurrency predicates.
            Set by ForcedCurrentValueWrite(object, value) by the object fetcher logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsChanged">
            <summary>
            If the value of this field is changed, this property is set to true. Set when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue"/> receives a valid value. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsNull">
            <summary>
            If the original value in the column for this entityfield is DBNull (NULL), this parameter should be set to true, otherwise to false.
            In BL Logic, it's impractical to work with NULL values, so these are converted to handable values. The developer can still determine if
            the original value was DBNull by checking this field. Using NULL values is not recommended. 
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnIsNullable"/> is false, IsNull is undefined.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ObjectAlias">
            <summary>
            Alias for the object containing the field this entity field is mapped on. Used in typed list selection lists.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.AggregateFunctionToApply">
            <summary>
            The aggregate function to apply on this field in a select query. Ignored in INSERT/UPDATE/DELETE queries. 
            Designed to be used in TypedList/TypedView classes.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ExpressionToApply">
            <summary>
            The expression to apply to this field in a select list, update statement or predicate or expression.
            Expression is applied before AggregateFunctionToApply. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.LinkedSuperTypeField">
            <summary>
            Gets / sets linkedSuperTypeField. Fields of PK/UC's are linked with eachother in a target-per-entity hierarchy. This is managed in
            the EntityFields(2) object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ActAsDerivedTableField">
            <summary>
            Gets or sets a value indicating whether this field should be threated as a derived table field. This is necessary when this field is in a query
            and targets a derived table while this field is actually a full entity field (so it has field info). If this flag is true, the field will result in
            objectAlias.Alias instead of persistenceinfo.Fieldname as alias (alias only if required)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInterpret">
            <summary>
            Interface which is used internally for getting a field's value when passing in an entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInterpret.GetValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Gets the value for the field implementing this interface for the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <returns>the value of the field in the entity passed in. If the field isn't present in the entity passed in, null is returned</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal">
            <summary>
            Internal interface for fields. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>the state in a fieldstatebucket</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal.SetState(SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket)">
            <summary>
            Sets the state of the field from the values in the bucket passed in
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal.SetActAsDerivedTableField(System.String)">
            <summary>
            Sets the field to act as a derived table field. It targets the name specified. 
            </summary>
            <param name="fieldNameToTarget">The field name to target.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal.SetDerivedTableTargetingFieldInfo(System.Int32,System.Byte,System.Byte)">
            <summary>
            Sets the derived table targeting field info. This is required for paging on some databases. 
            </summary>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal.DerivedTableTargetingFieldName">
            <summary>
            Gets the derived table targeting field name. Set with SetActAsDerivedTableField. If ActAsDerivedTableField is false, this property will return null or an
            empty string
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCoreInternal.IsDerivedTableTargetingField">
            <summary>
            Gets a value indicating whether this instance is a derived table targeting field.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CaseSensitiveStringHashCodes">
            <summary>
            Flag which will signal LLBLGen Pro to produce hashcodes for strings in entity fields using case sensitive hash code routines (true, default) or
            not (false). Setting this flag to false will mean that the hashcode produced from "Foo" will be the same as for "FoO" or "foo". Setting this flag
            has an effect on the field compare routine and prefetch path merge routine. Only set this flag to false if you're working with a case-insensitive
            database and pk-fk data differs on casing.
            </summary>
            <remarks>You can also set this field by adding a key-value pair to the appSettings section of your application's config file. Use 
            'caseSensitiveStringHashCodes' as key and 'true' or 'false' as the value.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.#cctor">
            <summary>
            Initializes the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo)">
            <summary>
            CTor
            </summary>
            <param name="fieldInfo">The field info.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type,System.String,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
            <param name="dataType">.NET Type of the data.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CompareTo(System.Object)">
            <summary>
            Compares the given entityfield instance with this instance using a value compare with <b>case sensitive</b> comparer logic.
            this is done by comparing the name, the source schema, object and column name. If there is any mismatch, the
            comparisson is stopped and the result of the mismatching compare is returned.
            </summary>
            <param name="fieldToCompare">The EntityField to compare with the current value.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands. See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode. 
            </summary>
            <remarks>byte[] typed fields will have all the bytes in their array added together with per byte it's multiplied with the index+1</remarks>
            <returns>hashcode of the value of the field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.AcceptChange">
            <summary>
            Accepts the value of the current value as the final current value. Original value is discarded
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.RejectChange">
            <summary>
            Rejects the value of the current value and resets current value with the original value, and <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsChanged"/> will report false.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCore#Clone">
            <summary>
            Clones this field instance
            </summary>
            <returns>A clone instance of this field instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.Clone">
            <summary>
            Creates a deep copy of this IEntityField2 object
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedCurrentValueWrite(System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties. 
            </summary>
            <param name="value">Value to store as the current value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedCurrentValueWrite(System.Object,System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            </summary>
            <param name="value">Value to store as the current value</param>
            <param name="dbValue">the value read from the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedCurrentValueWriteInternal(System.Object,System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
            <param name="dbValue">the value read from the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetDbValue(System.Object)">
            <summary>
            Sets the DbValue property with the value passed in. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedChangedWrite(System.Boolean)">
            <summary>
            Forces a set of the IsChanged flag for this field. 
            </summary>
            <param name="isChangedValue">new value for IsChanged.</param>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedIsNullWrite(System.Boolean)">
            <summary>
            Forcess a set of the IsNull flag
            </summary>
            <param name="isNull"><see langword="true"/> if [is null]; otherwise, <see langword="false"/>.</param>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            The field is kept marked changed, in effect, this method is empty.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            The currentvalue is reset by the original value.
            The field's IsChanged state is rolled back as well. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Original value is overwritten by currentValue, currentValue keeps its value.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetDiscriminatorColumnFlag">
            <summary>
            Gets the discriminator column flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedCurrentValueWriteFromSubType(System.Object)">
            <summary>
            Forceds the current value write, with a call from a sub type. It will only propagate this call up to supertype linked field, (if any)
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ForcedCurrentValueWriteFromSuperType(System.Object)">
            <summary>
            Forceds the current value write, with a call from the supertype. It will only propagate this call down to subtype linked field, (if any)
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetDiscriminatorColumnFlag(System.Boolean)">
            <summary>
            Sets the discriminator column flag.
            </summary>
            <param name="value"><see langword="true"/> if [value]; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetFieldIndex(System.Int32)">
            <summary>
            Sets the FieldIndex, if _fieldInfo is null. Used in DefineField.
            </summary>
            <param name="newIndex">The new index.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.EntityFieldCoreInterpretGetValueInternal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Internal implementation of the method which interprets this field in the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <returns>value of this field in the entity passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CloneInternals">
            <summary>
            Clones the internally referenced objects of this instance, so this instance after this method contains clones of its referenced internal objects.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.PropagateChangeToLinkedFields">
            <summary>
            Propagates the change to linked fields.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.PropagateForcedCurrentValueWriteToSuperType(System.Object)">
            <summary>
            Propagates the value to the linked fields from supertype
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.PropagateForcedCurrentValueWriteToSubTypes(System.Object)">
            <summary>
            Propagates the value to the linked fields from subtypes
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetFakeFieldIndex(System.Int32)">
            <summary>
            Sets the index of the fake field.
            </summary>
            <param name="fakeFieldIndex">Index of the fake field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetExpressionToApply(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the expression.
            </summary>
            <param name="expressionToApply">The expression to apply.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CleanUpDynamicUsageInfoIfRequired">
            <summary>
            Cleans the up dynamic usage info if required.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the aggregate function.
            </summary>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetAggregateFunctionToApply">
            <summary>
            Gets the aggregate function.
            </summary>
            <returns>the aggregate function set on this field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetExpressionToApply">
            <summary>
            Gets the expression to use.
            </summary>
            <returns>the expression set on this field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetFakeFieldIndex">
            <summary>
            Gets the FakeFieldIndex 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetLinkedSubTypeFields">
            <summary>
            Gets the linked sub type fields.
            </summary>
            <returns>list of linked subtype fields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetLinkedSubtypeFields(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Sets the linked subtype fields.
            </summary>
            <param name="toSet">To set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetIsDiscriminatorColumn">
            <summary>
            Gets the is discriminator column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetIsDiscriminatorColumn(System.Boolean)">
            <summary>
            Sets the is discriminator column.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.GetLinkedSuperTypeField">
            <summary>
            Gets the linked super type field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SetLinkedSuperTypeField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Sets the linked super type field.
            </summary>
            <param name="fieldToSet">The field to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInterpret#GetValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Gets the value for the field implementing this interface for the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            the value of the field in the entity passed in. If the field isn't present in the entity passed in, null is returned
            If the field's value is Undefined, DBNull.Value is returned.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInternal#SetActAsDerivedTableField(System.String)">
            <summary>
            Sets the field to act as a derived table field. It targets the name specified. 
            </summary>
            <param name="fieldNameToTarget">The field name to target.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInternal#SetDerivedTableTargetingFieldInfo(System.Int32,System.Byte,System.Byte)">
            <summary>
            Sets the derived table targeting field info. This is required for paging on some databases. 
            </summary>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInternal#GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>the state in a fieldstatebucket</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInternal#SetState(SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket)">
            <summary>
            Sets the state of the field from the values in the bucket passed in
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInternal#DerivedTableTargetingFieldName">
            <summary>
            Gets the derived table targeting field name. Set with SetActAsDerivedTableField. If ActAsDerivedTableField is false, this property will return null or an
            empty string
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInternal#IsDerivedTableTargetingField">
            <summary>
            Gets a value indicating whether this instance is a derived table targeting field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.LinkedSuperTypeField">
            <summary>
            Gets / sets linkedSuperTypeField. Fields of PK/UC's are linked with eachother in a target-per-entity hierarchy. This is managed in
            the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.LinkedSubTypeFields">
            <summary>
            Gets linkedSubTypeFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.MaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            Value initially set for this field is the length of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.Scale">
            <summary>
            The scale of the value for this field. 
            Value initially set for this field is the scale of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.Precision">
            <summary>
            The precision of the value for this field.
            Value initially set for this field is the precision of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.Name">
            <summary>
            The name of the field. Used in XML output. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.Alias">
            <summary>
            The alias to use for this field. By default the same as the entity name.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CurrentValue">
            <summary>
            Gets the current value for this field and sets the new value for this field, by overwriting current value. The value in 
            currentValue is discarded, versioning control has to save the original value of currentValue before this property is called. 
            </summary>
            <remarks>
            Calling this property directly will not trigger versioning control,
            thus calling this property directly is not recommended. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)"/> instead.
            Type of the new value has to be the same as <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DataType"/>, which is set in the
            constructor. If this field is set to readonly, an exception is raised. 
            </remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">The field is set to readonly and not part of the PK.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DataType"/> as this field.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DataType">
            <summary>
            The <see cref="T:System.Type"/> of the values of this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsPrimaryKey">
            <summary>
            If set to true, in the constructor, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsReadOnly">
            <summary>
            If set to true, in the constructor, no changes can be made to this field. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsChanged">
            <summary>
            If the value of this field is changed, this property is set to true. Set when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CurrentValue"/> receives a valid value. Set to 
            false when <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.AcceptChange"/> is called succesfully.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsNull">
            <summary>
            If the original value in the column for this entityfield is DBNull (NULL), this parameter should be set to true, otherwise to false.
            In BL Logic, it's impractical to work with NULL values, so these are converted to workable values. The developer can still determine if
            the original value was DBNull by checking this field. Using NULL values is not recommended. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.FieldIndex">
            <summary>
            Gets the field index related to this IEntityField2, so the field can be used to retrieve the field index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ContainingObjectName">
            <summary>
            Name of the containing object this field belongs to (entity or typed view). This name is required to retrieve persistence information in Adapter
            Set via constructor. This name is also used by EntityRelation to determine alias - table connection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DbValue">
            <summary>
            Gets the value read from the database for this field. Use this field in optimistic concurrency predicates.
            Set by ForcedCurrentValueWrite(object, value) by the object fetcher logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ObjectAlias">
            <summary>
            Alias for the object containing the field this entity field is mapped on. Used in typed list selection lists.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.AggregateFunctionToApply">
            <summary>
            The aggregate function to apply on this field in a select query. Ignored in INSERT/UPDATE/DELETE queries. 
            Designed to be used in TypedList/TypedView classes.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ExpressionToApply">
            <summary>
            The expression to apply to this field in a select list, update statement or predicate. 
            Expression is applied before AggregateFunctionToApply.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsForeignKey">
            <summary>
            If set to true, in the constructor, this field is part of a foreign key. This field is not used in LLBLGen Pro's code, however
            can be useful in user code.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsNullable">
            <summary>
            Will be true if this field can be set to NULL in the database, false otherwise. The Field Validation logic in an entity will use this
            flag to check if the field indeed can be set to NULL or not. Set by constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ActualContainingObjectName">
            <summary>
            The name of the object this field is currently in. Differs only from ContainingObjectName if the field instance is in a subtype while it is
            originally defined in a supertype.
            </summary>
            <example>EmployeeEntity.Name and a subtype, ClerkEntity, inherits this field. For ClerkEntity.Name ContainingObjectName is still 'EmployeeEntity'
            however ActualContainingObjectName is 'ClerkEntity'.</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.IsInMultiTargetEntity">
            <summary>
            Flag to signal if the field is in a multi-target entity. Used for alias production during query building in scenario's with inheritance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.ActAsDerivedTableField">
            <summary>
            Gets or sets a value indicating whether this field should be threated as a derived table field. This is necessary when this field is in a query
            and targets a derived table while this field is actually a full entity field (so it has field info). If this flag is true, the field will result in
            objectAlias.Alias instead of persistenceinfo.Fieldname as alias (alias only if required)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.CurrentValueInternal">
            <summary>
            Gets or sets the current value member directly
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DbValueInternal">
            <summary>
            Gets or sets the db value member directly.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.InheritanceFieldInfo">
            <summary>
            Bucket class for information related to inheritance
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.InheritanceFieldInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.InheritanceFieldInfo.LinkedSuperTypeField">
            <summary>
            Gets / sets linkedSuperTypeField
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.InheritanceFieldInfo.LinkedSubTypeFields">
            <summary>
            Gets / sets linkedSubTypeFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.InheritanceFieldInfo.IsDiscriminatorColumn">
            <summary>
            Gets / sets isDiscriminatorColumn
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo">
            <summary>
            Bucket class for elements of a field which are related to dynamic field usage, e.g. field usage in queries, not in entities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo.FakeFieldIndex">
            <summary>
            Gets / sets fakeFieldIndex
            fieldIndex for a field when the field isn't containing a FieldInfo object but is used for an entity fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo.AggregateFunctionToApply">
            <summary>
            Gets / sets aggregateFunctionToApply
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo.ExpressionToApply">
            <summary>
            Gets / sets expressionToApply
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldCore.DynamicFieldInfo.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty. Empty means: no real value set.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField">
            <summary>
            Interface for the EntityField type. An EntityField is the unit which is used to hold the value for a given property of an entity.
            SelfServicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetFieldAlias(System.String)">
            <summary>
            Sets the field alias.
            </summary>
            <param name="fieldAlias">The field alias.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this EntityField2 to an XmlNode. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will return. This document is required
            to create the new node object</param>
            <param name="entityFieldNode">The output parameter which will represent this EntityField2 as XmlNode</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="fieldInfo">The field info.</param>
            <param name="fieldPersistenceInfo">The field persistence info.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="objectAlias">The object alias.</param>
            <param name="dataType">.NET Type of the data.</param>
            <remarks>Use this CTor for fields mapped onto a derived table with the alias objectAlias</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,System.String,System.Type,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="objectAlias">The object alias.</param>
            <param name="dataType">.NET Type of the data.</param>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
            <remarks>Use this CTor for fields mapped onto a derived table with the alias objectAlias</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="dataType">.NET Type of the data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
            <param name="dataType">.NET Type of the data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type,System.String,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
            <param name="dataType">Type of the data.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.CompareTo(System.Object)">
            <summary>
            Compares the given entityfield instance with this instance using a value compare with <b>case sensitive</b> comparer logic.
            this is done by comparing the name, the source schema, object and column name. If there is any mismatch, the
            comparisson is stopped and the result of the mismatching compare is returned.
            </summary>
            <param name="fieldToCompare">The EntityField to compare with the current value.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands. See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this EntityField to an XmlNode. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will return. This document is required
            to create the new node object</param>
            <param name="entityFieldNode">The output parameter which will represent this EntityField as XmlNode</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode.
            </summary>
            <returns>hashcode of the value of the field.</returns>
            <remarks>byte[] typed fields will have all the bytes in their array added together with per byte it's multiplied with the index+1</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.Clone">
            <summary>
            Creates a deep copy of this IEntityField object
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetFieldAlias(System.String)">
            <summary>
            Sets the field alias.
            </summary>
            <param name="fieldAlias">The field alias.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Collections.IList)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Collections.IList)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Modulus(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.String)">
            <summary>
            Operator overload for the '%' operator to produce a FieldLikePredicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="pattern">Pattern.</param>
            <returns>
            A FieldLikePredicate 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field * value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents expression * field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field - value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field / value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Operator overload for the '|' operator to concatenate sortoperators to a field
            </summary>
            <param name="field">Field.</param>
            <param name="operatorToUse">Operator to use.</param>
            <returns>new SortClause object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ActualDotNetType">
            <summary>
            The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceCatalogName">
            <summary>
            The name of the catalog the SourceSchemaName is located in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceSchemaName">
            <summary>
            The name of the schema which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceObjectName"/>. Schema is used to generate SQL on the fly. 
            A common schema name in SqlServer is f.e. 'dbo'.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceObjectName">
            <summary>
            The name of the source object which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnName"/>. Can be a view or a table. Used to generate SQL on the fly.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnName">
            <summary>
            The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnMaxLength">
            <summary>
            The maximum length of the value of this entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            ColumnMaxLength
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnDbType">
            <summary>
            The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnIsNullable">
            <summary>
            Flag if the Column mapped onto the entityfield is nullable or not. 
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnScale">
            <summary>
            The scale of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnPrecision">
            <summary>
            The precision of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsIdentity">
            <summary>
            If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IdentityValueSequenceName">
            <summary>
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsIdentity"/> is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsIdentity"/> is set to false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.TypeConverterToUse">
            <summary>
            Gets the type converter to use. Only set through constructor and when a conversion is required from the .NET type returned by the 
            ADO.NET provider and the defined .NET type for this field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2">
            <summary>
            Generic class which is used for the columns in the EntityFields collection, which forms the data store of
            any Entity class generated by LLBLGen Pro. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2">
            <summary>
            Interface for the EntityField2 type. An EntityField2 is the unit which is used to hold the value for a given property of an entity.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetFieldAlias(System.String)">
            <summary>
            Sets the field alias.
            </summary>
            <param name="fieldAlias">The field alias.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo)">
            <summary>
            CTor
            </summary>
            <param name="fieldInfo">The field info.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="objectAlias">The object alias.</param>
            <param name="dataType">.NET Type of the data.</param>
            <remarks>Use this CTor for fields mapped onto a derived table with the alias objectAlias</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,System.String,System.Type,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="objectAlias">The object alias.</param>
            <param name="dataType">.NET Type of the data.</param>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
            <remarks>Use this CTor for fields mapped onto a derived table with the alias objectAlias</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="dataType">.NET Type of the data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField"/> class.
            </summary>
            <param name="name">The name of the field. Has to be specified</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
            <param name="dataType">.NET Type of the data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,System.Type,System.String,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="expressionToApply">The expression to apply.</param>
            <param name="aggregateFunctionToApply">The aggregate function to apply.</param>
            <param name="dataType">Type of the data.</param>
            <param name="objectAlias">The object alias.</param>
            <param name="maxLength">The maximum length of the field or 0 if not relevant</param>
            <param name="precision">The precision to use or 0 if not relevant.</param>
            <param name="scale">The scale to use or 0 if not relevant.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Writes the XML of this Field object to the writer specified
            </summary>
            <param name="writer">The writer.</param>
            <param name="aspects">The aspects.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode.
            </summary>
            <returns>hashcode of the value of the field.</returns>
            <remarks>byte[] typed fields will have all the bytes in their array added together with per byte it's multiplied with the index+1</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Clone">
            <summary>
            Creates a deep copy of this IEntityField2 object
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetFieldAlias(System.String)">
            <summary>
            Sets the field alias.
            </summary>
            <param name="fieldAlias">The field alias.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Collections.IList)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Collections.IList)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Modulus(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.String)">
            <summary>
            Operator overload for the '%' operator to produce a FieldLikePredicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="pattern">Pattern.</param>
            <returns>
            A FieldLikePredicate 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field * value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents expression * field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field - value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field / value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / property
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Operator overload for the '|' operator to concatenate sortoperators to a field
            </summary>
            <param name="field">Field.</param>
            <param name="operatorToUse">Operator to use.</param>
            <returns>new SortClause object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.TypeConverterToUse">
            <summary>
            Gets or sets the type converter to use. This is only set if this field is a derived table targeting field and the target (indirectly) has a type converter set.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList">
            <summary>
            Special List which gets at construction time an entityfields array and an fieldpersistenceinfo array and splits it
            per target into a separate entry: a TargetFieldPersistenceInfoBucket, which contains 2 arrays with
            the information for that target. 
            It normally contains the same information as it gets at construction time, though in scenarios where inheritance is used and a target-per-
            entity hierarchy, this class is useful in update/insert/delete query building.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList"/> instance. and splits the passed in fields/fieldpersistence info per target.
            The order in which the targets appear in fieldsPersistenceInfo is the order in which the TargetEntityFieldPersistenceInfoBucket objects
            are stored in this list.
            </summary>
            <param name="fields">Fields object to process. Can be null (in actions on db directly)</param>
            <param name="fieldsPersistenceInfo">persistence info objects to process</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields">
            <summary>
            Class which forms the EntityFields2 type. An EntityFields type is a collection of IEntityField objects which forms the total amount of fields 
            for a given entity.
            SelfServicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields">
            <summary>
            Interface for the EntityFields type. An EntityFields type is a collection of IEntityField objects which forms the total amount of fields for a given entity.
            SelfServicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Expand(System.Int32)">
            <summary>
            Expands this entity fields object by appending numberOfCells new cells to this object. 
            </summary>
            <param name="numberOfNewCells">number of cells to append to this fieldsobject</param>
            <remarks>Use with care. Empty cells can cause the DQE's to produce undefined results. Use this routine to append fields to a
            Typed list in code for example. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Contract">
            <summary>
            Contracts the list of fields so all empty slots at the end of the list of fields are removed. Doesn't perform a contract operation if the
            fields object is empty
            </summary>
            <returns>the new size of the fields object, or if the fields object is completely empty, the full size</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Compact">
            <summary>
            Compacts the list of fields so all empty slots are removed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.GetAsPersistenceInfoArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IFieldPersistenceInfo objects. IEntityField objects implement
            IFieldPersistenceInfo.
            </summary>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.GetAsEntityFieldCoreArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Converts this EntityFields object to a set of XmlNodes with all the fields as individual nodes.
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the nodes this method will create. This document is required
            to create the new nodes for the fields</param>
            <param name="parentNode">the node the fields will have to be added to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.LinkFields">
            <summary>
            Links the supertype PK fields with the subtype PK fields IF there are PK fields of multiple entities in the set of PK fields.
            Linking is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>Adds the specified field on the position indexInFields in the resultset.</summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Clone">
            <summary>
            Clones this instance and its contents using a deep copy.
            </summary>
            <returns>an exact, deep copy of this EntityFields object and its contents.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.CloneAsDirty">
            <summary>
            Clones this object to a new EntityFields object where all fields are changed and the object itself is marked dirty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.ShallowClone">
            <summary>
            Creates a shallow copy of this instance, which means that a new EntityFields object is created but all membervariables are kept the same. 
            </summary>
            <returns>Shallow copy of this instance</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.IsDirty">
            <summary>
            Gets the flag if the contents of the EntityFields object is 'dirty', which means that one or more fields are changed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Item(System.String)">
            <summary>
            Gets the EntityField with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.State">
            <summary>
            The state of the EntityFields object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
            <remarks>Called from entity factory which call originates from InheritanceInfoProvider</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
            <remarks>Called from entity factory which call originates from InheritanceInfoProvider</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField[],SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityField},System.Collections.Specialized.ListDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields"/> class.
            </summary>
            <param name="fields">The fields to use for this instance.</param>
            <param name="inheritanceInfoProviderToUse">The inheritance info provider to use.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
            <param name="pkFields">The pk fields. Fields in this set have to be present in fields as well.</param>
            <param name="entityNamesOfFields">The entity names of fields.</param>
            <remarks>Used internally to quickly create fields objects</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.ConvertToProjectors(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Converts the fields in the instance passed in to a new list of IEntityPropertyProjector instances which is ready to be used in a projection
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>
            new list of IEntityPropertyProjector instances which is ready to be used in a projection
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Expand(System.Int32)">
            <summary>
            Expands this entity fields object by appending numberOfCells new cells to this object. 
            </summary>
            <param name="numberOfNewCells">number of cells to append to this fieldsobject</param>
            <remarks>Use with care. Empty cells can cause the DQE's to produce undefined results. Use this routine to append fields to a
            Typed list in code for example. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Contract">
            <summary>
            Contracts the list of fields so all empty slots at the end of the list of fields are removed. Doesn't perform a contract operation if the
            fields object is empty
            </summary>
            <returns>the new size of the fields object, or if the fields object is completely empty, the full size</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Compact">
            <summary>
            Compacts the list of fields so all empty slots are removed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetEnumerator">
            <summary>
            Gets the enumerator for this object.
            </summary>
            <returns>an IEnumerator to use in for each loops over this fields collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.System#Collections#Generic#IEnumerable{SD#LLBLGen#Pro#ORMSupportClasses#IEntityField}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">EntityFields object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.LinkFields">
            <summary>
            Links the supertype PK fields with the subtype PK fields IF there are PK fields of multiple entities in the set of PK fields.
            Linking is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Converts this EntityFields object to a set of XmlNodes with all the fields as individual nodes.
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the nodes this method will create. This document is required
            to create the new nodes for the fields</param>
            <param name="parentNode">the node the fields will have to be added to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetAsPersistenceInfoArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IFieldPersistenceInfo objects. IEntityField objects implement
            IFieldPersistenceInfo.
            </summary>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetAsEntityFieldCoreArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.AcceptChanges">
            <summary>
            All changes to all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> objects in this collection are accepted. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            A succesful edit has been performed. All new values have to be moved to the current value slots.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Doesn't reset isDirty. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Clone">
            <summary>
            Clones this instance and its contents using a deep copy.
            </summary>
            <returns>an exact, deep copy of this EntityFields object and its contents.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.ShallowClone">
            <summary>
            Creates a shallow copy of this instance, which means that a new EntityFields object is created but all membervariables are kept the same. 
            </summary>
            <returns>Shallow copy of this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.CloneAsDirty">
            <summary>
            Clones this object to a new EntityFields object where all fields are changed and the object itself is marked dirty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>Adds the specified field on the position indexInFields in the resultset.</summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.SetEntityFieldIndexes(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Sets the entity field indexes after a clone operation.
            </summary>
            <param name="entityFieldIndexes">The entity field indexes.</param>
            <param name="entityFieldIndexesIsLocalCopy">if set to <c>true</c> [entity field indexes is local copy].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.SetEntityNamesOfFields(System.Collections.Specialized.ListDictionary,System.Boolean)">
            <summary>
            Sets the entity names of fields.
            </summary>
            <param name="entityNamesOfFields">The entity names of fields.</param>
            <param name="entityNamesOfFieldsIsLocalCopy">if set to <c>true</c> [entity names of fields is local copy].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.SetupCloning">
            <summary>
            Prepares this object to be filled with objects. It is called after the MemberwiseClone call and resets all references
            to objects and creates new objects or sets them to null. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetEntityNamesOfFields">
            <summary>
            Gets the entity names of fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetFieldsDataArray">
            <summary>
            Gets this object's fields field data in a 2 column array: first column currentvalue second column dbvalue
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetFieldsTrackingFlagsArray">
            <summary>
            Gets this object's fields change tracking flags and other flags: it's a bitarray, single dimension with 2 bits per row: 
            first bit IsChanged, second bit: IsNull
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetEntityFieldStates">
            <summary>
            Gets the field states for transaction state save
            </summary>
            <returns>array with field states</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.SetEntityFieldStates(SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket[])">
            <summary>
            Sets the field states. Used in transaction state save
            </summary>
            <param name="fieldStates">The field states.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.CreateEntityFieldIndexesLocalCopy">
            <summary>
            Creates the entity field indexes local copy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Clear">
            <summary>
            Not supported
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Insert(System.Int32,System.Object)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Remove(System.Object)">
            <summary>
            Not supported. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns>false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the EntityField on the specified Index.
            </summary>
            <value></value>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.SyncRoot">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.InheritanceInfoProviderToUse">
            <summary>
            Gets the inheritance info provider to use.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Count">
            <summary>
            The amount of IEntityFields allocated in the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsDirty">
            <summary>
            Gets the flag if the contents of the EntityFields object is 'dirty', which means that one or more fields are changed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.PrimaryKeyFields">
            <summary>
            List of EntityField references which form the primary key
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Item(System.String)">
            <summary>
            Gets the EntityField with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces or is not found.</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.State">
            <summary>
            The state of the EntityFields object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.EntityFieldIndexes">
            <summary>
            Sets the entity field indexes object. This is normally done by the factory which creates this EntityFields object. The entity field indexes object
            is shared among all instances of an entity type so indexing in this object using a name is fast and constructing an entity object is fast as well, 
            plus it avoids huge memory consumption.
            </summary>
            <value>The entity field indexes.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2">
            <summary>
            Class which forms the EntityFields2 type. An EntityFields2 type is a collection of IEntityField2 objects which forms the total amount of 
            fields for a given entity.
            Adapter specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2">
            <summary>
            Interface for the EntityFields2 type. An EntityFields2 type is a collection of IEntityField2 objects which forms the total amount of 
            fields for a given entity.
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Expand(System.Int32)">
            <summary>
            Expands this entity fields object by appending numberOfCells new cells to this object. 
            </summary>
            <param name="numberOfNewCells">number of cells to append to this fieldsobject</param>
            <remarks>Use with care. Empty cells can cause the DQE's to produce undefined results. Use this routine to append fields to a
            Typed list in code for example. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Contract">
            <summary>
            Contracts the list of fields so all empty slots at the end of the list of fields are removed. Doesn't perform a contract operation if the
            fields object is empty
            </summary>
            <returns>the new size of the fields object, or if the fields object is completely empty, the full size</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Compact">
            <summary>
            Compacts the list of fields so all empty slots are removed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Clone">
            <summary>
            Clones this instance and its contents using a deep copy.
            </summary>
            <returns>an exact, deep copy of this EntityFields object and its contents.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.ShallowClone">
            <summary>
            Creates a shallow copy of this instance, which means that a new EntityFields2 object is created but all membervariables are kept the same. 
            </summary>
            <returns>Shallow copy of this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.CloneAsDirty">
            <summary>
            Clones this object to a new EntityFields object where all fields are changed and the object itself is marked dirty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.GetAsEntityFieldCoreArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.LinkFields">
            <summary>
            Links the supertype PK fields with the subtype PK fields IF there are PK fields of multiple entities in the set of PK fields.
            Linking is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>Adds the specified field on the position indexInFields in the resultset.</summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.IsDirty">
            <summary>
            Gets / sets the flag if the contents of the EntityFields2 object is 'dirty', which means that one or more fields are changed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField2 on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Item(System.String)">
            <summary>
            Gets the EntityField with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the 'primary key', or uniquely identifying set of values for this set of fields, thus for the entity
            holding these fields.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.State">
            <summary>
            The state of the EntityFields object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields2 object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2[],SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2},System.Collections.Specialized.ListDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2"/> class.
            </summary>
            <param name="fields">The fields to use for this instance.</param>
            <param name="inheritanceInfoProviderToUse">The inheritance info provider to use.</param>
            <param name="entityFieldIndexes">The entity field indexes.</param>
            <param name="pkFields">The pk fields. Fields in this set have to be present in fields as well.</param>
            <param name="entityNamesOfFields">The entity names of fields.</param>
            <remarks>Used internally to quickly create fields objects</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.ConvertToProjectors(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Converts the fields in the instance passed in to a new list of IEntityPropertyProjector instances which is ready to be used in a projection
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>
            new list of IEntityPropertyProjector instances which is ready to be used in a projection
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Expand(System.Int32)">
            <summary>
            Expands this entity fields object by appending numberOfCells new cells to this object. 
            </summary>
            <param name="numberOfNewCells">number of cells to append to this fieldsobject</param>
            <remarks>Use with care. Empty cells can cause the DQE's to produce undefined results. Use this routine to append fields to a
            Typed list in code for example. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Contract">
            <summary>
            Contracts the list of fields so all empty slots at the end of the list of fields are removed. Doesn't perform a contract operation if the
            fields object is empty
            </summary>
            <returns>the new size of the fields object, or if the fields object is completely empty, the full size</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Compact">
            <summary>
            Compacts the list of fields so all empty slots are removed. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetEnumerator">
            <summary>
            Gets the enumerator for this object.
            </summary>
            <returns>an IEnumerator to use in for each loops over this fields collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.System#Collections#Generic#IEnumerable{SD#LLBLGen#Pro#ORMSupportClasses#IEntityField2}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.LinkFields">
            <summary>
            Links the supertype PK fields with the subtype PK fields IF there are PK fields of multiple entities in the set of PK fields.
            Linking is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.WriteXml(System.Xml.XmlWriter,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect)">
            <summary>
            Writes the XML of this Fields object to the writer specified
            </summary>
            <param name="writer">The writer.</param>
            <param name="aspects">The aspects.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">EntityFields2 object which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetAsEntityFieldCoreArray">
            <summary>
            copy the complete list of IEntityField objects to an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.AcceptChanges">
            <summary>
            All changes to all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> objects in this collection are accepted. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Clone">
            <summary>
            Clones this instance and its contents using a deep copy.
            </summary>
            <returns>an exact, deep copy of this EntityFields2 object and its contents.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.ShallowClone">
            <summary>
            Creates a shallow copy of this instance, which means that a new EntityFields2 object is created but all membervariables are kept the same. 
            </summary>
            <returns>Shallow copy of this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CloneAsDirty">
            <summary>
            Clones this object to a new EntityFields2 object where all fields are changed and the object itself is marked dirty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String,System.String)">
            <summary>
            Adds the specified field on the position indexInFields in the resultset.
            </summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.DefineField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>Adds the specified field on the position indexInFields in the resultset.</summary>
            <param name="fieldToAdd">The field to add.</param>
            <param name="indexInFields">The position in the resultset where the field will be created on</param>
            <param name="alias">The alias to use for this field in the resultset</param>
            <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
            <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.SetEntityFieldIndexes(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            Sets the entity field indexes after a clone operation.
            </summary>
            <param name="entityFieldIndexes">The entity field indexes.</param>
            <param name="entityFieldIndexesIsLocalCopy">if set to <c>true</c> [entity field indexes is local copy].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.SetEntityNamesOfFields(System.Collections.Specialized.ListDictionary,System.Boolean)">
            <summary>
            Sets the entity names of fields.
            </summary>
            <param name="entityNamesOfFields">The entity names of fields.</param>
            <param name="entityNamesOfFieldsIsLocalCopy">if set to <c>true</c> [entity names of fields is local copy].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.SetupCloning">
            <summary>
            Prepares this object to be filled with objects. It is called after the MemberwiseClone call and resets all references
            to objects and creates new objects or sets them to null. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetEntityNamesOfFields">
            <summary>
            Gets the entity names of fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetFieldsDataArray">
            <summary>
            Gets this object's fields field data in a 2 column array: first column currentvalue second column dbvalue
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetFieldsTrackingFlagsArray">
            <summary>
            Gets this object's fields change tracking flags and other flags: it's a bitarray, single dimension with 2 bits per row: 
            first bit IsChanged, second bit: IsNull
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetEntityFieldStates">
            <summary>
            Gets the field states for transaction state save
            </summary>
            <returns>array with field states</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.SetEntityFieldStates(SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket[])">
            <summary>
            Sets the field states. Used in transaction state save
            </summary>
            <param name="fieldStates">The field states.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            A succesful edit has been performed. All new values have to be moved to the current value slots.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Doesn't reset isDirty. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CreateEntityFieldIndexesLocalCopy">
            <summary>
            Creates the entity field indexes local copy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CreateEntityNamesOfFieldsLocalCopy">
            <summary>
            Creates the entity names of fields local copy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Clear">
            <summary>
            Not supported
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Insert(System.Int32,System.Object)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Remove(System.Object)">
            <summary>
            Not supported. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns>false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the EntityField on the specified Index.
            </summary>
            <value></value>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.SyncRoot">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.InheritanceInfoProviderToUse">
            <summary>
            Gets the inheritance info provider to use.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Count">
            <summary>
            The amount of IEntityFields2 allocated in the EntityFields2 object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsDirty">
            <summary>
            Gets/sets the flag if the contents of the EntityFields2 object is 'dirty', which means that one or more fields are changed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the primary key
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField2 on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Item(System.String)">
            <summary>
            Gets the EntityField2 with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.State">
            <summary>
            The state of the EntityFields2 object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields2 object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder">
            <summary>
            Class which crawls over a predicate, expression etc. and finds all containingentitynames and actualentitynames of the fields found.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder"/> class.
            </summary>
            <param name="traverseSetPredicateInnerSetElements">the flag to traverse the inner elements of a FieldCompareSetPredicate. (default is true). Set to false if you use the findings of this
            crawler to adjust an outer query, as the inner elements of a fieldcompareset are a different scope.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Finds all containingObjectNames and ActualContainingObjectNames of all fields in the object passed in and enclosed fields in enclosed objects.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Finds all containingObjectNames and ActualContainingObjectNames of all fields in the object passed in and enclosed fields in enclosed objects.
            </summary>
            <param name="field">The field.</param>
            <param name="objectAlias">The object alias.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.TraversePredicateField(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Traverses the predicate field.
            </summary>
            <param name="field">The field as found in the predicate.</param>
            <param name="objectAlias">The object alias set in the predicate for the field .</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Finds all containingObjectNames and ActualContainingObjectNames of all fields in the object passed in and enclosed fields in enclosed objects.
            </summary>
            <param name="objectToTraverse">The object to traverse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.AliasesPerContainingObjectName">
            <summary>
            Gets the found containing object names and all the aliases they're stored under.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityNameFinder.AliasesPerActualContainingObjectName">
            <summary>
            Gets the found actual containing object names and all the aliases they're stored under.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty">
            <summary>
            Class which at runtime represents an entity property, and which is used in Predicate expressions for filtering and sorting 
            in-memory using EntityView(2) objects. Both selfservicing and adapter use this class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty"/> class.
            </summary>
            <param name="propertyName">Name of the property. Case sensitive</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty"/> class.
            </summary>
            <param name="descriptor">The descriptor of the property this object has to represent</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ForcedCurrentValueWrite(System.Object)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ForcedCurrentValueWrite(System.Object,System.Object)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.GetDiscriminatorColumnFlag">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.Clone">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.BeginEdit">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.CancelEdit">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.EndEdit">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCoreInterpret#GetValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Gets the value for the field implementing this interface for the entity passed in.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            the value of the property in the entity passed in. If the field isn't present in the entity passed in, null is returned.
            If the value for the property is null, DBNull.Value is returned.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Collections.IList)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Collections.IList)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Modulus(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.String)">
            <summary>
            Operator overload for the '%' operator to produce a FieldLikePredicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="pattern">Pattern.</param>
            <returns>
            A FieldLikePredicate 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field * value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents expression * field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field - value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field / value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Operator overload for the '|' operator to concatenate sortoperators to a field
            </summary>
            <param name="field">Field.</param>
            <param name="operatorToUse">Operator to use.</param>
            <returns>new SortClause object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.Alias">
            <summary>
            Setter not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.CurrentValue">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.DbValue">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsChanged">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsNull">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ObjectAlias">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.AggregateFunctionToApply">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.LinkedSuperTypeField">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.DataType">
            <summary>
            Returns the datatype of the entityproperty. Only valid after this entityproperty has been evaluated with an entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsPrimaryKey">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsNullable">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.FieldIndex">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ContainingObjectName">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsForeignKey">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsReadOnly">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.MaxLength">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.Scale">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.Precision">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ActualContainingObjectName">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.IsInMultiTargetEntity">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ActAsDerivedTableField">
            <summary>
            Gets or sets a value indicating whether this field should be threated as a derived table field. This is necessary when this field is in a query
            and targets a derived table while this field is actually a full entity field (so it has field info). If this flag is true, the field will result in
            objectAlias.Alias instead of persistenceinfo.Fieldname as alias (alias only if required)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.Name">
            <summary>
            The name of the property. Name cannot be of zero length nor can they consist of solely spaces. Leading and trailing spaces are trimmed.
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">The value specified for Name is invalid.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.ExpressionToApply">
            <summary>
            The expression to apply to this field in a select list, update statement or predicate.
            Expression is applied before AggregateFunctionToApply.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.FunctionCallToApply">
            <summary>
            The database function call to apply on this field in a selectlist, update statement or predicate or expression.
            FunctionCallToApply is applied before ExpressionToApply.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityProperty.RepresentingPropertyDescriptor">
            <summary>
            Gets the representing property descriptor.
            </summary>
            <value>The representing property descriptor.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor">
            <summary>
            Summary description for EntityPropertyDescriptor.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="field">Field which is exposed as a property and which has to be described in a PropertyDescriptor</param>
            <param name="typeOfBoundObject">The type of object this property is a property of</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.GetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>current value of associated IEntityField</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
            <summary>
            Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> for a given object using a specified array of attributes as a filter.
            </summary>
            <param name="instance">A component to get the properties for.</param>
            <param name="filter">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes for the specified component.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Gets an editor of the specified type.
            </summary>
            <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
            <returns>
            An instance of the requested editor type, or null if an editor cannot be found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
            <summary>
            Enables other objects to be notified when this property changes.
            </summary>
            <param name="component">The component to add the handler for.</param>
            <param name="handler">The delegate to add as a listener.</param>
            <exception cref="T:System.ArgumentNullException">component or handler is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Equals(System.Object)">
            <summary>
            Compares this to another object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare to this <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</param>
            <returns>
            true if the values are equivalent; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
            <summary>
            Enables other objects to be notified when this property changes.
            </summary>
            <param name="component">The component to remove the handler for.</param>
            <param name="handler">The delegate to remove as a listener.</param>
            <exception cref="T:System.ArgumentNullException">component or handler is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ComponentType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.DisplayName">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.IsBrowsable">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Attributes">
            <summary>
            Gets the collection of attributes for this member.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> that provides the attributes for this member, or an empty collection if there are no attributes in the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> that is used to convert the <see cref="T:System.Type"></see> of this property.</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Description">
            <summary>
            Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.
            </summary>
            <value></value>
            <returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute"></see>, the property value is set to the default, which is an empty string ("").</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.DesignTimeOnly">
            <summary>
            Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>.
            </summary>
            <value></value>
            <returns>true if this member should be set only at design time; false if the member can be set during run time.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.IsLocalizable">
            <summary>
            Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute"></see>.
            </summary>
            <value></value>
            <returns>true if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute"></see> set to true; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Category">
            <summary>
            Gets the name of the category to which the member belongs, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute"></see>.
            </summary>
            <value></value>
            <returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute"></see>, the category name is set to the default category, Misc.</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.IsReadOnly">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Name">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.PropertyType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.SupportsChangeEvents">
            <summary>
            Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.
            </summary>
            <value></value>
            <returns>true if value change notifications may originate from outside the property descriptor; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2">
            <summary>
            EntityPropertyDescriptor2 implementation for adding property descriptors for entity fields in a complex databinding scenario.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Type,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="field">Field which is exposed as a property and which has to be described in a PropertyDescriptor</param>
            <param name="typeOfBoundObject">The type of object this property is a property of</param>
            <param name="isReadOnly">True if the field is an identity field/primary key field and the entity itself is not new</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.CanResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.GetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>current value of associated IEntityField</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.SetValue(System.Object,System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ShouldSerializeValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.GetChildProperties(System.Object,System.Attribute[])">
            <summary>
            Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> for a given object using a specified array of attributes as a filter.
            </summary>
            <param name="instance">A component to get the properties for.</param>
            <param name="filter">An array of type <see cref="T:System.Attribute"></see> to use as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes for the specified component.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.GetEditor(System.Type)">
            <summary>
            Gets an editor of the specified type.
            </summary>
            <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports.</param>
            <returns>
            An instance of the requested editor type, or null if an editor cannot be found.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.AddValueChanged(System.Object,System.EventHandler)">
            <summary>
            Enables other objects to be notified when this property changes.
            </summary>
            <param name="component">The component to add the handler for.</param>
            <param name="handler">The delegate to add as a listener.</param>
            <exception cref="T:System.ArgumentNullException">component or handler is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Equals(System.Object)">
            <summary>
            Compares this to another object to see if they are equivalent.
            </summary>
            <param name="obj">The object to compare to this <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</param>
            <returns>
            true if the values are equivalent; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.RemoveValueChanged(System.Object,System.EventHandler)">
            <summary>
            Enables other objects to be notified when this property changes.
            </summary>
            <param name="component">The component to remove the handler for.</param>
            <param name="handler">The delegate to remove as a listener.</param>
            <exception cref="T:System.ArgumentNullException">component or handler is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ComponentType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.DisplayName">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.IsBrowsable">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Attributes">
            <summary>
            Gets the collection of attributes for this member.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"></see> that provides the attributes for this member, or an empty collection if there are no attributes in the <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> that is used to convert the <see cref="T:System.Type"></see> of this property.</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Description">
            <summary>
            Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.
            </summary>
            <value></value>
            <returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute"></see>, the property value is set to the default, which is an empty string ("").</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.DesignTimeOnly">
            <summary>
            Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>.
            </summary>
            <value></value>
            <returns>true if this member should be set only at design time; false if the member can be set during run time.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.IsLocalizable">
            <summary>
            Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute"></see>.
            </summary>
            <value></value>
            <returns>true if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute"></see> set to true; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Category">
            <summary>
            Gets the name of the category to which the member belongs, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute"></see>.
            </summary>
            <value></value>
            <returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute"></see>, the category name is set to the default category, Misc.</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.IsReadOnly">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Name">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.PropertyType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.SupportsChangeEvents">
            <summary>
            Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.
            </summary>
            <value></value>
            <returns>true if value change notifications may originate from outside the property descriptor; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector">
            <summary>
            General class which defines the projection result and destination of a property of an entity.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector">
            <summary>
            Interface for defining the IEntityPropertyProjector type which is used for entity property projections when projecting an entityview's content onto another
            data store format.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector.ProjectEntityProperty(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Projects the entity through this entity property projector and results into a single value, based on what the DefaultValueProducer is and
            what filter is specified (if any)
            </summary>
            <param name="entity">The entity to project. The DefaultValueProducer, ValueFilter, AlternativeValueProducer and the method to post process
            the value will determine what the returned value is</param>
            <returns>Projection result of an entity's property using this entity property descriptor.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector.DefaultValueProducer">
            <summary>
            Gets or sets the default value producer. This object produces the value returned by ProjectEntityProperty if ValueFilter isn't set or resolves to true
            for the entity passed into ProjectEntityProperty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector.ValueFilter">
            <summary>
            Gets or sets the value filter which can be used to select between the DefaultValueProducer and the AlternativeValueProducer. If this filter isn't
            set (null) or set to an IPredicate implementing object and at runtime the filter resolves to true for the entity passed into ProjectEntityProperty, 
            the DefaultValueProducer is used, otherwise the AlternativeValueProducer. If AlternativeValueProducer isn't set, an
            ORMInterpretationException is thrown.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector.AlternativeValueProducer">
            <summary>
            Gets or sets the alternative value producer. Only used if ValueFilter is set to a valid filter and that filter resolves to false for the
            entity passed into ProjectEntityProperty.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector"/> class.
            </summary>
            <param name="defaultValueProvider">The default value provider object.This object produces the value returned by ProjectEntityProperty if ValueFilter isn't set or resolves to true
            for the entity passed into ProjectEntityProperty. Can't be null</param>
            <param name="projectedResultName">Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            Can't be null / empty string</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector"/> class.
            </summary>
            <param name="defaultValueProvider">The default value provider object.This object produces the value returned by ProjectEntityProperty if ValueFilter isn't set or resolves to true
            for the entity passed into ProjectEntityProperty. Can't be null</param>
            <param name="projectedResultName">Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            Can't be null / empty string</param>
            <param name="valueFilter">The value filter which can be used to select between the DefaultValueProducer and the AlternativeValueProducer. If set to null, 
            alternativeValueProducer is ignored.</param>
            <param name="alternativeValueProducer">The alternative value producer. Only used if ValueFilter is set to a valid filter and that filter resolves to false for the
            entity passed into ProjectEntityProperty. Can't be null if valuefilter is specified</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector"/> class.
            </summary>
            <param name="defaultValueProvider">The default value provider object.This object produces the value returned by ProjectEntityProperty if ValueFilter isn't set or resolves to true
            for the entity passed into ProjectEntityProperty. Can't be null</param>
            <param name="projectedResultName">Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            Can't be null / empty string</param>
            <param name="valueFilter">The value filter which can be used to select between the DefaultValueProducer and the AlternativeValueProducer. If set to null,
            alternativeValueProducer is ignored.</param>
            <param name="alternativeValueProducer">The alternative value producer. Only used if ValueFilter is set to a valid filter and that filter resolves to false for the
            entity passed into ProjectEntityProperty. Can't be null if valuefilter is specified</param>
            <param name="valueType">Type of the value returned by the value producers. This can be different from the actual value produced as you can change
            the type in an override of ValuePostProcess. If not set, it is set by ProjectEntityProperty to the type of the value producer selected</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector"/> class.
            </summary>
            <param name="defaultValueProvider">The default value provider object.This object produces the value returned by ProjectEntityProperty if ValueFilter isn't set or resolves to true
            for the entity passed into ProjectEntityProperty. Can't be null</param>
            <param name="projectedResultName">Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            Can't be null / empty string</param>
            <param name="valueFilter">The value filter which can be used to select between the DefaultValueProducer and the AlternativeValueProducer. If set to null,
            alternativeValueProducer is ignored.</param>
            <param name="alternativeValueProducer">The alternative value producer. Only used if ValueFilter is set to a valid filter and that filter resolves to false for the
            entity passed into ProjectEntityProperty. Can't be null if valuefilter is specified</param>
            <param name="valueType">Type of the value returned by the value producers. This can be different from the actual value produced as you can change
            the type in an override of ValuePostProcess. If not set, it is set by ProjectEntityProperty to the type of the value producer selected</param>
            <param name="setUsingCTorHint">Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way 
            (false). This flag can be ignored by the projector engine if values can better be set otherwise.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ProjectEntityProperty(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Projects the entity through this entity property projector and results into a single value, based on what the DefaultValueProducer is and
            what filter is specified (if any)
            </summary>
            <param name="entity">The entity to project. The DefaultValueProducer, ValueFilter, AlternativeValueProducer and the method to post process
            the value will determine what the returned value is</param>
            <returns>
            Projection result of an entity's property using this entity property descriptor.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ValuePostProcess(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Postprocesses the value passed in, which is the value produced by the selected value producer in ProjectEntityProperty.
            </summary>
            <param name="preliminaryProjectionResult">The preliminary projection result.</param>
            <param name="entity">The entity projected</param>
            <returns>the projection result processed by this routine. The base class version is empty and returns preliminaryProjectionResult</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String,System.Type,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="defaultValueProducer">The default value producer.</param>
            <param name="alternativeValueProducer">The alternative value producer.</param>
            <param name="valueFilter">The value filter.</param>
            <param name="projectedResultName">Name of the projected result.</param>
            <param name="valueType">Type of the value.</param>
            <param name="setUsingCTorHint">if set to <c>true</c> [set using C tor hint].</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.DefaultValueProducer">
            <summary>
            Gets or sets the default value producer. This object produces the value returned by ProjectEntityProperty if ValueFilter isn't set or resolves to true
            for the entity passed into ProjectEntityProperty.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ValueFilter">
            <summary>
            Gets or sets the value filter which can be used to select between the DefaultValueProducer and the AlternativeValueProducer. If this filter isn't
            set (null) or set to an IPredicate implementing object and at runtime the filter resolves to true for the entity passed into ProjectEntityProperty,
            the DefaultValueProducer is used, otherwise the AlternativeValueProducer. If AlternativeValueProducer isn't set, an
            ORMInterpretationException is thrown.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.AlternativeValueProducer">
            <summary>
            Gets or sets the alternative value producer. Only used if ValueFilter is set to a valid filter and that filter resolves to false for the
            entity passed into ProjectEntityProperty.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ProjectedResultName">
            <summary>
            Name for the projection result. Projection result consumers can use this name to further handle the projection result.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ValueType">
            <summary>
            Gets or sets the type of the value returned by the value producers. This can be different from the actual value produced as you can change
            the type in an override of ValuePostProcess. If not set, it is set by ProjectEntityProperty to the type of the value producer selected
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.SetUsingCTorHint">
            <summary>
            Flag which hints the projector engine how to set the destination element: via the constructor (true) or on another way (false). 
            This flag can be ignored by the projector engine if values can better be set otherwise.
            </summary>
            <remarks>Projectors for CTors have to appear in the same order as their destination parameters appear in the CTor to use.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ValueProducerFunc">
            <summary>
            Gets or sets the delegate to use to produce a value for this projector out of the list of object values. Be sure to set
            ValueProducerFuncParameterIndices if the delegate contained inside ValueProducerFunc requires any input values from the list of values to project
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyProjector.ValueProducerFuncParameterIndices">
            <summary>
            Gets or sets the parameter indices array to use with ValueProducer. If ValueProducerFunc is null, this array is ignored. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation">
            <summary>
            Generic implementation of the IEntityRelation interface, which is used for relations between IEntity* instances.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation">
            <summary>
            Interface used for relations between IEntity* instances. 
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AddEntityFieldPair``1(``0,``0)">
            <summary>
            Adds a new pair of entity fields of type TEntityField to the relation, including persistence info. 
            Primary Key fields and Foreign Key Fields have to be added in pairs. Used by Adapter template set.
            </summary>
            <param name="primaryKeyField">The entity field instance which represents a field in the primary key in the relation</param>
            <param name="foreignKeyField">The entity field instance which represents the corresponding field in the foreign key in the relation</param>
            <typeparam name="TEntityField">The type of the fields.</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllFKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllPKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetPKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetFKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.SetPKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.SetFKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetPKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCore information about the PK field at index specified
            </summary>
            <param name="index">index of field in the list of PK fields</param>
            <returns>IEntityFieldCore object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetFKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCore information about the FK field at index specified
            </summary>
            <param name="index">index of field in the list of FK fields</param>
            <returns>IEntityFieldCore object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllPKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllFKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.SetAliases(System.String,System.String)">
            <summary>
            Sets the aliases for the start entity and the end entity formed by the fields stored in this entityrelation. The start entity and end entity
            are determined based on the type of the relation and the primary key / foreign key fields. Mainly used by RelationCollection.Add(). 
            </summary>
            <param name="aliasStartEntity">the alias for the start entity in the relation. Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
            <param name="aliasEndEntity">the alias for the end entity in the relation Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.CustomFilter">
            <summary>
            Custom filter for JOIN clauses which are added with AND to the ON clause resulting from this EntityRelation. By adding a
            predicate expression with fieldcomparevalue predicate objects for example, you can add extra filtering inside the JOIN.
            </summary>
            <remarks>If CustomFilterReplacesOnClause is set to true (default: false), the CustomFilter simply represents the ON clause.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.TypeOfRelation">
            <summary>
            The relation type the IEntityRelation instance represents.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.IsWeak">
            <summary>
            Flag to signal if this relation is a 'weak' relation or not. Weak relations are optional relations, which means when A and B have a 
            weak relation, not all instances of A have to have a related instance of B.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AmountFields">
            <summary>
            Returns the amount of fields in the EntityRelation object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.StartEntityIsPkSide">
            <summary>
            Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.CustomFilterReplacesOnClause">
            <summary>
            Flag to signal the join creator logic to use the CustomFilter specified as the ON clause, instead of appending the CustomFilter to the ON
            clause. Ignored if CustomFilter is null or empty. Default is false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.InheritanceInfoPkSideEntity">
            <summary>
            Gets or sets the inheritance info for the pk side entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.InheritanceInfoFkSideEntity">
            <summary>
            Gets or sets the inheritance info for the fk side entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.HintForJoins">
            <summary>
            Hint value for the consideration of the jointype of this relation. 
            Default: JoinHint.None
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AliasPKSide">
            <summary>
            Alias value for the entity which is on the PK side of the relation. Determined from the relation type and the pk/fk fields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AliasFKSide">
            <summary>
            Alias value for the entity which is on the FK side of the relation. Determined from the relation type and the pk/fk fields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AliasStartEntity">
            <summary>
            Gets the alias value for the start entity of the relation
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AliasEndEntity">
            <summary>
            Gets the alias value for the end entity of the relation
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.MappedFieldName">
            <summary>
            Gets or sets the name of the field mapped onto this relation in the start entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.IsHierarchyRelation">
            <summary>
            Gets or sets a value indicating whether this instance is a hierarchy relation.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor
            </summary>
            <param name="typeOfRelation">The type of relation this instance represents</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.RelationType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation"/> class.
            </summary>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <param name="mappedFieldName">Name of the mapped field in the start entity onto this relation.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.RelationType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation"/> class.
            </summary>
            <param name="typeOfRelation">The type of relation.</param>
            <param name="startEntityIsPkSide">Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.RelationType,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation"/> class.
            </summary>
            <param name="typeOfRelation">The type of relation.</param>
            <param name="mappedFieldName">Name of the mapped field in the start entity onto this relation.</param>
            <param name="startEntityIsPkSide">Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor
            </summary>
            <param name="primaryKeyField">The IEntityField instance which represents the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField instance which represents the foreign key in the relation</param>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.RelationType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation"/> class.
            </summary>
            <param name="primaryKeyField">The IEntityField instance which represents the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField instance which represents the foreign key in the relation</param>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <param name="startEntityIsPkSide">Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.</param>
            <param name="mappedFieldName">Name of the mapped field.</param>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor
            </summary>
            <param name="primaryKeyField">The IEntityField2 instance which represents the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField2 instance which represents the foreign key in the relation</param>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.RelationType,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation"/> class.
            </summary>
            <param name="primaryKeyField">The IEntityField2 instance which represents the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField2 instance which represents the foreign key in the relation</param>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <param name="startEntityIsPkSide">Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.</param>
            <param name="mappedFieldName">Name of the mapped field in the start entity onto this relation.</param>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AddEntityFieldPair``1(``0,``0)">
            <summary>
            Adds a new pair of entity field instances to the relation. Primary Key fields and Foreign Key Fields have to be added
            in pairs. 
            </summary>
            <param name="primaryKeyField">The Entity field instance which represents a field in the primary key in the relation</param>
            <param name="foreignKeyField">The Entity field instance which represents the corresponding field in the foreign key in the relation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.InitClass">
            <summary>
            Initializes the class' member variables.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetPKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
            <param name="artificialAliasPerEntity">The artificial alias per entity. This collection contains per entity (key) the artificial alias (value), IF 
            such an artificial alias has been given out. (only done with entities which are part of a hierarchy of type TargetPerEntity)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllPKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the PK fields in this entityrelation
            </summary>
            <returns>List with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllFKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllFKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllPKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetFKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetPKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCore information about the PK field at index specified
            </summary>
            <param name="index">index of field in the list of PK fields</param>
            <returns>IEntityFieldCore object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetFKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCore information about the FK field at index specified
            </summary>
            <param name="index">index of field in the list of FK fields</param>
            <returns>IEntityFieldCore object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SetPKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SetFKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SetAliases(System.String,System.String)">
            <summary>
            Sets the aliases for the start entity and the end entity formed by the fields stored in this entityrelation. The start entity and end entity
            are determined based on the type of the relation and the primary key / foreign key fields. Mainly used by RelationCollection.Add(). 
            </summary>
            <param name="aliasStartEntity">the alias for the start entity in the relation. Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
            <param name="aliasEndEntity">the alias for the end entity in the relation Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#ToggleArtificialAliasingForTargetPerEntityRelations(System.Boolean)">
            <summary>
            Enables / disables the artificial aliasing for target per entity relations. This method is used to enable the artificial aliasing of entities which
            are in a hierarchy of TargetPerEntity and which are in this relation. This is switched on for dyn/typedlist fetches to be sure 
            dyn/typedlists with fields from multiple entities in the same inheritance hierarchy will be retrievable properly, as they need aliasing under the hood
            but if the developer didn't alias the entities, the query will fail because the supertype(s) aren't joined multiple types. 
            </summary>
            <param name="enable">if set to true, enable artificial aliasing, otherwise false (default).</param>
            <remarks>Artificial aliasing is disabled by default</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
            <param name="artificialAliasPerEntity">The artificial alias per entity. This collection contains per entity (key) the artificial alias (value), IF
            such an artificial alias has been given out. (only done with entities which are part of a hierarchy of type TargetPerEntity)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.ResetArtificialAliases">
            <summary>
            Resets the aliases for start/end entity if they're artificial.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetCustomFilterForQuery">
            <summary>
            Gets the custom filter for the query to build.
            </summary>
            <returns>The set CustomFilter plus added inheritance based type filters if necessary</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.DetermineIfIsWeak">
            <summary>
            Determines if this relation is a weak relation (true) or not (false). 1:m is always weak by definition. 1:1
            relations are weak when relation is seen from PK entity, otherwise always strong (when seen from FK entity).
            This can't be determined here, so 1:1 relations are always reported 'weak'. 
            </summary>
            <returns>true when this relation is weak, false otherwise. Returns false by default.</returns>
            <remarks>Sees 1:1 not as a strong relation per se. Earlier versions did so.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.DetermineAlias(System.Boolean)">
            <summary>
            Determines the alias for the side specified with the pkSide flag.
            </summary>
            <param name="pkSide">if true, the alias for teh PK side is determined, otherwise the FK side</param>
            <returns>the alias for the side requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.CheckifAliasIsArtificial(System.Boolean)">
            <summary>
            Checks if the alias for the side specified is indeed an artificial alias. Artificial aliases are issued for sides which don't have
            an alias set and which are in a targetperentity hierarchy.
            </summary>
            <param name="pkSide">if set to <c>true</c> [pk side].</param>
            <returns>true if the side has an artificial alias so Alias*Side and Alias*Entity return an artificial alias. </returns>
            <remarks>Returns always false if artificial aliasing is disabled (default).</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.BuildCustomFilter">
            <summary>
            Builds the custom filter. If there's a custom filter specified and one or both sides are in a targetperentityhierarchy and have a typefilter
            in the inheritanceinfo, these filters are merged: customfilter AND (typefilterSTART AND typeFilterEND)
            </summary>
            <returns>Ready to use custom filter.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.ToggleArtificialAliasingForTargetPerEntityRelations(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo)">
            <summary>
            Toggles the artificial aliasing for target per entity relations in the relations to the hierarchy root in the inheritanceinfo object passed in.
            </summary>
            <param name="enable">the value to set</param>
            <param name="inheritanceInfo">The inheritance info.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#AliasLeftOperand">
            <summary>
            Gets the alias for the left operand (Start entity)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#AliasRightOperand">
            <summary>
            Gets the alias for the right operand (End entity)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#JoinType">
            <summary>
            The join type to use. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#StartElementIsPkSide">
            <summary>
            Returns true if the start element of the relation (the left operand) is the Pkside.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#LeftOperandInheritanceInfo">
            <summary>
            Gets the left operand's InheritanceInfo
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SD#LLBLGen#Pro#ORMSupportClasses#IRelation#RightOperandInheritanceInfo">
            <summary>
            Gets the right operand's InheritanceInfo
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.TypeOfRelation">
            <summary>
            The relation type the IEntityRelation instance represents.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.IsWeak">
            <summary>
            Flag to signal if this relation is a 'weak' relation or not. Weak relations are optional relations, which means when A and B have a 
            weak relation, not all instances of A have to have a related instance of B.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AmountFields">
            <summary>
            Returns the amount of fields in the EntityRelation object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.CustomFilterReplacesOnClause">
            <summary>
            Flag to signal the join creator logic to use the CustomFilter specified as the ON clause, instead of appending the CustomFilter to the ON
            clause. Ignored if CustomFilter is null or empty. Default is false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.CustomFilter">
            <summary>
            Custom filter for JOIN clauses which are added with AND to the ON clause resulting from this EntityRelation. By adding a
            predicate expression with fieldcomparevalue predicate objects for example, you can add extra filtering inside the JOIN.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.HintForJoins">
            <summary>
            Hint value for the consideration of the jointype of this relation. 
            Default: JoinHint.None
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasPKSide">
            <summary>
            Alias value for the entity which is on the PK side of the relation. Determined from the relation type and the pk/fk fields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasFKSide">
            <summary>
            Alias value for the entity which is on the FK side of the relation. Determined from the relation type and the pk/fk fields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.StartEntityIsPkSide">
            <summary>
            Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasStartEntity">
            <summary>
            Gets the alias of the start entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasEndEntity">
            <summary>
            Gets the alias of the end entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.InheritanceInfoPkSideEntity">
            <summary>
            Gets or sets the inheritance info for the pk side entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.InheritanceInfoFkSideEntity">
            <summary>
            Gets or sets the inheritance info for the fk side entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.MappedFieldName">
            <summary>
            Gets or sets the name of the field mapped onto this relation in the start entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.IsHierarchyRelation">
            <summary>
            Gets or sets a value indicating whether this instance is a hierarchy relation.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo`1">
            <summary>
            General synchronization information class for related entities to an existing entity. 
            Used to keep track of which entity is set as a related entity using which relation and which field mapped on that
            relation so when the related entity is saved, it will be synced with the correct fields. The related
            entity is called a Data Suppling Entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo`1.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo`1.Used">
            <summary>
            Gets / sets used flag. Flag to signal if the sync info has been used for syncing already. If not, it can be used to 
            determine if the entity holding this sync info has to be saved or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo`1.DataSupplyingEntity">
            <summary>
            Gets / sets Data Supplying Entity value. Used for synchronization between related entities when they have to be synchronized.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo`1.Relation">
            <summary>
            Gets / sets the specific Entity Relation between two related entities (the entity holding this object and the entity specified in
            DataSupplyingEntity) for synchronization of values.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1">
            <summary>
            EntityView provides 'view' capabilities for an entity collection. This class supports filtering and sorting in-memory,
            using type safe objects. Binding an entity collection to a grid or other complex databinding control will actually make the control
            bind to an instance of this class.
            </summary>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1">
            <summary>
            Generic entity view base class, which provides the core class code for the EntityView class.
            EntityView provides 'view' capabilities for an entity collection. This class supports filtering and sorting in-memory,
            using type safe objects. Binding an entity collection to a grid or other complex databinding control will actually make the control
            bind to an instance of this class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Refresh">
            <summary>
            Refreshes this view by re-applying filter and sorter on the related collection
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Contains(`0)">
            <summary>
            Determines whether this entity view contains the entity passed in. This method returns false if the entity is outside the filter, but in the related
            entity collection, as it's then not contained in the entity view.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.IndexOf(`0)">
            <summary>
            Determines the index of the entity passed in in the entity view in filtered and sorted state.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.AddNew">
            <summary>
            Adds a new entity through databinding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Remove(`0)">
            <summary>
            Removes the specified entity from the related collection, if the entity is in the view.
            </summary>
            <param name="toRemove">To remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index in this view from the related collection 
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.SetSorter(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Sets the sort expression for the filtered entities in this view. It sorts the entities which are in this view, 
            </summary>
            <param name="sorter">The sorter.</param>
            <returns>true if sorting took place, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.SetFilter(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Applies the filter specified to the set related collection
            </summary>
            <param name="filter">The filter to set. Will perform the filtering on the collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties on each item used to bind data.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects to find in the collection as bindable. This can be null.</param>
            <returns>
            The <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties on each item used to bind data.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.GetPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Gets the property descriptors for the entity passed in. This is a dummy instance, and used to produce the property descriptors. 
            </summary>
            <returns>the propertydescriptor collection of the properties of the entity passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">An array of <see cref="T:System.ComponentModel.PropertyDescriptor"></see> objects, the list name for which is returned. This can be null.</param>
            <returns>The name of the list.</returns>
            <remarks>Creates a dummy instance of the entity type in the related entitycollection and returns "LLBLGenProEntityName" + "Collection"</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.GetEntityFieldPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor}@,System.Collections.Generic.Dictionary{System.String,System.ComponentModel.PropertyDescriptor}@)">
            <summary>
            Gets the entity field property descriptors for the dummy instance passed in.
            </summary>
            <param name="dummyInstance">The dummy instance.</param>
            <param name="instanceProperties">The instance properties.</param>
            <param name="namesAdded">The names added by this routine</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.CreateDummyInstance">
            <summary>
            Creates a dummy instance for the related entity collection of this view. This is done using the entityfactory of that entitycollection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.GetSortProperty(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Gets the property descriptor for the first sortclause. 
            </summary>
            <param name="appliedSorter">The applied sorter on this view..</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"></see> and a <see cref="T:System.ComponentModel.ListSortDirection"></see>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to sort by.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sorts the data source based on the given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see>.
            </summary>
            <param name="sorts">The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> containing the sorts to apply to the data source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to search on.</param>
            <param name="key">The value of the property parameter to search for.</param>
            <returns>
            The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSearching"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.GetEntityAtIndex(System.Int32)">
            <summary>
            Gets the entity at the specofied index in the view. 
            </summary>
            <param name="index">The index.</param>
            <returns>entity at the specified index in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector)">
            <summary>
            Creates a projection of the current view data, using the passed in field projections and the projector.
            </summary>
            <param name="propertyProjectors">The property projectors.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all rows.</param>
            <param name="filter">The filter to select the source entities in this view.</param>
            <param name="projector">the actual projector engine. It is used to convert raw projection data into a real object inside the
            projector object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.InitClassCore(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            Inits the class.
            </summary>
            <param name="relatedCollection">The related collection.</param>
            <param name="filterToApply">The filter to apply.</param>
            <param name="sorterToApply">The sorter to apply.</param>
            <param name="dataChangeAction">The data change action.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.OnListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Called when something changes in the related list or this view.
            </summary>
            <param name="index">The index.</param>
            <param name="typeOfChange">The type of change.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.SortIndices(System.Collections.Generic.List{System.Int32},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32)">
            <summary>
            Sorts the indices in the list passed in using the sortclause at the indexInSortExpression in sorter. If there are multiple entities which have the
            same value, this routine calls itself to sort those entities using the next sortclause until the sortexpression is done.
            It returns a new list with indices. All indices are indices in the related collection.
            </summary>
            <param name="listToSort">The list of indices to sort. </param>
            <param name="sorter">The sort expression to use.</param>
            <param name="indexInSortExpression">The index in sort expression which points to the sortclause to use</param>
            <returns>new list of indices with the entities at the indices in listToSort in the order implied by sorter[indexInSortExpression]</returns>
            <remarks>will use recursion if there are entities with the same value and there are more sort clauses / expressions specified. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.MarshalByValueComponent"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.BindEvents">
            <summary>
            Binds the events of the related collection to own event handlers so the changes in the related collection are noted and handled here as well.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.ApplyFilterOnEntity(System.Int32)">
            <summary>
            Applies the filter on entity at index passed. If no filter is set, this method is a no-op and always returns true, unless the index is out of bounds.
            </summary>
            <param name="index">The index.</param>
            <returns>true if the filter resolved to true, or no filter is present, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1._relatedCollectionListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles the ListChanged event of the related collection. It executes various actions based on the listchanged type.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.HandleRelatedCollectionItemDeleted(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handles the related collection item deleted event
            </summary>
            <param name="eventArguments">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.HandleRelatedCollectionItemChanged(System.ComponentModel.ListChangedEventArgs,System.Boolean@,System.Int32@,System.ComponentModel.ListChangedType@,System.Boolean@)">
            <summary>
            Handles the related collection item changed event
            </summary>
            <param name="eventArguments">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
            <param name="filterResult">if set to <c>true</c> [filter result].</param>
            <param name="indexForEvent">The index for event.</param>
            <param name="changetypeForEvent">The changetype for event.</param>
            <param name="fireEvent">if set to <c>true</c> [fire event].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.HandleRelatedCollectionItemAdded(System.ComponentModel.ListChangedEventArgs,System.Boolean@,System.Int32@,System.ComponentModel.ListChangedType@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Handles the related collection item added event
            </summary>
            <param name="eventArguments">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
            <param name="filterResult">if set to <c>true</c> [filter result].</param>
            <param name="indexForEvent">The index for event.</param>
            <param name="changetypeForEvent">The changetype for event.</param>
            <param name="fireEvent">if set to <c>true</c> [fire event].</param>
            <param name="isNewIndex">if set to <c>true</c> [is new index].</param>
            <param name="isInsert">if set to <c>true</c> [is insert].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.UpdateIndices(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase{`0}.ListAction,System.Int32)">
            <summary>
            Adjusts the indices in the _entityIndices collection, which is necessary if an entity in this view was added/removed/inserted to/from the
            related list.
            </summary>
            <param name="index">The index.</param>
            <param name="action">The action.</param>
            <param name="newItemInEntityIndicesIndex">New index of the item in entity indices. Used in inserts. With inserts, there are two 
            positions in entityIndices, which have the same value. The position newItemInEntityIndicesIndex has to stay that value, all other
            values have to be adjusted if they're equal or greater than index..</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Sorts the data source based on the given <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see>.
            </summary>
            <param name="sorts">The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> containing the sorts to apply to the data source.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingListView#RemoveFilter">
            <summary>
            Removes the current filter applied to the data source.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to add to the indexes used for searching.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#AddNew">
            <summary>
            Adds a new item to the list.
            </summary>
            <returns>The item added to the list.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.AllowNew"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor"></see> and a <see cref="T:System.ComponentModel.ListSortDirection"></see>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to sort by.</param>
            <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</param>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to search on.</param>
            <param name="key">The value of the property parameter to search for.</param>
            <returns>
            The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSearching"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> from the indexes used for searching.
            </summary>
            <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to remove from the indexes used for searching.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#RemoveSort">
            <summary>
            Removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Not supported. Use AddNew() or add a new object to the related entity collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#Clear">
            <summary>
            Not supported. Clear the related entity collection instead.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Not supported. Insert a new entity in the related collection instead.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Not supported. Remove the entity from the related collection instead.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Not supported. Remove the entity from the related collection instead.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.ListChanged">
            <summary>
            Event which is fired when the entity collection related to this entityview is changed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.RaisesItemChangedEvents">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ComponentModel.IRaiseItemChangedEvents"></see> object raises <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> events.
            </summary>
            <value></value>
            <returns>by default: false. Set to true if you want a bindingsource only raise events if the bound entityview(2) object raises 
            ListChanged events, not when the entity objects inside the view raise PropertyChangedEvents</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingListView#Filter">
            <summary>
            Gets or sets the filter to be used to exclude items from the collection of items returned by the data source
            </summary>
            <value></value>
            <returns>The string used to filter items out in the item collection returned by the data source. </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingListView#SortDescriptions">
            <summary>
            Gets the collection of sort descriptions currently applied to the data source.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ListSortDescriptionCollection"></see> currently applied to the data source.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
            <summary>
            Gets a value indicating whether the data source supports advanced sorting.
            </summary>
            <value></value>
            <returns>true if the data source supports advanced sorting; otherwise, false. </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingListView#SupportsFiltering">
            <summary>
            Gets a value indicating whether the data source supports filtering.
            </summary>
            <value></value>
            <returns>true if the data source supports filtering; otherwise, false. </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#AllowEdit">
            <summary>
            Gets whether you can update items in the list.
            </summary>
            <value></value>
            <returns>true if you can update the items in the list; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#AllowNew">
            <summary>
            Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>.
            </summary>
            <value></value>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"></see> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"></see>.
            </summary>
            <value></value>
            <returns>true if you can remove items from the list; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
            <value></value>
            <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"></see> has not been called; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
            <summary>
            Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event is raised when the list changes or an item in the list changes.
            </summary>
            <value></value>
            <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged"></see> event is raised when the list changes or when an item changes; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#SupportsSearching">
            <summary>
            Gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)"></see> method.
            </summary>
            <value></value>
            <returns>true, searching is supported.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#ComponentModel#IBindingList#SupportsSorting">
            <summary>
            Gets whether the list supports sorting.
            </summary>
            <value></value>
            <returns>true, sorting is always enabled.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Indexer via IList. Setter isn't supported, getter returns the typed indexer's value.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.DataChangeAction">
            <summary>
            Gets or sets the data change action which specifies what to do when the data in the related collection of an entity view changes. A change in 
            data can be: entity added or changed. If an entity is removed from the underlying collection, the entity is simply removed from the entity 
            view, as the view doesn't contain any data by itself.
            </summary>
            <value>The data change action.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.AllowNew">
            <summary>
            Gets/sets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>.
            </summary>
            <value></value>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>; otherwise, false.</returns>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.AllowRemove">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"></see> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"></see>.
            </summary>
            <value></value>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.AllowEdit">
            <summary>
            Gets / sets whether you can update items in the list.
            </summary>
            <value></value>
            <returns>true if you can update the items in the list; otherwise, false.</returns>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.IsSorted">
            <summary>
            Gets whether the items in the list are sorted.
            </summary>
            <value></value>
            <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)"></see> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort"></see> has not been called; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.SortDirection">
            <summary>
            IBindingList member. Gets the direction of the sort. This property returns the value of the first SortClause in the set sorter. 
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.SortProperty">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that is being used for sorting.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> is false. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in this view.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Sorter">
            <summary>
            Gets or sets the sorter for this entity view. Setting this property will re-sort the view and will reset the view in databinding scenario's.
            </summary>
            <value>The sort expression to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.Filter">
            <summary>
            Gets or sets the filter to use for this entity view.
            </summary>
            <value>The filter to use</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.EntityIndices">
            <summary>
            Gets the entity indices for the entities which are in this view, in the order sorted by the sorter set.
            </summary>
            <value>The entity indices.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.RelatedCollectionInternal">
            <summary>
            Gets the related collection using a property which is solely for internal usage. This is then used by the derived classes to expose the collection
            in a more typed manner.
            </summary>
            <value>The related collection internal.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase`1.ListAction">
            <summary>
            Enum for usage with UpdateIndices.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView">
            <summary>
            General interface to access common properties of an EntityView(Of TEntity) without knowing the type of TEntity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Determines whether this entity view contains the entity passed in. This method returns false if the entity is outside the filter, but in the related
            entity collection, as it's then not contained in the entity view.
            </summary>
            <param name="value">The entity to check</param>
            <returns>True if the entity is present, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Determines the index of the entity passed in in the entity view in filtered and sorted state.
            </summary>
            <param name="value">The entity to get the index of.</param>
            <returns>Index of the entity in this entityview</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.ToEntityCollection">
            <summary>
            Copies all entities in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <returns>New collection with all entities in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.ToEntityCollection(System.Int32)">
            <summary>
            Copies all entities starting at startIndex in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <param name="startIndex">The start index for the interval to copy to the entity collection</param>
            <returns>
            New collection with all entities in this view
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the project does with the data is up to the projector.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the project does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the project does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.ListChanged">
            <summary>
            Event which is fired when the entity collection related to this entityview is changed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.Sorter">
            <summary>
            Gets or sets the sorter for this entity view. Setting this property will re-sort the view and will reset the view in databinding scenario's.
            </summary>
            <value>The sort expression to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.Filter">
            <summary>
            Gets or sets the filter to use for this entity view.
            </summary>
            <value>The filter to use</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.Count">
            <summary>
            Gets the count of the view.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> at the specified index in the view
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.AllowNew">
            <summary>
            Gets/sets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>.
            </summary>
            <value></value>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>; otherwise, false.</returns>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.AllowEdit">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"></see> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"></see>.
            </summary>
            <value></value>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.AllowRemove">
            <summary>
            Gets / sets whether you can update items in the list.
            </summary>
            <value></value>
            <returns>true if you can update the items in the list; otherwise, false.</returns>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.RelatedCollection">
            <summary>
            Gets the related collection set for this view.
            </summary>
            <value>The related collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView.DataChangeAction">
            <summary>
            Gets or sets the data change action which specifies what to do when the data in the related collection of an entity view changes. A change in 
            data can be: entity added or changed. If an entity is removed from the underlying collection, the entity is simply removed from the entity 
            view, as the view doesn't contain any data by itself.
            </summary>
            <value>The data change action.</value>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0})">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="sorter">The sorter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
            <param name="sorter">The sorter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
            <param name="sorter">The sorter to apply</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},System.Predicate{`0})">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},System.Predicate{`0},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
            <param name="sorter">The sorter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},System.Predicate{`0},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter lambda to apply</param>
            <param name="sorter">The sorter to apply</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.ToEntityCollection">
            <summary>
            Copies all entities in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <returns>New collection with all entities in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.ToEntityCollection(System.Int32)">
            <summary>
            Copies all entities starting at startIndex in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <param name="startIndex">The start index for the interval to copy to the entity collection</param>
            <returns>
            New collection with all entities in this view
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the projector does with the data is up to the projector.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the projector does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the projector does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.GetEntityFieldPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor}@,System.Collections.Generic.Dictionary{System.String,System.ComponentModel.PropertyDescriptor}@)">
            <summary>
            Gets the entity field property descriptors for the dummy instance passed in.
            </summary>
            <param name="dummyInstance">The dummy instance.</param>
            <param name="instanceProperties">The instance properties.</param>
            <param name="namesAdded">The names added by this routine</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.CreateDummyInstance">
            <summary>
            Creates a dummy instance for the related entity collection of this view. This is done using the entityfactory of that entitycollection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.GetSortProperty(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Gets the property descriptor for the first sortclause. 
            </summary>
            <param name="appliedSorter">The applied sorter on this view..</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#ToEntityCollection">
            <summary>
            Copies all entities in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <returns>New collection with all entities in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#ToEntityCollection(System.Int32)">
            <summary>
            Copies all entities starting at startIndex in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <param name="startIndex">The start index for the interval to copy to the entity collection</param>
            <returns>
            New collection with all entities in this view
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set.
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set.
            Data which is an object references is not copied by value, but is copied by reference.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set.
            Data which is an object references is not copied by value, but is copied by reference.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Determines whether this entity view contains the entity passed in. This method returns false if the entity is outside the filter, but in the related
            entity collection, as it's then not contained in the entity view.
            </summary>
            <param name="value">The entity to check</param>
            <returns>True if the entity is present, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Determines the index of the entity passed in in the entity view in filtered and sorted state.
            </summary>
            <param name="value">The entity to get the index of.</param>
            <returns>Index of the entity in this entityview</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> at the specified index in the view
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView#RelatedCollection">
            <summary>
            Gets the related collection set for this view.
            </summary>
            <value>The related collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityView`1.RelatedCollection">
            <summary>
            Gets the related collection set for this view.
            </summary>
            <value>The related collection.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1">
            <summary>
            EntityView2 provides 'view' capabilities for an entity collection. This class supports filtering and sorting in-memory,
            using type safe objects. Binding an entity collection to a grid or other complex databinding control will actually make the control
            bind to an instance of this class.
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2">
            <summary>
            General interface to access common properties of an EntityView(Of TEntity) without knowing the type of TEntity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Determines whether this entity view contains the entity passed in. This method returns false if the entity is outside the filter, but in the related
            entity collection, as it's then not contained in the entity view.
            </summary>
            <param name="value">The entity to check</param>
            <returns>True if the entity is present, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Determines the index of the entity passed in in the entity view in filtered and sorted state.
            </summary>
            <param name="value">The entity to get the index of.</param>
            <returns>Index of the entity in this entityview</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.ToEntityCollection">
            <summary>
            Copies all entities in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <returns>New collection with all entities in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.ToEntityCollection(System.Int32)">
            <summary>
            Copies all entities starting at startIndex in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <param name="startIndex">The start index for the interval to copy to the entity collection</param>
            <returns>
            New collection with all entities in this view
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the project does with the data is up to the projector.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the project does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the project does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.ListChanged">
            <summary>
            Event which is fired when the entity collection related to this entityview is changed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.Sorter">
            <summary>
            Gets or sets the sorter for this entity view. Setting this property will re-sort the view and will reset the view in databinding scenario's.
            </summary>
            <value>The sort expression to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.Filter">
            <summary>
            Gets or sets the filter to use for this entity view.
            </summary>
            <value>The filter to use</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.Count">
            <summary>
            Gets the count of the view.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> at the specified index in the view
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.AllowNew">
            <summary>
            Gets/sets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>.
            </summary>
            <value></value>
            <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew"></see>; otherwise, false.</returns>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.AllowEdit">
            <summary>
            Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)"></see> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)"></see>.
            </summary>
            <value></value>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.AllowRemove">
            <summary>
            Gets / sets whether you can update items in the list.
            </summary>
            <value></value>
            <returns>true if you can update the items in the list; otherwise, false.</returns>
            <remarks>if the related collection is set to readonly, this operation is a no-op</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.RelatedCollection">
            <summary>
            Gets the related collection set for this view.
            </summary>
            <value>The related collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityView2.DataChangeAction">
            <summary>
            Gets or sets the data change action which specifies what to do when the data in the related collection of an entity view changes. A change in 
            data can be: entity added or changed. If an entity is removed from the underlying collection, the entity is simply removed from the entity 
            view, as the view doesn't contain any data by itself.
            </summary>
            <value>The data change action.</value>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0})">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="sorter">The sorter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
            <param name="sorter">The sorter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
            <param name="sorter">The sorter to apply</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},System.Predicate{`0})">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},System.Predicate{`0},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter to apply</param>
            <param name="sorter">The sorter to apply</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CollectionCore{`0},System.Predicate{`0},SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.PostCollectionChangeAction)">
            <summary>
            CTor
            </summary>
            <param name="relatedCollection">entity collection which is the data-container for the data viewed through this view.</param>
            <param name="filter">The filter lambda to apply</param>
            <param name="sorter">The sorter to apply</param>
            <param name="dataChangeAction">The data change action to take if data in the related collection changes.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.ToEntityCollection">
            <summary>
            Copies all entities in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <returns>New collection with all entities in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.ToEntityCollection(System.Int32)">
            <summary>
            Copies all entities starting at startIndex in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <param name="startIndex">The start index for the interval to copy to the entity collection</param>
            <returns>
            New collection with all entities in this view
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},System.Data.DataTable,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a datatable using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination datatable which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set. 
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the projector does with the data is up to the projector.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the projector does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityDataProjector,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in a collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="projector">The projector engine which will produce new objects in the returned list from the projection results per entity.
            The data is offered to the projector on a per-row projection basis, what the projector does with the data is up to the projector.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.GetEntityFieldPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor}@,System.Collections.Generic.Dictionary{System.String,System.ComponentModel.PropertyDescriptor}@)">
            <summary>
            Gets the entity field property descriptors for the dummy instance passed in.
            </summary>
            <param name="dummyInstance">The dummy instance.</param>
            <param name="instanceProperties">The instance properties.</param>
            <param name="namesAdded">The names added by this routine</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.CreateDummyInstance">
            <summary>
            Creates a dummy instance for the related entity collection of this view. This is done using the entityfactory of that entitycollection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.GetSortProperty(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Gets the property descriptor for the first sortclause. 
            </summary>
            <param name="appliedSorter">The applied sorter on this view..</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#ToEntityCollection">
            <summary>
            Copies all entities in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <returns>New collection with all entities in this view</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#ToEntityCollection(System.Int32)">
            <summary>
            Copies all entities starting at startIndex in this view to a new entity collection and returns that collection. The returned collection is of
            the same type as the related collection. Entities aren't copied, just references to the entities.
            </summary>
            <param name="startIndex">The start index for the interval to copy to the entity collection</param>
            <returns>
            New collection with all entities in this view
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set.
            Data which is an object references is not copied by value, but is copied by reference.</param>
            <remarks>Doesn't perform distinct filtering</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set.
            Data which is an object references is not copied by value, but is copied by reference.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#CreateProjection(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Projects the data in the view onto a new set, stored in an entity collection  using the property projector objects to produce the actual data.
            </summary>
            <param name="propertyProjectors">The property projector objects to produce the data for the new set.</param>
            <param name="allowDuplicates">if set to false, it will perform distinct filtering on all values in the projection result.</param>
            <param name="filter">Filter to apply on every entity in this view. If the filter resolves to true, the entity is used for projection</param>
            <param name="destination">The destination entity collection which will contain the data from this view and which forms a new set.
            Data which is an object references is not copied by value, but is copied by reference.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Determines whether this entity view contains the entity passed in. This method returns false if the entity is outside the filter, but in the related
            entity collection, as it's then not contained in the entity view.
            </summary>
            <param name="value">The entity to check</param>
            <returns>True if the entity is present, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Determines the index of the entity passed in in the entity view in filtered and sorted state.
            </summary>
            <param name="value">The entity to get the index of.</param>
            <returns>Index of the entity in this entityview</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> at the specified index in the view
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.SD#LLBLGen#Pro#ORMSupportClasses#IEntityView2#RelatedCollection">
            <summary>
            Gets the related collection set for this view.
            </summary>
            <value>The related collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityView2`1.RelatedCollection">
            <summary>
            Gets the related collection set for this view.
            </summary>
            <value>The related collection.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1">
            <summary>
            Enumerator for entityview objects. 
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.EntityViewBase{`0})">
            <summary>
            CTor
            </summary>
            <param name="enumeratedView"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityViewEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList">
            <summary>
            Class which is used for specifying fields to exclude or include in a fetch. 
            If an instance of this list is passed to a fetch method which accepts an ExcludeIncludeFieldsList, the fields in this list
            are either excluded from the query (if ExcludeContainedFields is true (default)), or are used to exclude the rest of the 
            fields in the query except the fields in this list. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList"/> class.
            </summary>
            <param name="excludeContainedFields">if set to <c>true</c> [exclude contained fields].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.#ctor(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to be added to this list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList"/> class.
            </summary>
            <param name="excludeContainedFields">if set to <c>true</c> [exclude contained fields].</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.BuildFieldsToExcludeList(System.Collections.IList)">
            <summary>
            Builds the fields to exclude list to start with from the fields passed in combined with the fields contained in this collection based on
            the ExcludeContainedFields setting
            </summary>
            <param name="fields">The fields.</param>
            <returns>list of fields to exclude from the passed in set of fields. This list isn't checked for illegal excluded fields, so has to be
            filtered after this call.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.SetFieldsToDefiningEntityTypeVersion(System.Collections.IEnumerable)">
            <summary>
            Sets the fields to defining entity type version, found in the fields passed in. If a field in this object is actually an inherited variant
            (e.g. ActualContainingObjectName is different from ContainingObjectName), the real version is searched from the fields: from front to back, the
            first version encountered is selected)
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList.ExcludeContainedFields">
            <summary>
            Gets / sets the flag ExcludeContainedFields, which should be set to true if the fields in this list should be excluded
            and which should be false if the fields should be used as the fields to fetch and exclude the rest. <br/>
            Default is true.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList">
            <summary>
            Helper class which is a derived class from ExcludeIncludeFieldsList containing just fields to include
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList.#ctor(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to include.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to include.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IncludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to include.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList">
            <summary>
            Helper class which is a derived class from ExcludeIncludeFieldsList containing just fields to exclude
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList.#ctor(System.Collections.Generic.IEnumerable{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to exclude.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to exclude.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ExcludeFieldsList"/> class.
            </summary>
            <param name="fields">The fields to exclude.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Expression">
            <summary>
            Expression class which defines field expressions which are
            applied to fields in a select list, in update queries or in field predicates.
            <br/>
            Valid expressions:
            <list type="ul">
            <item>Field</item>
            <item>Field ExOp Field</item>
            <item>Field ExOp Value</item>
            <item>Field ExOp Expression</item>
            <item>Value ExOp Field</item>
            <item>Value ExOp Expression</item>
            <item>Expression ExOp Field</item>
            <item>Expression ExOp Value</item>
            </list>
            Use one of the constructors to create the particular expression object.
            </summary>
            <remarks>Values are transformed into parameters. The type of the parameter is determined of the field in the expression.
            <br/>
            You can also use EntityProperty instances instead of EntityField(2) instances, though the Expression instance then has to be used solely for
            in-memory actions.
            </remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionInterpret">
            <summary>
            Interface which is used internally on an Expression class to make the expression interpret itself on the passed in entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionInterpret.GetValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets the implementing expression class on the passed in entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The value the expression resolves to based on the entity passed in. Returns DBNull.Value if it resolves to null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor">
            <summary>
            CTor
            </summary>
            <remarks>Empty constructor, do not use, use one of the constructor overloads to create an expression instance.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for (expression) operator (expression) expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an IExpression implementation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for value operator (expression) expressions
            </summary>
            <param name="leftOperand">the left operand, which is a value</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Object)">
            <summary>
            CTor for (expression) operator value expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            CTor for single field expressions. 
            </summary>
            <param name="field">the only element in this expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            CTor for field operator field expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Object)">
            <summary>
            CTor for field operator value expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for field operator (expression) expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an IExpression implementation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            CTor for value operator field expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is a value</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            CTor for (expression) operator field expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.Expression"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.ConvertObjectOperandToExpressionElement(System.Object)">
            <summary>
            Converts the object operand to expression element.
            </summary>
            <param name="operand">The operand.</param>
            <returns>the operand as a IExpressionElement.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.PerformGetValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Produces the value for this expression for the entity passed in. This routine is used by IExpressionInterpret.GetValue and is used
            to evaluate an expression at runtime for in-memory filtering/sorting.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The value the expression resolves to based on the entity passed in. Returns DBNull.Value if it resolves to null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.OperandToValue(SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Resolves the passed in operand to its value at runtime. 
            </summary>
            <param name="operand">The operand to resolve.</param>
            <param name="entity">The entity to resolve the operand on</param>
            <returns>the value the operand resolves to</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.OperandToText(System.Text.StringBuilder@,SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement,System.Boolean)">
            <summary>
            Converts the passed in operand to text, appended to queryText. parameters created are added to _selectParameters.
            </summary>
            <param name="queryText">The query text.</param>
            <param name="operand">The operand.</param>
            <param name="inHavingClause">if set to <see langword="true"/> [in having clause].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.InitClass">
            <summary>
            inits members
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value + expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents  expression * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value * expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value - expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value / expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents  expression * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.SD#LLBLGen#Pro#ORMSupportClasses#IExpressionInterpret#GetValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets the implementing expression class on the passed in entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            returns the value the expression resolves to for the entity passed in
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement`1">
            <summary>
            ExpressionElement class, definition for elements contained in an expression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement">
            <summary>
            Interface definition for elements contained in an expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement.Type">
            <summary>
            The type of the element 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement.Contents">
            <summary>
            The contents of the element
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement`1.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement`1.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType,`0)">
            <summary>
            CTor
            </summary>
            <param name="typeOfContents">type of the contents contained in this element</param>
            <param name="contents">the contents of this element</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement`1.Type">
            <summary>
            The type of the element 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement`1.Contents">
            <summary>
            The contents of the element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement`1.SD#LLBLGen#Pro#ORMSupportClasses#IExpressionElement#Contents">
            <summary>
            The contents of the element
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement">
            <summary>
            ExpressionFieldElement class, definition for field elements contained in an expression
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionFieldElement">
            <summary>
            Interface definition for field elements contained in an expression
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionFieldElement.PersistenceInfo">
            <summary>
            The persistence info for the field contained in the field.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            CTor
            </summary>
            <param name="typeOfContents">type of the contents contained in this element</param>
            <param name="contents">the contents of this element</param>
            <param name="persistenceInfo">the persistence info for the field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement.PersistenceInfo">
            <summary>
            The persistence info for the field contained in the field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer">
            <summary>
            The de-serializer class which takes care of the fast deserialization of data serialized with the FastSerializer class when 
            SerializationHelper.Optimization is set to 'Fast'
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer"/> class.
            </summary>
            <param name="reader">The reader to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.Deserialize(System.Byte[],System.Object)">
            <summary>
            Deserializes the specified serialized data.
            </summary>
            <param name="serializedData">The serialized data.</param>
            <param name="root">The root.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2)">
            <summary>
            Deserializes the specified unit of work.
            </summary>
            <param name="unitOfWork">The unit of work.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2)">
            <summary>
            Deserializes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Deserializes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore)">
            <summary>
            Deserializes the specified typed list.
            </summary>
            <param name="typedList">The typed list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable)">
            <summary>
            Deserializes the specified typed view.
            </summary>
            <param name="typedView">The typed view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadCollection(SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2,System.Collections.Specialized.BitVector32)">
            <summary>
            Reads the collection from the set reader
            </summary>
            <param name="collection">The collection.</param>
            <param name="serializationFlags">The serialization flags.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadUnreferencedEntity(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Reads the unreferenced entity from the set reader.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadUnreferencedEntity(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2,System.Collections.Specialized.BitVector32)">
            <summary>
            Reads the unreferenced entity from the set reader.
            </summary>
            <param name="entity">The entity.</param>
            <param name="serializationFlags">The serialization flags.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadEntityMemberCollections(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Reads the entity member collections from the set reader.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadUnitOfWorkElements(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2,System.Boolean)">
            <summary>
            Reads the unit of work elements and will rebuild the unitofwork passed in with the data read
            </summary>
            <param name="uow">The uow to rebuild.</param>
            <param name="forSave">true if the elements to read are save elements, false for delete elements</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadUnitOfWorkCollectionElements(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2,System.Boolean)">
            <summary>
            Reads the unit of work collection elements and will rebuild the unitofwork passed in with the data read
            </summary>
            <param name="uow">The uow to rebuild.</param>
            <param name="forSave">true if the elements to read are save elements, false for delete elements</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadReferencedEntities(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Reads the referenced entities from the set reader.
            </summary>
            <param name="rootEntity">The root entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadReferencedEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Reads the referenced entity info from the set reader.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDeserializer.ReadOneWayRelationInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Reads the one way relation info.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2">
            <summary>
            Utility class which can be used instead of a normal Dictionary class when the Dictionary class is serialized. This class is faster and 
            has much less overhead than the normal dictionary class, as it doesn't use generic types. Has no additional value for CF.NET
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            CTor
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization CTor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and returns the data needed to serialize the <see cref="T:System.Collections.Generic.Dictionary`2"></see> instance.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2"></see> instance.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2"></see> instance.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"></see> interface and raises the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">The source of the deserialization event.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object associated with the current <see cref="T:System.Collections.Generic.Dictionary`2"></see> instance is invalid.</exception>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer">
            <summary>
            The serializer class which takes care of the fast serialization when SerializationHelper.Optimization is set to 'Fast'
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer"/> class.
            </summary>
            <param name="writer">The writer to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified root.
            </summary>
            <param name="root">The root.</param>
            <returns>the writer used.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2)">
            <summary>
            Serializes the specified unit of work.
            </summary>
            <param name="unitOfWork">The unit of work.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2)">
            <summary>
            Serializes the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteCollection(SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializableEntityCollection2,System.Collections.Specialized.BitVector32)">
            <summary>
            Writes the collection to the writer. 
            </summary>
            <param name="collection">The collection.</param>
            <param name="serializationFlags">The serialization flags.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Serializes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore)">
            <summary>
            Serializes the specified typed list.
            </summary>
            <param name="typedList">The typed list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable)">
            <summary>
            Serializes the specified typed view.
            </summary>
            <param name="typedView">The typed view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteUnreferencedEntity(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Writes the unreferenced entity to the writer.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteUnreferencedEntity(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2,System.Collections.Specialized.BitVector32)">
            <summary>
            Writes the unreferenced entity to the writer. 
            </summary>
            <param name="entity">The entity.</param>
            <param name="serializationFlags">The serialization flags.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteReferencedEntities(System.Object)">
            <summary>
            Writes the referenced entities to the writer
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteUnitOfWorkCollectionElements(System.Collections.Generic.IList{SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2})">
            <summary>
            Writes the unit of work collection elements.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteUnitOfWorkElements(System.Collections.Generic.IList{SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2})">
            <summary>
            Writes the unit of work elements.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteEntityMemberCollections(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Writes the entity member collections to the writer
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteReferencedEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Writes the referenced entity info to the writer
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializer.WriteOneWayRelationInfo(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Writes the one way relation info.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogate">
            <summary>
            Class to act as a surrogate for the fast serializer.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogate.ConstructFromDefaultConstructor(System.Object)">
            <summary>
            Constructs a new instance of the same type as the object passed in, using the default constructor.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the provided <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Populates the object using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see>.
            </summary>
            <param name="obj">The object to populate.</param>
            <param name="info">The information to populate the object.</param>
            <param name="context">The source from which the object is deserialized.</param>
            <param name="selector">The surrogate selector where the search for a compatible surrogate begins.</param>
            <returns>The populated deserialized object.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogateSelector">
            <summary>
            Class to select the proper surrogate for the fast serializer
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Chains the selector.
            </summary>
            <param name="nextSelector">The next selector.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogateSelector.GetNextSelector">
            <summary>
            Returns the next surrogate selector in the chain.
            </summary>
            <returns>
            The next surrogate selector in the chain or null.
            </returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FastSerializerSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <summary>
            Finds the surrogate that represents the specified object's type, starting with the specified surrogate selector for the specified serialization context.
            </summary>
            <param name="type">The <see cref="T:System.Type"></see> of object (class) that needs a surrogate.</param>
            <param name="context">The source or destination context for the current serialization.</param>
            <param name="selector">When this method returns, contains a <see cref="T:System.Runtime.Serialization.ISurrogateSelector"></see> that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.</param>
            <returns>
            The appropriate surrogate for the given type in the given context.
            </returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket">
            <summary>
            Small struct which contains the state of a field for transaction state caching.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket.#ctor(System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="currentValue">The current value.</param>
            <param name="dbValue">The db value.</param>
            <param name="isChanged">value of the IsChanged flag</param>
            <param name="isNull">value of the IsNull flag</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket.IsChanged">
            <summary>
            Gets / sets IsChanged flag
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket.IsNull">
            <summary>
            Gets / sets IsNull flag
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket.CurrentValue">
            <summary>
            Gets / sets currentValue
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldStateBucket.DbValue">
            <summary>
            Gets / sets dbValue
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities">
            <summary>
            Various field related routines
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CreateDefaultValueForType(System.Type)">
            <summary>
            Creates the default value for the type specified
            </summary>
            <param name="typeToCreateValueFor">The type to create value for.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CalculateHashCodeForValue(System.Object)">
            <summary>
            Calculates the hashcode for value passed in. If the value is null, the hashcode of DBNull.Value is used. If the value is an array,
            the hashcode is calculated from the individual values: if the length is larger than 65535, or not a byte array, each value's hashcode is xorred with the
            previous one. If the value is a byte array and the length is equal or smaller than 65535, all values are added, multiplied with the index.
            </summary>
            <param name="value">The value which hashcode has to be calculated.</param>
            <returns>the hashcode for the value passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CalculateHashCodeForValue(System.Object,System.Boolean)">
            <summary>
            Calculates the hashcode for value passed in. If the value is null, the hashcode of DBNull.Value is used. If the value is an array,
            the hashcode is calculated from the individual values: if the length is larger than 65535, or not a byte array, each value's hashcode is xorred with the
            previous one up to 65535 values. If the value is a byte array and the length is equal or smaller than 65535, all values are added, multiplied with the index.
            If the value is a string, the invariantculture hashcode is retrieved if the length is smaller than 65535. If the length is 65535 or higher, the 
            string's hashcode is retrieved using the normal GetHashCode method.
            </summary>
            <param name="value">The value which hashcode has to be calculated.</param>
            <param name="caseSensitiveStringHashCode">if set to true, it will produce case sensitive hashcodes for strings, if value is a string.</param>
            <returns>the hashcode for the value passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.GetNamesOfChangedFields(System.Collections.IList,System.Collections.IList)">
            <summary>
            Gets the names of the changed fields. Assumes field sets A and B have the same fields and are equal in size
            </summary>
            <param name="fieldsA">fields set A. Has to contain IEntityFieldCore typed objects</param>
            <param name="fieldsB">fields set B. Has to contain IEntityFieldCore typed objects</param>
            <returns>the names of the fields which have a different value in A than in B</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.DetermineRealFullTypeName(System.Type)">
            <summary>
            Determines the name of the real full type of the type passed in, which can be a generic type. If so, the generic type parameter will be used. 
            </summary>
            <param name="toConvert">To convert.</param>
            <returns>full name of type specified. if toConvert is a Nullable(Of T), the type of T will be returned</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.DetermineRealFullTypeName(System.Type,System.Boolean)">
            <summary>
            Determines the name of the real full type of the type passed in, which can be a generic type. If so, the generic type parameter will be used.
            </summary>
            <param name="toConvert">To convert.</param>
            <param name="unWrapNullableType">if set to true, it will unwrap the nullable type toConvert, if toConvert is a nullable type (so it will return T)</param>
            <returns>
            full name of type specified. if toConvert is a Nullable(Of T), the type of T will be returned, if unwrapNullableType is true
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.DetermineRealType(System.Type,System.Boolean)">
            <summary>
            Determines the real type of the passed in type. It will unwrap nullable types if unWrapNullableType is true.
            </summary>
            <param name="toConvert">To convert.</param>
            <param name="unWrapNullableType">if set to <c>true</c> [un wrap nullable type].</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.GetEntityFieldStates(System.Collections.IList)">
            <summary>
            Gets the entity field states of the fields in the IList passed in.
            </summary>
            <param name="fields">The fields.</param>
            <returns>the fieldstates of every field in the enumerable passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CheckIfCurrentFieldValueIsNull(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Boolean)">
            <summary>
            Checks if the current value of the field on the index specified is null / not defined.
            </summary>
            <param name="field">The field.</param>
            <param name="entityIsNew">flag whether the containing entity is new (true) or not(false).</param>
            <returns>
            true if the field's value isn't defined yet, false otherwise
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.DetermineIfFieldShouldBeSet(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Boolean,System.Object)">
            <summary>
            Determines if the field should be set to the value passed in.
            </summary>
            <param name="fieldToSet">Field to set.</param>
            <param name="entityIsNew"><see langword="true"/> if [entity is new]; otherwise, <see langword="false"/>.</param>
            <param name="value">Value.</param>
            <returns>true if the field should be set with the value, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.ValuesAreEqual(System.Object,System.Object)">
            <summary>
            Compares the two values passed in and checks if they're value-wise the same. This extends 'Equals' in the sense that if the values are
            arrays it considers them the same if the values of the arrays are the same as well and the length is the same. 
            </summary>
            <remarks>It assumes the types of value1 and value2 are the same</remarks>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns>true if the values should be considered equal. If value1 or value2 are null and the other isn't false is returned. If both are null,
            true is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CheckArraysAreEqual(System.Array,System.Array)">
            <summary>
            Performs a per-value compare on the arrays passed in and returns true if the arrays are of the same length and contain the same values.
            </summary>
            <param name="arr1"></param>
            <param name="arr2"></param>
            <returns>true if the arrays contain the same values and are of the same length</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.FixFirstFieldForSourceDetermination(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition})">
            <summary>
            Fixes the first field for source determination in each derived table passed in.
            <para>
            If there's no source defined in the query, i.e. the first field in the fieldscollection isn't a mapped field but a field with an expression and
            there are no relations, it means that the DQE won't be able to determine which table /view to target.
            This routine solves thatfind the first field in the expression of the field, clone that one and use that field as the field to use at position 0
            instead of the current field.
            </para>
            </summary>
            <param name="derivedTables">The derived tables.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.FixFirstFieldForSourceDetermination(System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Fixes the first field for source determination.
            <para>
            If there's no source defined in the query, i.e. the first field in the fieldscollection isn't a mapped field but a field with an expression and
            there are no relations, it means that the DQE won't be able to determine which table /view to target.
            This routine solves thatfind the first field in the expression of the field, clone that one and use that field as the field to use at position 0
            instead of the current field.
            </para>
            </summary>
            <param name="fieldsToFix">The fields to fix.</param>
            <param name="relations">The relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.FixFirstFieldForSourceDetermination(System.Collections.IList)">
            <summary>
            Fixes the first field for source determination.
            <para>
            If there's no source defined in the query, i.e. the first field in the fieldscollection isn't a mapped field but a field with an expression and
            there are no relations, it means that the DQE won't be able to determine which table /view to target.
            This routine solves that by finding the first field in the expression of the field or in the rest of the sourcefields, clone that one and use that field 
            as the field to use at position 0 instead of the current field.
            </para>
            </summary>
            <param name="sourceFields">The source fields.</param>
            <returns>
            The field which should be used instead of the passed in sourceField
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.GetEntityFieldPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor}@,System.Collections.Generic.Dictionary{System.String,System.ComponentModel.PropertyDescriptor}@)">
            <summary>
            Gets the entity field property descriptors for the dummy instance passed in.
            </summary>
            <param name="dummyInstance">The dummy instance.</param>
            <param name="instanceProperties">The instance properties.</param>
            <param name="namesAdded">The names added by this routine</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.GetEntityFieldPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor}@,System.Collections.Generic.Dictionary{System.String,System.ComponentModel.PropertyDescriptor}@)">
            <summary>
            Gets the entity field property descriptors for the dummy instance passed in.
            </summary>
            <param name="dummyInstance">The dummy instance.</param>
            <param name="instanceProperties">The instance properties.</param>
            <param name="namesAdded">The names added by this routine</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CreateFullTypeName(System.Type)">
            <summary>
            Creates a full type name, of the format: Type.Fullname, assembly name. 
            If the assembly is signed, the full assembly name is added, otherwise just the assembly name, not the version, public key token or culture.
            </summary>
            <param name="type">The type.</param>
            <returns>fulltype name. </returns>
            <remarks>Used in .NET 2.0</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CheckPrecision(System.String,System.Int32,System.String@)">
            <summary>
            Checks the precision of the value passed in as string. Assumes value is numeric.
            </summary>
            <param name="valueAsString">The value as string.</param>
            <param name="precision">The precision.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CheckPrecisionAndScale(System.String,System.Object@,SD.LLBLGen.Pro.ORMSupportClasses.ScaleOverflowCorrectionAction,System.Int32,System.Int32,System.Boolean@,System.Boolean@,System.String@)">
            <summary>
            Checks the precision and scale of the value passed in as string. Assumes value is numeric.
            </summary>
            <param name="valueAsString">The value as string.</param>
            <param name="value">The value. Will be altered if a scale overflow is detected and the scaleOverflowCorrectionActionToUse
            value dictates that the value has to be altered to make it fit the scale.</param>
            <param name="scaleOverflowCorrectionActionToUse">The scale overflow correction action to use.</param>
            <param name="precision">The precision.</param>
            <param name="scale">The scale.</param>
            <param name="precisionViolation">if set to <c>true</c> [precision violation].</param>
            <param name="scaleViolation">if set to <c>true</c> [scale violation].</param>
            <param name="exceptionMessage">The exception message.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.DetermineUniqueFieldNames(System.Collections.IList)">
            <summary>
            Determines the unique field names.
            </summary>
            <param name="fields">The fields.</param>
            <returns>Dictionary with the unique fieldnames as key.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.DetermineNumberOfPkFields(System.Collections.IList)">
            <summary>
            Determines the number of pk fields for the set of PK fields passed in. Normally this is the # of entries in the PK field collection, however in the case of
            a subtype of a targetperentity, all PK fields of the supertypes are also present in this collection and therefore this routine has to determine how
            many of these fields are really there.
            </summary>
            <param name="pkFields">The pk fields.</param>
            <returns>the # of pk fields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CreateArtificialObjectAlias(System.String)">
            <summary>
            Creates the artificial object alias for a field which is in the entity with the name specified.
            THe alias is used to make it possible to join a supertype multiple times if fields from different subtypes are in the resultset.
            The alias has the format LPAA_actualContainingObjectName. Example: LPAA_CustomerEntity
            </summary>
            <param name="actualContainingObjectName">Name of the actual containing object.</param>
            <returns> the artificial object alias to use for the field calling this method</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CorrectScale(System.Object,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ScaleOverflowCorrectionAction)">
            <summary>
            Corrects the scale of the value passed in (can be decimal, single or double) and returns the new value with the scale corrected according to
            the scale passed in and the action specified.
            </summary>
            <param name="valueToCorrect">The value to correct.</param>
            <param name="scale">The scale.</param>
            <param name="action">The action.</param>
            <returns>returns the new value with the scale corrected according to the scale passed in and the action specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.RemoveExcludedFieldsPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Removes the excluded fields persistence infos, which are actually null in the passed in array and returns a new array without these values
            this means that the array is shrinked. So if index 3 was excluded (== null), it means that in the array returned, the persistenceinfo 
            object originally at index 4 is now at index 3 etc. 
            </summary>
            <param name="persistenceInfosForRowReader">The persistence infos for row reader.</param>
            <returns>new array, smaller or equal in size which contains only real persistence info objects, all null values have been stripped out</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.ProduceFieldAlias(System.Int32,System.Int32)">
            <summary>
            Produces the field alias in inheritance scenarios
            </summary>
            <param name="entityIndex">Index of the entity.</param>
            <param name="fieldIndex">Index of the field.</param>
            <returns>alias in the format F<i>entityIndex</i>_<i>fieldIndex</i></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.MarkSavedFieldsObjectAsFetched(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Marks the saved fields object as fetched. This means: set the state and copy over CurrentValue into DbValue for all fields.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.MarkSavedFieldsObjectAsFetched(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Marks the saved fields object as fetched. This means: set the state and copy over CurrentValue into DbValue for all fields.
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldUtilities.CopyCurrentValuesIntoDbValues(System.Collections.IEnumerable)">
            <summary>
            Copies the CurrentValue values of all fields into their DbValue properties
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping">
            <summary>
            Class which is used to define a function mapping between a .NET operator or function / method and a database function / operator.
            Mainly used for Linq support, however one could use this list also in .NET 2.0 code
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.#ctor(System.Type,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping"/> class.
            </summary>
            <param name="definingType">The defining type of the function, e.g. typeof(System.String).</param>
            <param name="functionName">Name of the .NET function or operator (in string form, e.g. "+") which equivalent should be called. Example: Concat.
            Is part of unique key for this functionmapping</param>
            <param name="parameterCount">The parameter count of the function / operator. This number has to be equal to the # of parameters of the db
            equivalent. Is part of unique key for this function mapping</param>
            <param name="dbFunctionCallPattern">The DbFunctionCall pattern to use, which is the pattern used in the DbFunctionCall object which will take care
            of the function call text in the resulting query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.#ctor(System.Type,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping"/> class.
            </summary>
            <param name="definingType">The defining type of the function, e.g. typeof(System.String).</param>
            <param name="functionName">Name of the .NET function or operator (in string form, e.g. "+") which equivalent should be called. Example: Concat.
            Is part of unique key for this functionmapping</param>
            <param name="parameterCount">The parameter count of the function / operator. This number has to be equal to the # of parameters of the db
            equivalent. Is part of unique key for this function mapping</param>
            <param name="dbFunctionCallPattern">The DbFunctionCall pattern to use, which is the pattern used in the DbFunctionCall object which will take care
            of the function call text in the resulting query.</param>
            <param name="catalogName">Name of the catalog (optional, can be empty), where the database function can be found in.</param>
            <param name="schemaName">Name of the schema (optional, can be empty), where the database function can be found in.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping"/> class.
            </summary>
            <param name="typeName">Name of the type defining the .NET function. Example: System.String.
            Is part of unique key for this function mapping.</param>
            <param name="functionName">Name of the .NET function or operator (in string form, e.g. "+") which equivalent should be called. Example: Concat.
            Is part of unique key for this functionmapping</param>
            <param name="parameterCount">The parameter count of the function / operator. This number has to be equal to the # of parameters of the db 
            equivalent. Is part of unique key for this function mapping</param>
            <param name="dbFunctionCallPattern">The DbFunctionCall pattern to use, which is the pattern used in the DbFunctionCall object which will take care
            of the function call text in the resulting query.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping"/> class.
            </summary>
            <param name="typeName">Name of the type defining the .NET function. Example: System.String.
            Is part of unique key for this function mapping.</param>
            <param name="functionName">Name of the .NET function or operator (in string form, e.g. "+") which equivalent should be called. Example: Concat.
            Is part of unique key for this functionmapping</param>
            <param name="parameterCount">The parameter count of the function / operator. This number has to be equal to the # of parameters of the db 
            equivalent. Is part of unique key for this function mapping</param>
            <param name="dbFunctionCallPattern">The DbFunctionCall pattern to use, which is the pattern used in the DbFunctionCall object which will take care
            of the function call text in the resulting query.</param>
            <param name="catalogName">Name of the catalog (optional, can be empty), where the database function can be found in.</param>
            <param name="schemaName">Name of the schema (optional, can be empty), where the database function can be found in.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.Key">
            <summary>
            Gets the key of this mapping, which is build from function name, typename and parameter count. It has the format as defined in
            FunctionMappingStore.KeyFormat: FunctionName|TypeName|ParameterCount. Example: Concat|System.String|2
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.FunctionName">
            <summary>
            Gets the name of the .NET function or operator (in string form, e.g. "+") which equivalent should be called. Example: Concat.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.DbFunctionCallPattern">
            <summary>
            Gets the DbFunctionCall pattern to use, which is the pattern used in the DbFunctionCall object which will take care
            of the function call text in the resulting query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.TypeName">
            <summary>
            Gets the name of the type defining the .NET function. Example: System.String.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.CatalogName">
            <summary>
            Gets the name of the catalog (optional, can be empty), where the database function can be found in.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.SchemaName">
            <summary>
            Gets the name of the schema (optional, can be empty), where the database function can be found in.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping.ParameterCount">
            <summary>
            Gets the parameter count of the function / operator. This number has to be equal to the # of parameters of the db 
            equivalent.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore">
            <summary>
            Class which is used to store function mapping related data.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.KeyFormat">
            <summary>
            Format specification of functionmapping key string.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.CreateKeyValue(System.Reflection.MethodInfo)">
            <summary>
            Creates the key value for the method's methodInfo specified
            </summary>
            <param name="method">The method.</param>
            <returns>The key to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.CreateKeyValue(System.Reflection.MemberInfo)">
            <summary>
            Creates the key value for the property's memberinfo specified
            </summary>
            <param name="property">The property.</param>
            <returns>the key to use</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.CreateKeyValue(System.String,System.String,System.Int32)">
            <summary>
            Creates the key value for the function specified.
            </summary>
            <param name="functionName">Name of the .NET function.</param>
            <param name="typeName">Name of the type which defines the .NET function. Example: System.String.</param>
            <param name="parameterCount">The parameter count of the .NET function.</param>
            <returns>
            the key to use.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.CreateKeyValue(System.String,System.Type,System.Int32)">
            <summary>
            Creates the key value for the function specified.
            </summary>
            <param name="functionName">Name of the .NET function.</param>
            <param name="definingType">the type which defines the .NET function</param>
            <param name="parameterCount">The parameter count of the .NET function.</param>
            <returns>
            The key to use
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.Add(SD.LLBLGen.Pro.ORMSupportClasses.FunctionMapping)">
            <summary>
            Adds the specified functionmapping to the container
            </summary>
            <param name="toAdd">the mapping to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FunctionMappingStore.FindMapping(System.String)">
            <summary>
            Finds the mapping with the key specified.
            </summary>
            <param name="key">The key.</param>
            <returns>The function mapping stored for the function with the key specified, or null if not found</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource">
            <summary>
            General data source control which can be used in ASP.NET projects to perform design time databinding and runtime databinding. 
            </summary>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase">
            <summary>
            General datasource control base class for the selfservicing/adapter datasource controls for ASP.NET
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.DefaultDataSourceViewName">
            <summary>
            The default datasource view name used by the datasourceview object returned by this data source control.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.Select">
            <summary>
            Selects data from the underlying storage using the parameters set. You don't need to call this method if you've setup databinding using DataSourceID
            values.
            </summary>
            <returns>EntityView/EntityView2 object with the data requested.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnElementsFetched">
            <summary>
            Called when the datasource control has fetched elements. Raises ElementsFetched. Has no effect if LivePersistence is set to false.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnEntityInserting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the entity passed in is about the be inserted. Raises 'EntityInserting'
            </summary>
            <param name="involvedEntity">The involved entity.</param>
            <returns>the value for 'Cancel'</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnEntityUpdating(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the entity passed in is about the be updated. Raises 'EntityUpdating'
            </summary>
            <param name="involvedEntity">The involved entity.</param>
            <returns>the value for 'Cancel'</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnEntityDeleting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the entity passed in is about the be deleted. Raises 'EntityDeleting'
            </summary>
            <param name="involvedEntity">The involved entity.</param>
            <returns>the value for 'Cancel'</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnEntityInserted(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the entity passed in has been successfully inserted. Raises 'EntityInserted'. Has no effect if LivePersistence is set to false.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnEntityUpdated(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the entity passed in has been successfully updated. Raises 'EntityUpdated'. Has no effect if LivePersistence is set to false.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnEntityDeleted(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the entity passed in has been successfully deleted. Raises 'EntityDeleted'. Has no effect if LivePersistence is set to false.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"></see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnPageLoadComplete(System.Object,System.EventArgs)">
            <summary>
            Called when [page load complete].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.SaveControlState">
            <summary>
            Saves any server control state changes that have occurred since the time the page was posted back to the server.
            </summary>
            <returns>
            Returns the server control's current state. If there is no state associated with the control, this method returns null.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.LoadControlState(System.Object)">
            <summary>
            Restores control-state information from a previous page request that was saved by the <see cref="M:System.Web.UI.Control.SaveControlState"></see> method.
            </summary>
            <param name="savedState">An <see cref="T:System.Object"></see> that represents the control state to be restored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.LoadViewState(System.Object)">
            <summary>
            Restores view-state information from a previous page request that was saved by the <see cref="M:System.Web.UI.Control.SaveViewState"></see> method.
            </summary>
            <param name="savedState">An <see cref="T:System.Object"></see> that represents the control state to be restored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.SaveViewState">
            <summary>
            Saves any server control view-state changes that have occurred since the time the page was posted back to the server.
            </summary>
            <returns>
            Returns the server control's current view state. If there is no view state associated with the control, this method returns null.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.GetView(System.String)">
            <summary>
            Gets the named data source view associated with the data source control.
            </summary>
            <param name="viewName">The name of the <see cref="T:System.Web.UI.DataSourceView"></see> to retrieve. In data source controls that support only one view, such as <see cref="T:System.Web.UI.WebControls.SqlDataSource"></see>, this parameter is ignored.</param>
            <returns>
            Returns the named <see cref="T:System.Web.UI.DataSourceView"></see> associated with the <see cref="T:System.Web.UI.DataSourceControl"></see>.
            </returns>
            <remarks>viewName is ignored. Just one view is supported.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.GetViewNames">
            <summary>
            Gets a collection of names, representing the list of <see cref="T:System.Web.UI.DataSourceView"></see> objects associated with the <see cref="T:System.Web.UI.DataSourceControl"></see> control.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> that contains the names of the <see cref="T:System.Web.UI.DataSourceView"></see> objects associated with the <see cref="T:System.Web.UI.DataSourceControl"></see>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.TrackViewState">
            <summary>
            Causes tracking of view-state changes to the server control so they can be stored in the server control's <see cref="T:System.Web.UI.StateBag"></see> object. This object is accessible through the <see cref="P:System.Web.UI.Control.ViewState"></see> property.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.CreateStateDataObject">
            <summary>
            Creates the state data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.GetView">
            <summary>
            Gets the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.OnDataSourceUnload(System.Object,System.EventArgs)">
            <summary>
            Called when [data source unload].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.InitClass">
            <summary>
            Inits the class
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.GetContext">
            <summary>
            Gets the context.
            </summary>
            <returns></returns>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EntityInserting">
            <summary>
            Event which is raised when this datasource control is about to perform the Insert action on an entity. If LivePersistence is set to false,
            this event is raised right before the entity to insert is added to the unitofwork(2) object. Cancelling this event will abort the insert action and
            the entity won't be inserted. The entity to insert is part of the event args.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EntityUpdating">
            <summary>
            Event which is raised when this datasource control is about to perform the update action on an entity. If LivePersistence is set to false,
            this event is raised right before the entity to update is added to the unitofwork(2) object. Cancelling this event will abort the update action and
            the entity won't be inserted. The entity to update is part of the event args.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EntityDeleting">
            <summary>
            Event which is raised when this datasource control is about to perform the delete action on an entity. If LivePersistence is set to false,
            this event is raised right before the entity to delete is added to the unitofwork(2) object. Cancelling this event will abort the delete action and
            the entity won't be inserted. The entity to delete is part of the event args.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EntityInserted">
            <summary>
            Event which is raised when LivePersistence is set to true and an entity was inserted successfully. The inserted entity is part of the 
            event args. 
            </summary>
            <remarks>Be aware that if you're using Adapter the entity is in general 'out-of-sync' so you can only access PK values without a problem. This
            is in general not a problem as this event is mostly used to obtain a newly inserted PK value of a new entity.</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EntityUpdated">
            <summary>
            Event which is raised when LivePersistence is set to true and an entity was updated successfully. The updated entity is part of the 
            event args. 
            </summary>
            <remarks>Be aware that if you're using Adapter the entity is in general 'out-of-sync' so you can only access PK values without a problem.</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EntityDeleted">
            <summary>
            Event which is raised when LivePersistence is set to true and an entity was deleted successfully. The deleted entity is part of the 
            event args. 
            </summary>
            <remarks>Be aware that the entity in the event args has already been deleted and therefore reading its properties directly will cause an
            exception. If you need to obtain field values, please either set the 'State' property of the Fields object to Fetched, or read the field's
            CurrentValue property directly.</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ElementsFetched">
            <summary>
            Event which is raised when LivePersistence is set to true and the datasource control has performed a fetch of elements (be it entities, a typed list or
            a typedview). Use this event to be able to perform actions when a fetch takes place. The sender of the event is the datasource control so use that 
            object to obtain the data fetched.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.SelectParameters">
            <summary>
            Parameters which are used to construct a PredicateExpression for live filtering. Hook up control properties or other parameters with the datasource
            so the datasource can filter based on values in other controls.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.UpdateParameters">
            <summary>
            Parameters which are used to construct a PredicateExpression for live filtering. Hook up control properties or other parameters with the datasource
            so the datasource can filter based on values in other controls.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.InsertParameters">
            <summary>
            Parameters which are used to construct a PredicateExpression for live filtering. Hook up control properties or other parameters with the datasource
            so the datasource can filter based on values in other controls.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.LivePersistence">
            <summary>
            Gets or sets the value for LivePersistence, a flag which is used to determine whether fetches for data changes on the data (insert/update/delete) 
            have to be propagated to the database directly (true) or have to be added to a UnitOfWork object (false). Default is true.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.MaxNumberOfItemsToReturn">
            <summary>
            Gets or sets the maximum number of items to return. Is ignored if EnablePaging is specified.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.AllowDuplicates">
            <summary>
            Gets or sets if the DataSourceControl should allow duplicate instances in the data retrieved. If DataContainerType is set to EntityCollection,
            this setting is ignored, as entitycollection fetches always filter out duplicates.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.DataContainerType">
            <summary>
            Gets or sets the type of the data container which contains the data inside this datasource control.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.EnablePaging">
            <summary>
            Gets or sets whether Paging is enabled on this control. Default is false. If you're using paging in a bound control, be sure to set this
            property to true so the LLBLGenProDataSourceControl will perform server-side paging instead of loading everything in memory and leave the paging to
            the bound control. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.CacheLocation">
            <summary>
            Gets or sets the location where to store loaded data. Default is Viewstate. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ASPNetCacheDuration">
            <summary>
            Gets or sets the duration in minutes the state data is stored in the ASP.NET cache in between page postbacks. Only valid if CacheLocation is set to ASPNetCache.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.SortingMode">
            <summary>
            Gets / sets the sortingmode.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.SorterToUse">
            <summary>
            Gets or sets the SortExpression to use.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.TotalRowCount">
            <summary>
            Gets the total row count for the last query executed. Only valid if the query is a paging query and the datasource is ordered to
            obtain the total row count by the bound control.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.AllFieldsKeepEmptyStringAsValue">
            <summary>
            Gets / sets the allFieldsKeepEmptyStringAsValue value. Setting this parameter to true will disable FieldNamesKeepEmptyStringAsValue. Default: false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ThrowExceptionOnIllegalFieldInput">
            <summary>
            Gets or sets the flag which signals this datasource control when setting fields to new values it should throw an exception if one or more field values in the input are illegal and can't be converted to the field's .NET type.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.FieldNamesKeepEmptyStringAsValue">
            <summary>
            Gets / sets the list of fieldnames for which "" is a valid value and which shouldn't be converted to null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.GroupByToUse">
            <summary>
            Gets or sets the GroupByCollection to use. Only valid if DataContainerType is set to TypedList or TypedView
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.IgnoreNullValuedSelectParameters">
            <summary>
            Gets or sets a value indicating whether select parameters which have the value null should be ignored (true) or not (false, default)
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ViewStateSlot">
            <summary>
            Enum for the state slots in the view state slot object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ViewStateSlot.OwnState">
            <summary>
            Slot for the state data of this object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ViewStateSlot.DefaultViewState">
            <summary>
            slot for the state data of the default view object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ViewStateSlot.NumberOfSlots">
            <summary>
            
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot">
            <summary>
            Enum for the state slots in the control state slot object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.DataStorageKey">
            <summary>
            Slot for the key used for storage in the session
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.CacheLocation">
            <summary>
            Slot for the Cache location setting
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.EnablePaging">
            <summary>
            Slot for the enable paging flag
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.DataContainerType">
            <summary>
            Slot for the data container type
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.MaxNumberOfItemsToReturn">
            <summary>
            Slot for the max number of items to return
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.AllowDuplicates">
            <summary>
            Slot for the flag if duplicate instances should be fetched
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.LivePersistence">
            <summary>
            Slot for the flag if manipulation of data should be send directly to the database or to a UnitOfWork object.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.ASPNetCacheDuration">
            <summary>
            Slot for the ASPNetcacheDuration value.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.ASPNetCacheStorageKey">
            <summary>
            Slot for the key used for storing the data in the asp.net cache (if applicable)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.IgnoreNullValuedSelectParameters">
            <summary>
            Slot for the flag to ignore null valued select parameters or not.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase.ControlStateSlot.NumberOfSlots">
            <summary>
            
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.GetView">
            <summary>
            Gets the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.GetViewInternal">
            <summary>
            Gets the default view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.OnPerformSelect(SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs)">
            <summary>
            Called when the PerformSelect event has to be raised.
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.OnPerformDbCount(SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs)">
            <summary>
            Called when the PerformDbCount event has to be raised.
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.OnPerformWork(SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs)">
            <summary>
            Called when PerformWork event has to be raised
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.PerformSelect">
            <summary>
            Event which is raised when LivePersistence is set to false and a select has to be performed. 
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.PerformGetDbCount">
            <summary>
            Event which is raised when LivePersistence is set to false and a GetDbCount has to be performed.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.PerformWork">
            <summary>
            Event which is raised when LivePersistence is set to false and an insert/update/delete has to be performed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.TypedListTypeName">
            <summary>
            Gets or sets the name of the typed list type. Only valid if DataContainerType is set to TypedList
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.TypedViewTypeName">
            <summary>
            Gets or sets the name of the typed view type. Only valid if DataContainerType is set to TypedView
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.EntityCollectionTypeName">
            <summary>
            Gets or sets the name of the entity collection. Only valid if DataContainerType is set to EntityCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.UnitOfWorkObject">
            <summary>
            Gets the UnitOfWork object used by this control. Not defined if LivePersistence is set to true.
            
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.Refetch">
            <summary>
            Gets / sets the flag whether the control should refetch the data at the next select call from the bound control(s). Set this flag to true
            when you've persisted the embedded UnitOfWork object. This will also clear the unitofwork object on the next select.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.RelationsToUse">
            <summary>
            Gets or sets the relations to use.
            </summary>
            <value>The relations to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.FilterToUse">
            <summary>
            Gets or sets the filter to use.
            </summary>
            <value>The filter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.PrefetchPathToUse">
            <summary>
            Gets or sets the PrefetchPath to use. Only valid if DataContainerType is set to EntityCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.GroupBy">
            <summary>
            Gets or sets the GroupByCollection to use. Only valid if DataContainerType is set to TypedList or TypedView
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.EntityCollection">
            <summary>
            Gets or sets the entity collection contained in this object. Only valid if DataContainerType is set to EntityCollection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.TypedList">
            <summary>
            Gets or sets the typed list contained in this object. Only valid if DataContainerType is set to TypedList.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource.TypedView">
            <summary>
            Gets or sets the typed view contained in this object. Only valid if DataContainerType is set to TypedView.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2">
            <summary>
            General data source control which can be used in ASP.NET projects to perform design time databinding and runtime databinding. 
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.GetView">
            <summary>
            Gets the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.GetViewInternal">
            <summary>
            Gets the default view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.OnPerformSelect(SD.LLBLGen.Pro.ORMSupportClasses.PerformSelectEventArgs2)">
            <summary>
            Called when the PerformSelect event has to be raised.
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.OnPerformDbCount(SD.LLBLGen.Pro.ORMSupportClasses.PerformGetDbCountEventArgs2)">
            <summary>
            Called when the PerformDbCount event has to be raised.
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.OnPerformWork(SD.LLBLGen.Pro.ORMSupportClasses.PerformWorkEventArgs2)">
            <summary>
            Called when PerformWork event has to be raised
            </summary>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.PerformSelect">
            <summary>
            Event which is raised when LivePersistence is set to false and a select has to be performed. 
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.PerformGetDbCount">
            <summary>
            Event which is raiseed when LivePersistence is set to false and a GetDbCount has to be performed.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.PerformWork">
            <summary>
            Event which is raised when LivePersistence is set to false and an insert/update/delete has to be performed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.TypedListTypeName">
            <summary>
            Gets or sets the name of the typed list type. Only valid if DataContainerType is set to TypedList
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.TypedViewTypeName">
            <summary>
            Gets or sets the name of the typed view type. Only valid if DataContainerType is set to TypedView
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.EntityFactoryTypeName">
            <summary>
            Gets or sets the name of the entity factory type. Only valid if DataContainerType is set to EntityCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.AdapterTypeName">
            <summary>
            Gets or sets the name of the DataAccessAdapter type.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.UnitOfWorkObject">
            <summary>
            Gets the UnitOfWork object used by this control. Not defined if LivePersistence is set to true.
            
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.Refetch">
            <summary>
            Gets / sets the flag whether the control should refetch the data at the next select call from the bound control(s). Set this flag to true
            when you've persisted the embedded UnitOfWork object. This will also clear the unitofwork object on the next select.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.AdapterToUse">
            <summary>
            Gets or sets the adapter to use. Only valid if LivePersistence is set to true, otherwise persistence for selects is delegated to events and 
            for save/delete is delegated to a UnitOfWork object.
            </summary>
            <value>The adapter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.FilterToUse">
            <summary>
            Gets or sets the filter to use.
            </summary>
            <value>The filter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.GroupBy">
            <summary>
            Gets or sets the GroupByCollection to use. Only valid if DataContainerType is set to TypedList or TypedView
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.PrefetchPathToUse">
            <summary>
            Gets or sets the PrefetchPath to use. Only valid if DataContainerType is set to EntityCollection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.EntityCollection">
            <summary>
            Gets the entity collection contained in this object. Only valid if DataContainerType is set to EntityCollection.
            The returned type is of type EntityCollectionNonGeneric, which is the base class for the generated EntityCollection non-generic class. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.TypedList">
            <summary>
            Gets the typed list contained in this object. Only valid if DataContainerType is set to TypedList.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSource2.TypedView">
            <summary>
            Gets the typed view contained in this object. Only valid if DataContainerType is set to TypedView.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView">
            <summary>
            General implementation of the DataSourceView class to be used with LLBLGenProDataSource control in ASP.NET applications.
            </summary>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase">
            <summary>
            General base class for DatSourceView objects for selfservicing and adapter.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.LoadState(System.Object)">
            <summary>
            Loads the state for this object from the object passed in (which is an object array)
            </summary>
            <param name="savedState">Saved object state.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SaveState">
            <summary>
            When implemented by a class, saves the changes to a server control's view state to an <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            The <see cref="T:System.Object"></see> that contains the view state changes.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SetDataContainer(System.Object)">
            <summary>
            Sets the datacontainer object
            </summary>
            <param name="dataContainer">the datacontainer object to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SetFilter(System.Object)">
            <summary>
            Sets the filter.
            </summary>
            <param name="filterObject">The filter object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SetRelationCollection(System.Object)">
            <summary>
            Sets the relation collection.
            </summary>
            <param name="relationCollection">The relation collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SetUnitOfWork(System.Object)">
            <summary>
            Sets the unit of work.
            </summary>
            <param name="uow">The unit of work.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SetPrefetchPath(System.Object)">
            <summary>
            Sets the prefetch path.
            </summary>
            <param name="prefetchPath">The prefetch path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CompareSelectParameters">
            <summary>
            Compares the select parameters with the cached versions. If the current select parameters are different, Refresh is set to true.
            </summary>
            <remarks>Called by ExecuteSelect prior to branching out to the real select routines.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.GetDataContainerTypeInstance">
            <summary>
            Gets the data container type instance.
            </summary>
            <returns>null if no datacontainertypename is specified or the Type instance if a valid type name was specified. If the type can't be instantiated,
            an InvalidOperationException is thrown</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.ProduceSortExpressionFromString(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.String)">
            <summary>
            Produces the sort expression from a string expression provided by ASP.NET
            </summary>
            <param name="fields">The fields.</param>
            <param name="sortargument">The sortargument.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.ProduceSortExpressionFromString(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.String)">
            <summary>
            Produces the sort expression from a string expression provided by ASP.NET
            </summary>
            <param name="fields">The fields.</param>
            <param name="sortargument">The sortargument.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SetEntityValues(System.Collections.IDictionary,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the entity values.
            </summary>
            <param name="values">The values.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.ConvertValueToDestinationType(System.Type,System.Object,System.String)">
            <summary>
            Converts the passed in sourcevalue to the destination type. Used when converting field values in forms and parameter values in filters. 
            </summary>
            <param name="destinationType">Type of the destination.</param>
            <param name="sourceValue">The source value.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>null if fieldName!= null and fieldName is part of the fieldNamesKeepEmptyStringAsValue collection and sourceValue is an empty string.
            Otherwise the sourcevalue converted to the destination type. If no conversion is possible, null is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.ProduceSortExpressionFromString(System.Collections.Generic.Dictionary{System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore},System.String)">
            <summary>
            Produces the sort expression from string.
            </summary>
            <param name="fieldsList">The fields list.</param>
            <param name="sortargument">The sortargument.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.MergeDictionaries(System.Web.UI.WebControls.ParameterCollection,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Merges the dictionaries passed in. This is done to merge a parametercollection with a set of values.
            If a value is both in source and in parameters, the value in parameters is picked. If the value is only in source, or in parameters, the value is selected. 
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.GetParameterValues(System.Web.UI.WebControls.ParameterCollection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets the parameter values from the parameters and the current context and stores them into the destination dictionary.
            </summary>
            <param name="parameters">parameter collection to retrieve the values for</param>
            <param name="destination">destination into which the values have to be stored. If a key already exists, the value is overwritten.</param>
            <remarks>Clears destination prior to filling it.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.RaiseChangedEvent">
            <summary>
            Raises the changed event.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.Select(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Selects the data from the underlying storage using the ExecuteSelect method.
            </summary>
            <param name="arguments">The data source select arguments.</param>
            <returns>EntityView2 object with the data requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CreateStateDataObject">
            <summary>
            Creates the state data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.OnParametersChanged(System.Object,System.EventArgs)">
            <summary>
            Called when [parameters changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.TrackViewState">
            <summary>
            Tracks the state of the view.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.ThrowExceptionOnIllegalFieldInput">
            <summary>
            Gets or sets the flag which signals this datasource control when setting fields to new values it should throw an exception if one or more field values in the input are illegal and can't be converted to the field's .NET type.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.AllFieldsKeepEmptyStringAsValue">
            <summary>
            Gets / sets the allFieldsKeepEmptyStringAsValue value. Setting this parameter to true will disable FieldNamesKeepEmptyStringAsValue. Default: false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SortingMode">
            <summary>
            Gets / sets the sortingmode.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.FieldNamesKeepEmptyStringAsValue">
            <summary>
            Gets / sets the list of fieldnames for which "" has to be converted to null/Nothing
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SelectParameters">
            <summary>
            Gets or sets the select parameters.
            </summary>
            <value>The select parameters.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.InsertParameters">
            <summary>
            Gets the insert parameters.
            </summary>
            <value>The insert parameters.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.UpdateParameters">
            <summary>
            Gets the update parameters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CanDelete">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation.
            </summary>
            <value></value>
            <returns>true if the datacontainertype is set to entitycollection.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CanInsert">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> operation.
            </summary>
            <value></value>
            <returns>true if the datacontainertype is set to entitycollection.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CanUpdate">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports the <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation.
            </summary>
            <value></value>
            <returns>true if the datacontainertype is set to entitycollection.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.Refetch">
            <summary>
            Gets or sets a value indicating whether refetching of data should be performed
            </summary>
            <value><c>true</c> if refetch; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.IsTrackingViewState">
            <summary>
            When implemented by a class, gets a value indicating whether a server control is tracking its view state changes.
            </summary>
            <value></value>
            <returns>true if a server control is tracking its view state changes; otherwise, false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CanPage">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports paging through the data retrieved by the <see cref="M:System.Web.UI.DataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)"></see> method.
            </summary>
            <remarks>Returns the value of the EnablePaging property of the owner control</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CanSort">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports a sorted view on the underlying data source.
            </summary>
            <remarks>returns true. If you don't want sorting, disable it in the bound control.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.CanRetrieveTotalRowCount">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Web.UI.DataSourceView"></see> object associated with the current <see cref="T:System.Web.UI.DataSourceControl"></see> object supports retrieving the total number of data rows, instead of the data.
            </summary>
            <value></value>
            <returns>true if the operation is supported; otherwise, false. The base class implementation returns false.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.TotalRowCount">
            <summary>
            Gets or sets the total row count as obtained by the last fetch query. Only valid if the query is a paging query and the datasource is ordered to
            obtain the total row count by the bound control.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.GroupBy">
            <summary>
            Gets or sets the group by.
            </summary>
            <value>The group by.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SorterToUse">
            <summary>
            Gets or sets the sorter to use.
            </summary>
            <value>The sorter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.PageNumber">
            <summary>
            Gets or sets the page number.
            </summary>
            <value>The page number.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.Owner">
            <summary>
            Gets the owner datasource control.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SortExpression">
            <summary>
            Gets or sets the sort expression.
            </summary>
            <value>The sort expression.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.SuppressChangedEvent">
            <summary>
            Gets or sets a value indicating whether [surpress changed event].
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.DataContainerTypeName">
            <summary>
            Gets or sets the name of the data container type, or the type which is required to re-instantiate the datacontainer instance. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot">
            <summary>
            Enum for the state slots in the view state slot object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.Filter">
            <summary>
            Slot for the Filter object set
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.Sorter">
            <summary>
            Slot for the sorter object set.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.DataContainer">
            <summary>
            Slot for the datacontainer object contained in this object (or null if cache location is set to None)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.PageNumber">
            <summary>
            Slot for the active page number
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.PageSize">
            <summary>
            Slot for the active page size
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.TotalRowCount">
            <summary>
            Slot for the total row count read during the last page load
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.RelationCollection">
            <summary>
            Slot for relationcollection object, if applicable
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.SortExpression">
            <summary>
            Slot for the last used sortexpression received by ExecuteSelect
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.Refetch">
            <summary>
            Slot for the flag to refetch the data because the current data is invalid.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.UnitOfWork">
            <summary>
            Slot for the unitofwork object when LivePersistence is set to false.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.GroupByCollection">
            <summary>
            Slot for the groupby collection used for typedlist/view fetches
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.PrefetchPath">
            <summary>
            Slot for the prefetch path used for entitycollection fetches.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.FieldNamesKeepEmptyStringAsValue">
            <summary>
            List of fieldnames for which "" is a valid value and shouldn't be converted to null.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.SortingMode">
            <summary>
            The sortingmode for the datasourcecontrol
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.SelectedParameterValues">
            <summary>
            The slot for the selectparameter values of the previous page, so a compare can be done to see if a selectparameter has been changed and
            a refresh has to be performed or not.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.SelectParameters">
            <summary>
            The select parameters data.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.AllFieldsKeepEmptyStringAsValue">
            <summary>
            The slot for the AllFieldsKeepEmptyStringAsValue value which signals to simply keep empty strings as values, bypassing FieldNamesKeepEmptyStringAsValue.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.ThrowExceptionOnIllegalFieldInput">
            <summary>
            The slot for the ThrowExceptionOnIllegalFieldInput flag. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.DataContainerTypeName">
            <summary>
            The full type name to re-create the datacontainer if necessary. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceViewBase.StateSlot.NumberOfSlots">
            <summary>
            
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView"/> class.
            </summary>
            <param name="_owner">The _owner.</param>
            <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality. If a transaction is in progress, it will rollback that transaction.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.SetPrefetchPath(System.Object)">
            <summary>
            Sets the prefetch path.
            </summary>
            <param name="prefetchPath">The prefetch path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.SetFilter(System.Object)">
            <summary>
            Sets the filter.
            </summary>
            <param name="filterObject">The filter object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.SetRelationCollection(System.Object)">
            <summary>
            Sets the relation collection.
            </summary>
            <param name="relationCollection">The relation collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.SetUnitOfWork(System.Object)">
            <summary>
            Sets the unit of work.
            </summary>
            <param name="uow">The unit of work.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.SetDataContainer(System.Object)">
            <summary>
            Sets the datacontainer object
            </summary>
            <param name="dataContainer">the datacontainer object to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.CreateStateDataObject">
            <summary>
            Creates the state data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.CreateRuntimeFilter">
            <summary>
            Creates the filter from the parameters specified.
            </summary>
            <returns>PredicateExpression to use as additional filter for a select</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Performs an update operation on the list of data that the <see cref="T:System.Web.UI.DataSourceView"></see> object represents.
            </summary>
            <param name="keys">An <see cref="T:System.Collections.IDictionary"></see> of object or row keys to be updated by the update operation.</param>
            <param name="values">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs that represent data elements and their new values.</param>
            <param name="oldValues">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs that represent data elements and their original values.</param>
            <returns>
            The number of items that were updated in the underlying data storage.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation is not supported by the <see cref="T:System.Web.UI.DataSourceView"></see>. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Performs a delete operation on the list of data that the <see cref="T:System.Web.UI.DataSourceView"></see> object represents.
            </summary>
            <param name="keys">An <see cref="T:System.Collections.IDictionary"></see> of object or row keys to be deleted by the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation.</param>
            <param name="oldValues">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs that represent data elements and their original values.</param>
            <returns>
            The number of items that were deleted from the underlying data storage.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation is not supported by the <see cref="T:System.Web.UI.DataSourceView"></see>. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteInsert(System.Collections.IDictionary)">
            <summary>
            Performs an insert operation on the list of data that the <see cref="T:System.Web.UI.DataSourceView"></see> object represents.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs used during an insert operation.</param>
            <returns>
            The number of items that were inserted into the underlying data storage.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> operation is not supported by the <see cref="T:System.Web.UI.DataSourceView"></see>. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Gets a list of data from the underlying data storage.
            </summary>
            <param name="arguments">A <see cref="T:System.Web.UI.DataSourceSelectArguments"></see> that is used to request operations on the data beyond basic data retrieval.</param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"></see> list of data from the underlying data storage.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteSelectEntityCollection(System.Int32,System.Int32,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Executes the select entity collection.
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteSelectTypedList(System.Int32,System.Int32,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Executes the select typed list
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ExecuteSelectTypedView(System.Int32,System.Int32,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Executes the select typed view
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ProduceSorterToUse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Routine which produces a sortexpression to use for sorting, which merges a sortexpression produced from the arguments with the set sortexpression.
            </summary>
            <param name="fields">The fields.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ProduceFilterToUse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Routine which will use the base filter passed in and the runtime filter created internally to produce a new filter to use for a select operation.
            </summary>
            <param name="baseFilter"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.FindEntity(System.Collections.IDictionary)">
            <summary>
            Finds the entity matching the PK fields specified in keys in the contained collection.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.CreateTypedListContainerIfRequired">
            <summary>
            Creates the typed list container if required.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.CreateTypedViewContainerIfRequired">
            <summary>
            Creates the typed view container if required.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.CreateEntityCollectionContainerIfRequired">
            <summary>
            Creates the entity collection container if required.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.Refetch">
            <summary>
            Gets or sets a value indicating whether refetching of data should be performed
            </summary>
            <value><c>true</c> if refetch; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.UoW">
            <summary>
            Gets the UnitOfWork object for this control, if Livepersistence is set to false in the owner control.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.PrefetchPath">
            <summary>
            Gets or sets the prefetch path.
            </summary>
            <value>The prefetch path.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.FilterToUse">
            <summary>
            Gets or sets the filter to use.
            </summary>
            <value>The filter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.RelationsToUse">
            <summary>
            Gets or sets the relations to use.
            </summary>
            <value>The relations to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.TypedListTypeName">
            <summary>
            Gets or sets the name of the TypedList type
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.TypedViewTypeName">
            <summary>
            Gets or sets the name of the TypedView type
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.EntityCollectionTypeName">
            <summary>
            Gets or sets the name of the entity collection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ContainedEntityCollection">
            <summary>
            Gets or sets the contained entity collection.
            </summary>
            <value>The contained entity collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ContainedTypedList">
            <summary>
            Gets or sets the contained typed list
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView.ContainedTypedView">
            <summary>
            Gets or sets the contained typed list
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2">
            <summary>
            General implementation of the DataSourceView class to be used with LLBLGenProDataSource control in ASP.NET applications.
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2"/> class.
            </summary>
            <param name="_owner">The _owner.</param>
            <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality. If a transaction is in progress, it will rollback that transaction.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.SetPrefetchPath(System.Object)">
            <summary>
            Sets the prefetch path.
            </summary>
            <param name="prefetchPath">The prefetch path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.SetFilter(System.Object)">
            <summary>
            Sets the filter.
            </summary>
            <param name="filterObject">The filter object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.SetUnitOfWork(System.Object)">
            <summary>
            Sets the unit of work.
            </summary>
            <param name="uow">The unit of work.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.SetDataContainer(System.Object)">
            <summary>
            Sets the datacontainer object
            </summary>
            <param name="dataContainer">the datacontainer object to set.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.CreateStateDataObject">
            <summary>
            Creates the state data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.CreateRuntimeFilter">
            <summary>
            Creates the filter from the parameters specified.
            </summary>
            <returns>PredicateExpression to use as additional filter for a select</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Performs an update operation on the list of data that the <see cref="T:System.Web.UI.DataSourceView"></see> object represents.
            </summary>
            <param name="keys">An <see cref="T:System.Collections.IDictionary"></see> of object or row keys to be updated by the update operation.</param>
            <param name="values">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs that represent data elements and their new values.</param>
            <param name="oldValues">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs that represent data elements and their original values.</param>
            <returns>
            The number of items that were updated in the underlying data storage.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="M:System.Web.UI.DataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation is not supported by the <see cref="T:System.Web.UI.DataSourceView"></see>. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Performs a delete operation on the list of data that the <see cref="T:System.Web.UI.DataSourceView"></see> object represents.
            </summary>
            <param name="keys">An <see cref="T:System.Collections.IDictionary"></see> of object or row keys to be deleted by the <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation.</param>
            <param name="oldValues">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs that represent data elements and their original values.</param>
            <returns>
            The number of items that were deleted from the underlying data storage.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="M:System.Web.UI.DataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)"></see> operation is not supported by the <see cref="T:System.Web.UI.DataSourceView"></see>. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteInsert(System.Collections.IDictionary)">
            <summary>
            Performs an insert operation on the list of data that the <see cref="T:System.Web.UI.DataSourceView"></see> object represents.
            </summary>
            <param name="values">An <see cref="T:System.Collections.IDictionary"></see> of name/value pairs used during an insert operation.</param>
            <returns>
            The number of items that were inserted into the underlying data storage.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="M:System.Web.UI.DataSourceView.ExecuteInsert(System.Collections.IDictionary)"></see> operation is not supported by the <see cref="T:System.Web.UI.DataSourceView"></see>. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Gets a list of data from the underlying data storage.
            </summary>
            <param name="arguments">A <see cref="T:System.Web.UI.DataSourceSelectArguments"></see> that is used to request operations on the data beyond basic data retrieval.</param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"></see> list of data from the underlying data storage.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteSelectEntityCollection(System.Int32,System.Int32,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Executes the select entity collection.
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteSelectTypedList(System.Int32,System.Int32,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Executes the select typed list
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ExecuteSelectTypedView(System.Int32,System.Int32,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Executes the select typed view
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="pageNumber">The page number.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ProduceSorterToUse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Web.UI.DataSourceSelectArguments)">
            <summary>
            Routine which produces a sortexpression to use for sorting, which merges a sortexpression produced from the arguments with the set sortexpression.
            </summary>
            <param name="fields">The fields.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ProduceFilterToUse(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Routine which will use the base filter passed in and the runtime filter created internally to produce a new filter to use for a select operation.
            </summary>
            <param name="baseFilter"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.FindEntity(System.Collections.IDictionary)">
            <summary>
            Finds the entity matching the PK fields specified in keys in the contained collection.
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.CreateTypedListContainerIfRequired">
            <summary>
            Creates the typed list container if required.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.CreateTypedViewContainerIfRequired">
            <summary>
            Creates the typed view container if required.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.CreateEntityCollectionContainerIfRequired">
            <summary>
            Creates the entity collection container if required.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.Refetch">
            <summary>
            Gets or sets a value indicating whether refetching of data should be performed
            </summary>
            <value><c>true</c> if refetch; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.UoW">
            <summary>
            Gets the UnitOfWork object for this control, if Livepersistence is set to false in the owner control.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.PrefetchPath">
            <summary>
            Gets or sets the prefetch path.
            </summary>
            <value>The prefetch path.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.FilterToUse">
            <summary>
            Gets or sets the filter to use.
            </summary>
            <value>The filter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.AdapterToUse">
            <summary>
            Gets or sets the adapter to use.
            </summary>
            <value>The adapter to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.TypedListTypeName">
            <summary>
            Gets or sets the name of the TypedList type
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.TypedViewTypeName">
            <summary>
            Gets or sets the name of the TypedView type
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.EntityFactoryTypeName">
            <summary>
            Gets or sets the name of the entity factory type.
            </summary>
            <value>The name of the entity factory type.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.AdapterTypeName">
            <summary>
            Gets or sets the name of the DataAccessAdapter type.
            </summary>
            <value>The name of the adapter type.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.EntityFactoryToUse">
            <summary>
            Gets the entity factory to use.
            </summary>
            <value>The entity factory to use.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ContainedEntityCollection">
            <summary>
            Gets or sets the contained entity collection.
            </summary>
            <value>The contained entity collection.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ContainedTypedList">
            <summary>
            Gets or sets the contained typed list
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LLBLGenProDataSourceView2.ContainedTypedView">
            <summary>
            Gets or sets the contained typed list
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.MergeableDictionary`2">
            <summary>
            Specialized Hashtable which allows merging with a passed-in hashtable. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableDictionary`2.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableDictionary`2.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            CTor
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableDictionary`2.MergeDictionary(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Merges the hashtable passed in with this MergeableHashtable. All keys in toMerge which are already in this MergeableHashtable are skipped.
            </summary>
            <param name="toMerge">To merge.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2">
            <summary>
            Specialized hashtable which can store multiple values for a given key. All values are stored in an UniqueValueList as value. When the
            value is requested, the UniqueValueList is returned, not the actual value. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MultiValueHashtable class.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.#ctor">
            <summary>
            Initializes a new instance of the MultiValueHashtable class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization CTor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.Add(`0,`1)">
            <summary>
            Adds an element with the specified key and value to the set.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. If the key is already existing, the value is added to the existing list of values
            for that key, unless the value also already exists.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.Add(`0,System.Collections.Generic.ICollection{`1})">
            <summary>
            Adds the objects as values for the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="values">Values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.Contains(`0,`1)">
            <summary>
            Determines whether the multivaluehashtable contains the key, and if so, if the list of values stored under the key contains the value specified.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <returns>true if the key exists and the list of values contains the specified value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.GetValuesForKeyAndCreateIfNotThere(`0)">
            <summary>
            Gets the values for key. If key isn't there yet, a new value list is added for the key to this hashtable.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable`2.Item(`0)">
            <summary>
            Gets / sets a value for the given key. Hides original indexer
            </summary>
            <remarks>returns null if not found</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference">
            <summary>
            Class which contains the data to set an entity reference found in an XmlNode to an entity instance.
            Instances of this class are used to store entity references found in an Xml tree in ReadXml() so these
            references can be set once the complete object tree is created and objects are known.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.PropertyHoldingInstance">
            <summary>
            The instance holding the ReferenceingProperty.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.ObjectID">
            <summary>
            The ObjectID of the entity object to set as value of the ReferencingProperty
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.ReferencingProperty">
            <summary>
            The property descriptor of the property to set to the instance with the ObjectID stored in ObjectID
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.IsCollectionAdd">
            <summary>
            If set to true, this reference is not a property set but a collection add. Collection to add to is referenced
            by PropertyHoldingInstance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.Position">
            <summary>
            The position in an entitycollection on which the node entity reference was encountered. Not valid if IsCollectionAdd is false.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils">
            <summary>
            Some utility functions to process graphs
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceCollectionsPerTypeFromGraph(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Produces the collections per type from the graph specified
            </summary>
            <param name="collection">The collection of entities which form the start of the graph.</param>
            <returns>A dictionary with per type a new non-generic entity collection with all the entities of that type found in the graph</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceCollectionsPerTypeFromGraph(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2[])">
            <summary>
            Produces the collections per type from the graph specified
            </summary>
            <param name="collections">The collections to traverse.</param>
            <returns>
            A dictionary with per type a new non-generic entity collection with all the entities of that type found in the graph
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceTopologyOrderedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Produces the topology ordered list for the graph rooted by the entity passed in. Uses topological sort of a directed graph.
            </summary>
            <param name="entityToExamine">Entity to examine.</param>
            <returns>
            Arraylist which represents the complete graph of entities which are reachable from entityToExamine, and sorted in the right order,
            so every entity which depends on another entity is placed after the entity/entities it depends on.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.PerformTopologySort(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}},System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Performs the topology sort for the adjacencylists and the entity given. Adds the entity to the ArrayList passed in which represents the right ordered queue.
            </summary>
            <param name="toSort">To sort.</param>
            <param name="adjacencyLists">Adjacency lists.</param>
            <param name="visited">Visited.</param>
            <param name="orderedList">The ordered list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceAdjacencyLists(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}},System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Produces adjancency lists for the entities in the complete graph reachable from the entity passed in. This routine figures out
            the graph to process by walking it, using a hashtable (recursed) to take note which nodes are already processed. 
            When it finds an entity A and an entity B having a relation in the graph (have 'an edge'), and A is depending on B, we add B to the 
            adjacency list of A, though we don't add A to the adjacency list of B.
            </summary>
            <param name="entityToExamine">Entity to examine</param>
            <param name="adjacencyLists">The hashtable with per seen entity (objectid, key) the adjancency list (Hashtable of entities, key is objectid, value is entity)</param>
            <param name="recursed">The hashtable with objectids of the entities already processed to build the adjacency lists.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.AddToAdjacencyList(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}})">
            <summary>
            Adds one entity to the adjacency list of another entity
            </summary>
            <param name="toAdd">Entity to add to the adjacency list of adjacencyListOwner.</param>
            <param name="adjacencyListOwner">Adjacency list owner of the adjacencylist to add to</param>
            <param name="adjacencyLists">Adjacency lists currently known</param>
            <remarks>if toAdd is already present, this routine is a no-op</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Boolean)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Boolean)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction to use for entityToSave</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Boolean)">
            <summary>
            Determines the action queues for the entity collection passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityCollectionToSave">Entity collection to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}}@,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2}@,System.Boolean,System.Collections.Generic.Dictionary{System.Guid,System.Object}@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction to use with entityToSave</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="inQueue">In queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
            <param name="entitiesInGraph">The entities in graph.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceCollectionsPerTypeFromGraph(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Produces the collections per type from the graph specified
            </summary>
            <param name="collection">The collection of entities which form the start of the graph.</param>
            <returns>A dictionary with per type a new non-generic entity collection with all the entities of that type found in the graph</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceCollectionsPerTypeFromGraph(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection[])">
            <summary>
            Produces the collections per type from the graph specified
            </summary>
            <param name="collections">The collections to traverse.</param>
            <returns>
            A dictionary with per type a new non-generic entity collection with all the entities of that type found in the graph
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceTopologyOrderedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Produces the topology ordered list for the graph rooted by the entity passed in. Uses topological sort of a directed graph.
            </summary>
            <param name="entityToExamine">Entity to examine.</param>
            <returns>
            Arraylist which represents the complete graph of entities which are reachable from entityToExamine, and sorted in the right order,
            so every entity which depends on another entity is placed after the entity/entities it depends on.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.PerformTopologySort(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity}},System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntity})">
            <summary>
            Performs the topology sort for the adjacencylists and the entity given. Adds the entity to the ArrayList passed in which represents the right ordered queue.
            </summary>
            <param name="toSort">To sort.</param>
            <param name="adjacencyLists">Adjacency lists.</param>
            <param name="visited">Visited.</param>
            <param name="orderedList">The ordered list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceAdjacencyLists(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity}},System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity})">
            <summary>
            Produces adjancency lists for the entities in the complete graph reachable from the entity passed in. This routine figures out
            the graph to process by walking it, using a hashtable (recursed) to take note which nodes are already processed. 
            When it finds an entity A and an entity B having a relation in the graph (have 'an edge'), and A is depending on B, we add B to the 
            adjacency list of A, though we don't add A to the adjacency list of B.
            </summary>
            <param name="entityToExamine">Entity to examine</param>
            <param name="adjacencyLists">The hashtable with per seen entity (objectid, key) the adjancency list (Hashtable of entities, key is objectid, value is entity)</param>
            <param name="recursed">The hashtable with objectids of the entities already processed to build the adjacency lists.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.AddToAdjacencyList(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity}})">
            <summary>
            Adds one entity to the adjacency list of another entity
            </summary>
            <param name="toAdd">Entity to add to the adjacency list of adjacencyListOwner.</param>
            <param name="adjacencyListOwner">Adjacency list owner of the adjacencylist to add to</param>
            <param name="adjacencyLists">Adjacency lists currently known</param>
            <remarks>if toAdd is already present, this routine is a no-op</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction to use with entityToSave.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@)">
            <summary>
            Determines the action queues for the entity collection passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityCollectionToSave">Entity collection to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement{SD.LLBLGen.Pro.ORMSupportClasses.IEntity}}@,System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity}@,System.Collections.Generic.Dictionary{System.Guid,System.Object}@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="inQueue">In queue.</param>
            <param name="entitiesInGraph">The entities in graph.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.GetOrCreateAdjacencyList``1(System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.Dictionary{System.Guid,``0}})">
            <summary>
            Gets the adjacency list for the objectid passed in. If no adjacencylist is available for that id, a new one is created and added to the
            adjacencylist hashtable passed in
            </summary>
            <param name="objectId">Object id.</param>
            <param name="adjacencyLists">Adjacency lists.</param>
            <returns>AdjacencyList of id passed in</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore">
            <summary>
            Class which is used to store core methods used in various parts of the persistence pipeline, and which are shared among selfservicing and adapter.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CreateEntityHashes(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore)">
            <summary>
            Creates the hashes for the collection passed in. 
            </summary>
            <param name="hashesToFill">Hashes to fill.</param>
            <param name="collectionToHash">Collection to hash.</param>
            <remarks>construct hashtable for looking up entities through their PK. Per hash value an arraylist is created with the entities
            with that hashvalue. Normally 1 entity per hashvalue is stored, but this can vary depending on the fact that the Hashvalue is 
            an int.
            <br/><br/>
            Used in normal merging during prefetch paths.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CreateEntityHashes(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Creates the hashes for the collection passed in.
            </summary>
            <param name="hashesToFill">Hashes to fill.</param>
            <param name="collectionToHash">Collection to hash.</param>
            <param name="relation">The relation to use for determining the PK fields.</param>
            <remarks>construct hashtable for looking up entities through their PK. Per hash value an arraylist is created with the entities
            with that hashvalue. Normally 1 entity per hashvalue is stored, but this can vary depending on the fact that the Hashvalue is
            an int.
            <br/><br/>
            Used in normal merging during prefetch paths.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CreateDataRowHashes(System.Collections.Generic.Dictionary{System.Data.DataRow,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{System.Data.DataRow}},System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates the hash code to datarow relations for both the start entity and the end entity. This is required because the hashvalues
            calculated from PK fields is sometimes not unique. We therefore have to store the values as well to do a value compare when required.
            the hash to datarow hashtable has per hashvalue an array list is stored with the datarows
            </summary>
            <param name="dataRowToStartEntityPkHash">datarow to startentity hash hashtable.</param>
            <param name="endEntityPkHashToDataRow">End entity pk hash to datarow hashtable</param>
            <param name="pkpkFields">Pkpkfields datatable</param>
            <param name="relations">Relations.</param>
            <remarks>Used in ManyToMany merging during prefetch paths.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CreateSubPathFilterParameterizedPPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Collections.Hashtable)">
            <summary>
            Creates the sub path filter for a parameterized Prefetch path subnode.
            Routine is used for all prefetch path types.
            </summary>
            <param name="rootEntities">The root entities.</param>
            <param name="prefetchPath">The prefetch path.</param>
            <param name="currentElement">The current element.</param>
            <param name="elementFilterPredicateExpression">The element filter predicate expression.</param>
            <param name="values">The values to use for the parameterized query. Key has all values of all fields concatenated as string form, Value is either 
            a single value if the relation has just 1 field, or an arraylist of values if the relation has more than 1 field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CreateSubPathFilterSubQueryPPath(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates the sub path filter for a sub query using prefetch path node fetch
            </summary>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="currentElement">The current element.</param>
            <param name="elementFilterPredicateExpression">The element filter predicate expression.</param>
            <param name="maxNumberOfItemsToReturn">The maxNumberOfItemsToReturn value used for fetching the root elements. Used when currentElement
            is at graphLevel 0 (top of graph)</param>
            <param name="sorter">The sorter used for fetching the root elements. Used when currentElement
            is at graphLevel 0 (top of graph)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.DetermineIfMergeShouldTakePlace(System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32},SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int64)">
            <summary>
            Determines if the counter for the entity passed in is lower than the maximum passed in and increases teh counter as well.
            </summary>
            <param name="maxCounters"></param>
            <param name="rootObject"></param>
            <param name="maxAmountOfItemsToReturn"></param>
            <returns>true if the counter is less than the maximum, which means that the merge can take place</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.FindPkObject(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}},System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Finds the pk object related to the FK object passed in via the relation specified.
            </summary>
            <param name="pkSideHashes">Pk side hashes hashtable to quickly find an entity based on the hash of the PK</param>
            <param name="fkHash">Fk hash value</param>
            <param name="fkObject">Fk object, to do a value compare</param>
            <param name="relation">the relation between pk and fk</param>
            <returns>the PK object related to the FK object, located in the pkSideHashes. if not found, null is returned.</returns>
            <remarks>Used in merging during prefetch path fetches</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.FindPkObject(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}},System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>
            Finds the parent object related to the child object which hash is passed in. The routine tries to find first a match using the hash, and then tries to
            locate the real entity, if there are more than 1 element for a given hashvalue.
            </summary>
            <param name="parentSideHashes">The parent side hashes.</param>
            <param name="childHash">The child hash.</param>
            <param name="childSideFields">The child side fields. This can be a set of FK fields, or a set of PK fields, depending on the usage of the routine.</param>
            <param name="pkSideFields">The pk side fields.</param>
            <returns>
            the parent object related to the child object, located in the parentSideHashes. If not found, null is returned.
            </returns>
            <remarks>Worker routine for overload which accepts a relation, and also the merger for excluded fields fetch</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.FindStartEntity(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}},System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Data.DataRow)">
            <summary>
            Finds the start entity related to the end entity passed in via the relation specified.
            </summary>
            <param name="startEntityHashes">start entity hash to arraylist with startentity (root entities) matching this hash</param>
            <param name="startEntityHash">startentity hash value</param>
            <param name="relation">the relation between intermediate and start entity, required to retrieve the right values from the datarow</param>
            <param name="row">datarow with start-end PK fields, one relation per row.</param>
            <returns>the start entity object to find. if not found, null is returned.</returns>
            <remarks>Used in merging during prefetch path fetches</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.MergeNormal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Boolean)">
            <summary>
            Merges the fetched entities in currentElement.RetrievalCollection with the root entities for normal relations (i.e. not m:n)
            </summary>
            <param name="rootEntities">Root entities.</param>
            <param name="currentElement">Current element.</param>
            <param name="rootEntitiesArePkSide">Root entities are pk side.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.DetermineDifferentValuesForParameterizedPPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,System.Collections.Hashtable)">
            <summary>
            Determines the different values for the parameterized query fragment of a prefetch path node fetch.
            </summary>
            <param name="rootEntities">The root entities.</param>
            <param name="prefetchPath">The prefetch path.</param>
            <param name="currentElement">The current element.</param>
            <param name="values">The values hashtable to fill by this routine. Values will be filled with the different values for all fields in the 
            relation together as a string as key, value is a list of all the values, field index in relation is index in list.</param>
            <returns>
            The number of root entities which were usable.
            </returns>
            <remarks>If the relation contains more than 1 field, the returned hashtable contains only the unique tuples of the values per root entity.
            If the root entity is on the PK side, all root entities are used, as the values to add are the PK values of the root entities. If the
            root entity is on the FK side, many duplicates could exist which are filtered out by this routine.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.DetermineIfParameterizedQueryShouldBeUsedAlways(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines if a parameterized query should be used always.
            </summary>
            <param name="forceParameterizedPPath">flag if a parameterized query should be used</param>
            <param name="pkCount">The pk count.</param>
            <param name="setCount">The set count.</param>
            <param name="parameterisedPrefetchPathThreshold">The parameterised prefetch path threshold.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.ExcludeFieldsFromPersistenceInfos(System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.ExcludeIncludeFieldsList,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.Int32)">
            <summary>
            Excludes the persistenceinfo objects (set slots to null) for all excluded fields in 'excludedFields'.
            </summary>
            <param name="fields">The fields.</param>
            <param name="persistenceInfos">The persistence infos to manipulate.</param>
            <param name="hierarchyType">Type of the hierarchy the entity is in or to consider. If this is is targetperentity we have to traverse the
            complete fields list to find a field to exclude, otherwise we can rely on the fieldindex.</param>
            <param name="excludedIncludedFields">The fields to exclude or include, a list of IEntityField2 instances</param>
            <param name="discriminatorFieldIndex">Index of the discriminator field. Is -1 if the entity doesn't have any discriminator field. Used to
            ignore discriminator fields in a set of excluded fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.FilterOutIllegalExcludedFields(System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.Int32)">
            <summary>
            Filters out the illegal fields in the excluded fields list and returns the list without the illegal excluded fields. 
            </summary>
            <param name="excludedFields">The excluded fields.</param>
            <param name="hierarchyType">Type of the hierarchy.</param>
            <param name="discriminatorFieldIndex">Index of the discriminator field.</param>
            <returns>The excluded fields list without the illegal fields. Illegal fields are: PK fields, FK fields and discriminatorFields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.ExpandValuesArrayToContainExcludedFieldSlots(System.Object[],System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Expands the values array to contain slots for excluded fields so all indices on the normal set of fields match the actual fields, because
            the resultset of a fetch with excluded fields is smaller than the resultset of a normal fetch (no columns are there for excluded fields)
            </summary>
            <param name="valuesOfRow">The values of row.</param>
            <param name="numberOfFieldsInQuery">The number of fields in query.</param>
            <param name="fieldsPersistenceInfo">The fields persistence info.</param>
            <returns>
            a new object array with the values of valuesOfRow, but now with field slots for all excluded fields.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.ProduceFieldInfoToOrdinalsLookups(SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.IList,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}}}@,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.ValuePair{System.Int32,System.Int32}}@,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Boolean@)">
            <summary>
            Produces the field info to ordinals lookups, which are used during the fetch of one or more entities. 
            </summary>
            <param name="typeOfHierarchy">The type of hierarchy.</param>
            <param name="fieldsPersistenceInfo">The fields persistence infos.</param>
            <param name="fieldsUsedForQuery">The fields used for the query.</param>
            <param name="hierarchyFieldAliasesToOrdinals">The hierarchy field aliases to ordinals store.</param>
            <param name="fieldIndexToOrdinal">The field index to ordinal store.</param>
            <param name="entityFieldStartIndexesPerEntity">The entity field start indexes per entity store.</param>
            <param name="hasExcludedFields">flag if there are excluded fields found</param>
            <returns>the number of fields to fetch (thus the # of fields minus the # of excluded fields.)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.ProduceInitialDuplicateDetectionStores(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollectionCore,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}}@,System.Collections.Generic.Dictionary{System.Int32,System.Object}@)">
            <summary>
            Produces the initial duplicate detection stores for the fetch methods.
            </summary>
            <param name="collection">The collection.</param>
            <param name="objectHashtable">The object hashtable.</param>
            <param name="objectHashes">The object hashes.</param>
            <remarks>constructs hashtable for filtering out duplicates. Each hashtable entry is at first a section of
            empty cells. When a hashcode is found in the set of hashes, add an entry, if not existend to this
            hashtable. When the hashcode already is added to this hashtable, the entity of the new hashcode is
            compared to all the entities with the same hashcode in the list related to the hashcode in this table.
            when an equal object is found, it's a real duplicate, otherwise the entity is added to the list and the
            collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CheckForDuplicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore}},System.Collections.Generic.Dictionary{System.Int32,System.Object})">
            <summary>
            Checks if the passed in entity is present in the hashtables passed in. 
            </summary>
            <param name="entityToAdd">Entity which has to be tested if there was already a duplicate in the hashtables.</param>
            <param name="objectHashtable">See remarks</param>
            <param name="objectHashes">See remarks</param>
            <returns>true if there is no duplicate for hte passed in entity seen yet. False otherwise</returns>
            <remarks>construct hashtable for filtering out duplicates. Each hashtable entry is at first a section of
            empty cells. When a hashcode is found in the set of hashes, add an entry, if not existend to this
            hashtable. When the hashcode already is added to this hashtable, the entity of the new hashcode is
            compared to all the entities with the same hashcode in the list related to the hashcode in this table.
            when an equal object is found, it's a real duplicate, otherwise the entity is added to the list and the
            collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.DetermineSetAliasToUse(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Determines the set alias to use, based on the relations collection passed in.
            </summary>
            <param name="relations">The relations.</param>
            <returns>the set alias set in relations if relations isn'tnull, string.empty otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.DetermineInheritanceRelations(System.Collections.IEnumerable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            Determines the inheritance relations which are necessary to add to the query defined by fields, relations and filter.
            </summary>
            <param name="fields">The fields.</param>
            <param name="relations">The relations.</param>
            <param name="filter">The filter.</param>
            <param name="inheritanceProvider">The inheritance provider.</param>
            <returns>RelationsCollection filled with the hierarchy relations required to fulfill the query, or an empty collection if none are needed.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.PreprocessDerivedTablesForInheritanceInfo(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition},SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            Preprocesses the derived tables for inheritance info. Every derived table is processed to determine the inheritance relations. If necessary,
            these are added to the relations collection of the derivedtable. It finds all derived tables also nested ones inside derived tables, scalar queries etc.
            </summary>
            <param name="derivedTables">The derived tables.</param>
            <param name="infoProvider">The info provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.FixupDerivedTableTargetingFields(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition},SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Fixes any fields which are targeting a derived table but are actually referring to a table/view field: these fields are changed into
            derived table targeting fields, and their field names are changed to the aliases/field names used in the derived table.
            </summary>
            <param name="derivedTables">The derived tables.</param>
            <param name="fieldsToCheck">The fields to check.</param>
            <param name="selectListAlias">The select list alias. If empty, the fields are expected to have their ObjectAlias set.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="sorter">The sorter.</param>
            <param name="groupBy">The group by.</param>
            <param name="infoProvider">The info provider.</param>
            <param name="realTargetedFieldPerDerivedTableTargetingField">The set of real targeted field per derived table targeting field tuples.
            Fields in the query elements which are derived table targeting fields are stored in this dictionary with their real fields, if found.
            This list is used to obtain type converters for the derived table targeting fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.PreprocessQueryElements(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Preprocesses the query elements for derived table target misses and injects inheritance info into derived tables.
            </summary>
            <param name="fields">The fields.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="sorter">The sorter.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="infoProvider">The info provider.</param>
            <param name="realTargetedFieldPerDerivedTableTargetingField">The set of real targeted field per derived table targeting field tuples.
            Fields in the query elements which are derived table targeting fields are stored in this dictionary with their real fields, if found.
            This list is used to obtain type converters for the derived table targeting fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.PreprocessQueryElements(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore})">
            <summary>
            Preprocesses the query elements for derived table target misses and injects inheritance info into derived tables.
            </summary>
            <param name="fields">The fields.</param>
            <param name="selectListAlias">The select list alias. If empty, the fields are expected to have their ObjectAlias set.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="sorter">The sorter.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="infoProvider">The info provider.</param>
            <param name="realTargetedFieldPerDerivedTableTargetingField">The set of real targeted field per derived table targeting field tuples.
            Fields in the query elements which are derived table targeting fields are stored in this dictionary with their real fields, if found.
            This list is used to obtain type converters for the derived table targeting fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.AddInheritanceRelatedElementsToQueryElementsForEntities(SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.String,System.Int32@)">
            <summary>
            Adds the inheritance related elements to query elements for entity fetches.
            </summary>
            <param name="hierarchyType">Type of the hierarchy.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="infoProvider">The info provider.</param>
            <param name="forEntityName">Name of for entity.</param>
            <param name="discriminatorFieldIndex">Index of the discriminator field, if targetperentityhierarchy.</param>
            <remarks>This routine isn't meant for dyn.lists/projections because the entity type filter has to be determined from the factory, not
            from the fields.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.AddInheritanceRelatedElementsToQueryElementsForDynamicList(SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.String)">
            <summary>
            Adds the inheritance related elements to query elements for dynamic list.
            </summary>
            <param name="hierarchyType">Type of the hierarchy.</param>
            <param name="fields">The fields.</param>
            <param name="filter">The filter.</param>
            <param name="relations">The relations.</param>
            <param name="infoProvider">The info provider.</param>
            <param name="forEntityName">Name of for entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.AddAdditionalInheritanceRelationsToRelationCollectionBasedOnFilter(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            Adds additional inheritance hierarchy relations if necessary for filters which target entities which aren't in the pack.
            </summary>
            <param name="relations">The relations.</param>
            <param name="filter">The filter.</param>
            <param name="infoProvider">The info provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CleanupDataReader(System.Data.IDataReader,SD.LLBLGen.Pro.ORMSupportClasses.IQuery)">
            <summary>
            Cleans up the data reader (closes it if necessary and disposes it)
            </summary>
            <param name="reader">The reader.</param>
            <param name="queryExecuted">The query executed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CleanupDataReader(System.Data.IDataReader,SD.LLBLGen.Pro.ORMSupportClasses.IQuery,System.Boolean)">
            <summary>
            Cleans up the data reader (closes it if necessary and disposes it)
            </summary>
            <param name="reader">The reader.</param>
            <param name="queryExecuted">The query executed.</param>
            <param name="disposeReader">if set to <c>true</c> [dispose reader].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CalculateNumberOfBatchesForExcludedFieldsFetch(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the number of batches for excluded fields fetch.
            </summary>
            <param name="numberOfPkFields">The number of pk fields.</param>
            <param name="numberOfEntities">The number of entities.</param>
            <param name="batchSize">Size of the batch.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.FixMaxLengthPrecisionScaleInDerivedTableTargetingFields(System.Collections.Generic.Dictionary{SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.DerivedTableDefinition})">
            <summary>
            Fixes the maxlength, precision and scale in derived table targeting fields.
            </summary>
            <param name="derivedTablePerField">The derived table per field.</param>
            <returns>list of derived table targeting fields with their actual real field target.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceCore.CalculateHashForEntityBasedOnRelation(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Boolean,System.Boolean@)">
            <summary>
            Calculates the hash value for entity based on relation and the flag which specifies which side of the relation to use for the field names.
            </summary>
            <param name="entity">The entity.</param>
            <param name="relation">The relation.</param>
            <param name="forPkSide">if set to true, it will calculate the hash based on the pk fields in the entity as defined in the specified relation, 
            otherwise the fk fields from the entity as defined in the relation are used for calculating the hashvalue.</param>
            <param name="hashRejected">if set to true, the hashvalue was rejected, which means the hash couldn't be calculated as the entity didn't have
            one or more fields defined in the relation, which is true when a supertype was in while the relation was for a subtype prefetch path.</param>
            <returns>the hashvalue requested, or -1 if not applicable</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper">
            <summary>
            Small class which wraps a predicate so it can be placed in an IExpression element, like a scalar query expression or dbfunction call.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper"/> class.
            </summary>
            <param name="predicateToWrap">The predicate to wrap.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters,
            and conversion routines, and field names, including prefix/postfix characters.
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateWrapper.WrappedPredicate">
            <summary>
            Gets the wrapped predicate.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ProjectionUtils">
            <summary>
            Class which contains utility methods used for data projection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ProjectionUtils.CreateHashCodeFromValues(System.Collections.IList,System.Object[])">
            <summary>
            Creates the hash value for an array of values, and uses all values in the array to produce the hashvalue.
            </summary>
            <param name="projectors">The projectors.</param>
            <param name="values">The values.</param>
            <returns>Hashvalue which represents the passed in array of values.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ProjectionUtils.FetchProjectionFromReader(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IDataValueProjector},SD.LLBLGen.Pro.ORMSupportClasses.IGeneralDataProjector,System.Data.IDataReader,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String},System.Collections.Generic.Dictionary{System.Int32,System.ComponentModel.TypeConverter})">
            <summary>
            creates a projection from the passed in reader, using the client side specifications provided.
            </summary>
            <param name="valueProjectors">The value projectors.</param>
            <param name="projector">The projector.</param>
            <param name="datasource">The datareader to read from</param>
            <param name="maxNumberOfItemsToReturn">The max number of items to return.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="clientSideLimitation">if set to <c>true</c> [client side limitation].</param>
            <param name="clientSideDistinctFiltering">if set to <c>true</c> [client side distinct filtering].</param>
            <param name="clientSidePaging">if set to <c>true</c> [client side paging].</param>
            <param name="stringCache">The string cache which is used to 'unique' the string values so string values are loaded into memory just once.</param>
            <param name="typeConvertersToRun">The type converters to use for the query. The key is the index in the result row, the value is the type converter
            to run on that value. These type converters have to run prior to the projectors will run.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ProjectionUtils.UniqueStringsInRow(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.UniqueList{System.String})">
            <summary>
            Uniques the strings in row using the stringcache passed in.
            </summary>
            <param name="row">The row.</param>
            <param name="stringCache">The string cache.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap">
            <summary>
            Class which is used to store maps to referenced entities to be able to serialize an entity which is referenced multiple times only once.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap"/> class.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.GetReferencedEntities">
            <summary>
            Gets the referenced entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.GetSeenEntities">
            <summary>
            Gets the entities seen
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.Add(System.Object)">
            <summary>
            Adds the specified root.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.ProcessQueues">
            <summary>
            Processes the queues.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.AddEntity(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2)">
            <summary>
            Adds the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.ReferencedCount">
            <summary>
            Gets the # of referenced entities
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.SeenEntityCount">
            <summary>
            Gets the seen entity count.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.ReferencedWithGuidCount">
            <summary>
            Gets the # of referenced entities which have already an ObjectID set
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.ReferencedWithoutGuidCount">
            <summary>
            Gets the # of referenced entities which don't have an ObjectID set yet
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.SeenWithGuidCount">
            <summary>
            Gets the # of seen entities which have already an ObjectID set
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.SeenWithoutGuidCount">
            <summary>
            Gets the # of seen entities which have already an ObjectID set
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ReferencedEntityMap.ReferencedEntityComparer">
            <summary>
            Comparer used for checking entity equality based on references, not contents. This is necessary as entities override Equals. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable">
            <summary>
            Specialized Hashtable which contains name-value pairs for name overwriting for schema names names in adapter 
            on some databases (db2, sqlserver and oracle)
            </summary>
            <remarks>Stores the overwrites in a from-to way, so the key is the from name and the name it should be come is in the value.
            You can use a wildcard in the form (key) part: * to define a name for all schema names in the persistence info.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
            <param name="schemaNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="schemaNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
            <param name="schemaNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.SchemaNameUsageSetting">
            <summary>
            Gets / sets schemaNameUsageSetting
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper">
            <summary>
            Helper class containing:
            - The default serialization to use.
            - Some string constants used as names in SerializationInfo
            - Some shared routines used for fast serialization to save duplication
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.SerializationKey">
            <summary>
            Name under which the data is stored in the info block. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Optimization">
            <summary>
            Set this field to the serialization optimization you want to use, application wide. Default: None (use the regular binary formatter serialization
            / deserialization). 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Compressor">
            <summary>
            Setting for the compressor to use on the serialized bytestream. Default: none. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.PreserveObjectIDs">
            <summary>
            Flag to signal if ObjectID's should be serialized into the output or not. Default: true.
            </summary>
            <remarks>Setting this to false will result in smaller datablocks. However if you use a context on the server/client or otherwise need to 
            have the entity objects look like the same object when a roundtrip occurs to server/client, you have to keep this flag set to 'false', otherwise
            every time the entity object is deserialized it will get a new ObjectID. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.SerializeEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Boolean)">
            <summary>
            Serializes the entity fields passed in. 
            </summary>
            <param name="writer">The writer.</param>
            <param name="fields">The fields.</param>
            <param name="isDirty">flag if the fields passed in are dirty. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.DeserializeEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Boolean,System.Boolean)">
            <summary>
            Deserializes the entity fields data passed in into the fields object passed in.
            </summary>
            <param name="reader">The reader.</param>
            <param name="fields">The fields.</param>
            <param name="isDirty">Flag to signal if the field data contains dirty field(s)</param>
            <param name="isNew">Flag to signal if the entity is new</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.SerializeSimpleReadOnlyTableData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Data.DataTable)">
            <summary>
            Serializes the simple read only table data, which are stored in datatables (which are the base class for typedlists/views)
            </summary>
            <param name="writer">The writer.</param>
            <param name="table">The table.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.DeserializeSimpleReadOnlyTableData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Data.DataTable)">
            <summary>
            Deserializes the simple read only table data into the datatable passed in. 
            </summary>
            <param name="reader">The reader.</param>
            <param name="table">The table.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.GetSerializedBytes(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Gets the serialized bytes.
            </summary>
            <param name="info">The info.</param>
            <returns>The serialized bytes</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.PutSerializedBytes(System.Runtime.Serialization.SerializationInfo,SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter)">
            <summary>
            Puts the serialized bytes into the SerializationInfo block, under the SerializationHelper.SerializationKey key. 
            </summary>
            <param name="info">The info.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the specified entity collection.
            </summary>
            <param name="entityCollection">The entity collection.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the specified entity collection.
            </summary>
            <param name="entityCollection">The entity collection.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the specified typed view.
            </summary>
            <param name="typedView">The typed view.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the specified typed view.
            </summary>
            <param name="typedView">The typed view.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the specified typed list.
            </summary>
            <param name="typedList">The typed list.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the specified typed list.
            </summary>
            <param name="typedList">The typed list.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes the specified unit of work.
            </summary>
            <param name="unitOfWork">The unit of work.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationHelper.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes the specified unit of work.
            </summary>
            <param name="unitOfWork">The unit of work.</param>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader">
             <summary>
             A SerializationReader instance is used to read stored values and objects from a byte array.
            
             Once an instance is created, use the various methods to read the required data.
             The data read MUST be exactly the same type and in the same order as it was written.
             </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.DumpStringTables(System.Collections.ArrayList)">
            <summary>
            Dumps the string tables.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.#ctor(System.Byte[])">
            <summary>
            Creates a SerializationReader using a byte[] previous created by SerializationWriter
            
            A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data">The byte[] containining serialized data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a SerializationReader based on the passed Stream.
            </summary>
            <param name="stream">The stream containing the serialized data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="useTokenTablePresizeInfo">if set to <c>true</c> [use token table presize info].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Creates a SerializationReader based around the passed Stream.
            Allows the string and object token tables to be presized using
            the specified values.
            </summary>
            <param name="stream">The stream containing the serialized data</param>
            <param name="stringTokenTablePresize">Number of string tokens to presize</param>
            <param name="objectTokenTablePresize">Number of object tokens to presize</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadArrayList">
            <summary>
            Returns an ArrayList or null from the stream.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadBitArray">
            <summary>
            Returns a BitArray or null from the stream.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadBitVector32">
            <summary>
            Returns a BitVector32 value from the stream.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadBytesDirect(System.Int32)">
            <summary>
            Reads the specified number of bytes directly from the stream.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>A byte[] containing the read bytes</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadObject">
            <summary>
            Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadString">
            <summary>
            Called ReadOptimizedString().
            This override to hide base BinaryReader.ReadString().
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadStringDirect">
            <summary>
            Returns a string value from the stream.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadType">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadType(System.Boolean)">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedArrayList">
            <summary>
            Returns an ArrayList from the stream that was stored optimized.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedBitArray">
            <summary>
            Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedBitVector32">
            <summary>
            Returns a BitVector32 value from the stream that was stored optimized.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedDateTime">
            <summary>
            Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedDecimal">
            <summary>
            Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedInt32">
            <summary>
            Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedInt16">
            <summary>
            Returns an Int16 value from the stream that was stored optimized.
            </summary>
            <returns>An Int16 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedInt64">
            <summary>
            Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedObjectArray">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            </summary>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedObjectArrayPair(System.Object[]@,System.Object[]@)">
            <summary>
            Returns a pair of object[] arrays from the stream that were stored optimized.
            </summary>
            <returns>A pair of object[] arrays.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedString">
            <summary>
            Returns a string value from the stream that was stored optimized.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedType">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedType(System.Boolean)">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedUInt16">
            <summary>
            Returns a UInt16 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt16 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedUInt32">
            <summary>
            Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedUInt64">
            <summary>
            Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTypedArray">
            <summary>
            Returns a typed array from the stream.
            </summary>
            <returns>A typed array.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDictionary``2">
            <summary>
            Returns a new, simple generic dictionary populated with keys and values from the stream.
            </summary>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
            <returns>A new, simple, populated generic Dictionary.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Populates a pre-existing generic dictionary with keys and values from the stream.
            This allows a generic dictionary to be created without using the default constructor.
            </summary>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadList``1">
            <summary>
            Returns a generic List populated with values from the stream.
            </summary>
            <typeparam name="T">The list Type.</typeparam>
            <returns>A new generic List.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullable">
            <summary>
            Returns a Nullable struct from the stream.
            The value returned must be cast to the correct Nullable type.
            Synonym for ReadObject();
            </summary>
            <returns>A struct value or null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableBoolean">
            <summary>
            Returns a Nullable Boolean from the stream.
            </summary>
            <returns>A Nullable Boolean.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableByte">
            <summary>
            Returns a Nullable Byte from the stream.
            </summary>
            <returns>A Nullable Byte.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableChar">
            <summary>
            Returns a Nullable Char from the stream.
            </summary>
            <returns>A Nullable Char.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableDateTime">
            <summary>
            Returns a Nullable DateTime from the stream.
            </summary>
            <returns>A Nullable DateTime.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableDecimal">
            <summary>
            Returns a Nullable Decimal from the stream.
            </summary>
            <returns>A Nullable Decimal.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableDouble">
            <summary>
            Returns a Nullable Double from the stream.
            </summary>
            <returns>A Nullable Double.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableGuid">
            <summary>
            Returns a Nullable Guid from the stream.
            </summary>
            <returns>A Nullable Guid.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableInt16">
            <summary>
            Returns a Nullable Int16 from the stream.
            </summary>
            <returns>A Nullable Int16.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableInt32">
            <summary>
            Returns a Nullable Int32 from the stream.
            </summary>
            <returns>A Nullable Int32.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableInt64">
            <summary>
            Returns a Nullable Int64 from the stream.
            </summary>
            <returns>A Nullable Int64.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableSByte">
            <summary>
            Returns a Nullable SByte from the stream.
            </summary>
            <returns>A Nullable SByte.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableSingle">
            <summary>
            Returns a Nullable Single from the stream.
            </summary>
            <returns>A Nullable Single.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableTimeSpan">
            <summary>
            Returns a Nullable TimeSpan from the stream.
            </summary>
            <returns>A Nullable TimeSpan.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableUInt16">
            <summary>
            Returns a Nullable UInt16 from the stream.
            </summary>
            <returns>A Nullable UInt16.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableUInt32">
            <summary>
            Returns a Nullable UInt32 from the stream.
            </summary>
            <returns>A Nullable UInt32.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadNullableUInt64">
            <summary>
            Returns a Nullable UInt64 from the stream.
            </summary>
            <returns>A Nullable UInt64.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadByteArray">
            <summary>
            Returns a Byte[] from the stream.
            </summary>
            <returns>A Byte instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadCharArray">
            <summary>
            Returns a Char[] from the stream.
            </summary>
            <returns>A Char[] value; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDoubleArray">
            <summary>
            Returns a Double[] from the stream.
            </summary>
            <returns>A Double[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadGuidArray">
            <summary>
            Returns a Guid[] from the stream.
            </summary>
            <returns>A Guid[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadInt16Array">
            <summary>
            Returns an Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadObjectArray">
            <summary>
            Returns an object[] or null from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadObjectArray(System.Type)">
            <summary>
            Returns an object[] or null from the stream.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadSingleArray">
            <summary>
            Returns a Single[] from the stream.
            </summary>
            <returns>A Single[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadSByteArray">
            <summary>
            Returns an SByte[] from the stream.
            </summary>
            <returns>An SByte[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadStringArray">
            <summary>
            Returns a string[] or null from the stream.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadInt32Array">
            <summary>
            Returns an Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadInt64Array">
            <summary>
            Returns an Int64[] from the stream.
            </summary>
            <returns>An Int64[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedStringArray">
            <summary>
            Returns a string[] from the stream that was stored optimized.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadUInt32Array">
            <summary>
            Returns a UInt[] from the stream.
            </summary>
            <returns>A UInt[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedInt16Array">
            <summary>
            Returns a Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedInt32Array">
            <summary>
            Returns a Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedInt64Array">
            <summary>
            Returns a Int64[] from the stream.
            </summary>
            <returns>A Int64[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedUInt32Array">
            <summary>
            Returns a UInt32[] from the stream.
            </summary>
            <returns>A UInt32[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOptimizedUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows an existing object, implementing IOwnedDataSerializable, to 
            retrieve its owned data from the stream.
            </summary>
            <param name="target">Any IOwnedDataSerializable object.</param>
            <param name="context">An optional, arbitrary object to allow context to be provided.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTokenizedObject">
            <summary>
            Returns the object associated with the object token read next from the stream.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.InitializeTokenTables(System.Int32,System.Int32)">
            <summary>
            Initializes the token tables.
            </summary>
            <param name="stringTokenTablePresize">The string token table presize.</param>
            <param name="objectTokenTablePresize">The object token table presize.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.DecodeTimeSpan(System.Byte)">
            <summary>
            Returns a TimeSpan decoded from packed data.
            This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
            <remarks>
            This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
            next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
            which are never set for a Time portion of a DateTime.
            </remarks>
            </summary>
            <param name="initialByte">The first of two always-present bytes.</param>
            <returns>A decoded TimeSpan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTypedArrayOptimizeFlags(SD.LLBLGen.Pro.ORMSupportClasses.SerializedType)">
            <summary>
            Creates a BitArray representing which elements of a typed array
            are serializable.
            </summary>
            <param name="serializedType">The type of typed array.</param>
            <returns>A BitArray denoting which elements are serializable.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ProcessObject(SD.LLBLGen.Pro.ORMSupportClasses.SerializedType)">
            <summary>
            Returns an object based on supplied SerializedType.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ProcessArrayTypes(SD.LLBLGen.Pro.ORMSupportClasses.SerializedType,System.Type)">
            <summary>
            Determine whether the passed-in type code refers to an array type
            and deserializes the array if it is.
            Returns null if not an array type.
            </summary>
            <param name="typeCode">The SerializedType to check.</param>
            <param name="defaultElementType">The Type of array element; null if to be read from stream.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTokenizedString(System.Int32)">
            <summary>
            Returns the string value associated with the string token read next from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadTypeCode">
            <summary>
            Returns the SerializedType read next from the stream.
            </summary>
            <returns>A SerializedType value.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadBooleanArrayInternal">
            <summary>
            Internal implementation returning a Bool[].
            </summary>
            <returns>A Bool[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadByteArrayInternal">
            <summary>
            Internal implementation returning a Byte[].
            </summary>
            <returns>A Byte[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadCharArrayInternal">
            <summary>
            Internal implementation returning a Char[].
            </summary>
            <returns>A Char[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDecimalArrayInternal">
            <summary>
            Internal implementation returning a Decimal[].
            </summary>
            <returns>A Decimal[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadDoubleArrayInternal">
            <summary>
            Internal implementation returning a Double[].
            </summary>
            <returns>A Double[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadGuidArrayInternal">
            <summary>
            Internal implementation returning a Guid[].
            </summary>
            <returns>A Guid[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadSByteArrayInternal">
            <summary>
            Internal implementation returning an SByte[].
            </summary>
            <returns>An SByte[].</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.ReadSingleArrayInternal">
            <summary>
            Internal implementation returning a Single[].
            </summary>
            <returns>A Single[].</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader.BytesRemaining">
            <summary>
            Returns the number of bytes or serialized remaining to be processed.
            Useful for checking that deserialization is complete.
            
            Warning: Retrieving the Position in certain stream types can be expensive,
            e.g. a FileStream, so use sparingly unless known to be a MemoryStream.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils">
            <summary>
            Small class which helps with versioning in binary normal serialization code. It allows swallowing of exceptions which occur when 
            incompatible binary data is deserialized with newer code which expects members to be there.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils.InfoGetString(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Will try to read the value for the field named as the name specified in fieldName.
            If the field doesn't exist, an empty string is returned.
            </summary>
            <param name="info">info structure which values.</param>
            <param name="fieldName">name of field to read. Must be string field</param>
            <returns>the value read from info, otherwise an empty string</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils.InfoGetString(System.Runtime.Serialization.SerializationInfo,System.String,System.String)">
            <summary>
            Will try to read the value for the field named as the name specified in fieldName.
            If the field doesn't exist, an empty string is returned.
            </summary>
            <param name="info">info structure which values.</param>
            <param name="fieldName">name of field to read. Must be string field</param>
            <param name="defaultValue">the default value to return, if the value to deserialize isn't found</param>
            <returns>the value read from info, otherwise an empty string</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils.InfoGetBoolean(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Will try to read the value for the field named as the name specified in fieldName.
            If the field doesn't exist, false is returned.
            </summary>
            <param name="info">info structure which values.</param>
            <param name="fieldName">name of field to read. Must be boolean field</param>
            <returns>the value read from info, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils.InfoGetInt32(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Will try to read the value for the field named as the name specified in fieldName.
            If the field doesn't exist, 0 is returned.
            </summary>
            <param name="info">info structure which values.</param>
            <param name="fieldName">name of field to read. Must be boolean field</param>
            <returns>the value read from info, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils.InfoGetInt32(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32)">
            <summary>
            Will try to read the value for the field named as the name specified in fieldName.
            If the field doesn't exist, 0 is returned.
            </summary>
            <param name="info">info structure which values.</param>
            <param name="fieldName">name of field to read. Must be boolean field</param>
            <param name="defaultValue">the value to return if the value to deserialize isn't found</param>
            <returns>the value read from info, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationUtils.InfoGetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>
            Will try to read the value for the field named as the name specified in fieldName.
            If the field doesn't exist, null is returned.
            </summary>
            <param name="info">info structure which values.</param>
            <param name="fieldName">name of field to read. Must be boolean field</param>
            <param name="typeOfValue">type of the value to read</param>
            <returns>the value read from info, otherwise false</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter">
            <summary>
            Class which defines the writer for serialized data using the fast serialization optimization.
            A SerializationWriter instance is used to store values and objects in a byte array.
            <br/><br/>
            Once an instance is created, use the various methods to store the required data.
            ToArray() will return a byte[] containing all of the data required for deserialization.
            This can be stored in the SerializationInfo parameter in an ISerializable.GetObjectData() method.
            <para/>
            As an alternative to ToArray(), if you want to apply some post-processing to the serialized bytes, 
            such as compression, call AppendTokenTables first to ensure that the string and object token tables 
            are appended to the stream, and then cast BaseStream to MemoryStream. You can then access the
            MemoryStream's internal buffer as follows:
            <para/>
            <example><code>
            writer.AppendTokenTables();
            MemoryStream stream = (MemoryStream) writer.BaseStream;
            serializedData = MyCompressor.Compress(stream.GetBuffer(), (int)stream.Length);
            </code></example>
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.HighestOptimizable16BitValue">
            <summary>
            Holds the highest Int16 that can be optimized into less than the normal 2 bytes
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
            Holds the highest Int32 that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
            Holds the highest Int64 that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.DefaultCapacity">
            <summary>
            Default capacity for the underlying MemoryStream
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.DefaultOptimizeForSize">
            <summary>
            The Default setting for the OptimizeForSize property.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.DefaultPreserveDecimalScale">
            <summary>
            The Default setting for the PreserveDecimalScale property.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter._typeSurrogates">
            <summary>
            Holds a list of optional IFastSerializationTypeSurrogate instances which SerializationWriter and SerializationReader will use to serialize objects
            not directly supported. It is important to use the same list on both client and server ends to ensure
            that the same surrogated-types are supported.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.DateYearMask">
            <summary>
            Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.IsNegativeSection">
            <summary>
            Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter._typeUsage">
            <summary>
            type usage member in which counters are stored of all the known types emitted into the output stream. For debugging purposes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.DumpTypeUsage">
            <summary>
            Dumps the type usage.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.#ctor">
            <summary>
            Creates a FastSerializer with the Default Capacity (1kb)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.#ctor(System.Int32)">
            <summary>
            Creates a FastSerializer with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a FastSerializer around the specified stream
            Will store token table presize info if the stream is seekable
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a FastSerializer around the specified stream
            Notes:
            If the stream is not seekable then the allowStoreTokenTablePresizeInfo parameter is ignored
            </summary>
            <param name="stream">The stream in which to store data</param>
            <param name="allowStoreTokenTablePresizeInfo">true if token table presize 
            information can be stored; false otherwise</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Collections.ArrayList)">
            <summary>
            Writes an ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null Arraylist takes 1 byte.
            An empty ArrayList takes 2 bytes.
            The contents are stored using WriteOptimized(ArrayList) which should be used
            if the ArrayList is guaranteed never to be null.
            </summary>
            <param name="value">The ArrayList to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
            Writes a BitArray value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null BitArray takes 1 byte.
            An empty BitArray takes 2 bytes.
            </summary>
            <param name="value">The BitArray value to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream.
            Stored Size: 4 bytes.
            </summary>
            <param name="value">The BitVector32 to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The DateTime value to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Guid)">
            <summary>
            Writes a Guid into the stream.
            Stored Size: 16 bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows any object implementing IOwnedDataSerializable to serialize itself
            into this SerializationWriter.
            A context may also be used to give the object an indication of what data
            to store. As an example, using a BitVector32 gives a list of flags and
            the object can conditionally store data depending on those flags.
            </summary>
            <param name="target">The IOwnedDataSerializable object to ask for owned data</param>
            <param name="context">An arbtritrary object but BitVector32 recommended</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteObject(System.Object)">
            <summary>
            Stores an object into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on type and/or content.
            
            1 byte: null, DBNull.Value, Boolean
            
            1 to 2 bytes: Int16, UInt16, Byte, SByte, Char, 
            
            1 to 4 bytes: Int32, UInt32, Single, BitVector32
            
            1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
            
            1 or 16 bytes: Guid
            
            1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
            
            Any other object be stored using a .Net Binary formatter but this should 
            only be allowed as a last resort:
            Since this is effectively a different serialization session, there is a 
            possibility of the same shared object being serialized twice or, if the 
            object has a reference directly or indirectly back to the parent object, 
            there is a risk of looping which will throw an exception.
            
            The type of object is checked with the most common types being checked first.
            Each 'section' can be reordered to provide optimum speed but the check for
            null should always be first and the default serialization always last.
            
            Once the type is identified, a SerializedType byte is stored in the stream
            followed by the data for the object (certain types/values may not require
            storage of data as the SerializedType may imply the value).
            
            For certain objects, if the value is within a certain range then optimized
            storage may be used. If the value doesn't meet the required optimization
            criteria then the value is stored directly.
            The checks for optimization may be disabled by setting the OptimizeForSize
            property to false in which case the value is stored directly. This could 
            result in a slightly larger stream but there will be a speed increate to
            compensate.
            </summary>
            <param name="value">The object to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.String)">
            <summary>
            Calls WriteOptimized(string).
            This override to hide base BinaryWriter.Write(string).
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The TimeSpan value to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Type,System.Boolean)">
            <summary>
            Stores a Type object into the stream.
            Stored Size: Depends on the length of the Type's name and whether the fullyQualified parameter is set.
            A null Type takes 1 byte.
            </summary>
            <param name="value">The Type to store.</param>
            <param name="fullyQualified">true to store the AssemblyQualifiedName or false to store the FullName. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Collections.ArrayList)">
            <summary>
            Writes an non-null ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty ArrayList takes 1 byte.
            </summary>
            <param name="value">The ArrayList to store. Must not be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
            Writes a BitArray into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty BitArray takes 1 byte.
            </summary>
            <param name="value">The BitArray value to store. Must not be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream using the fewest number of bytes possible.
            Stored Size: 1 to 4 bytes. (.Net is 4 bytes)
             1 to  7 bits takes 1 byte
             8 to 14 bits takes 2 bytes
            15 to 21 bits takes 3 bytes
            22 to 28 bits takes 4 bytes
            -------------------------------------------------------------------
            29 to 32 bits takes 5 bytes - use Write(BitVector32) method instead
            
            Try to order the BitVector32 masks so that the highest bits are least-likely
            to be set.
            </summary>
            <param name="value">The BitVector32 to store. Must not use more than 28 bits.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream using the fewest number of bytes possible.
            Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
            Notes:
            A DateTime containing only a date takes 3 bytes
            (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
            of 5 bytes - no further optimization for this situation felt necessary since it
            is unlikely that a DateTimeKind would be specified without hh:mm also)
            Date plus hh:mm takes 5 bytes.
            Date plus hh:mm:ss takes 6 bytes.
            Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value">The DateTime value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
            Writes a Decimal value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
            Restrictions: None
            </summary>
            <param name="value">The Decimal value to store</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Int16)">
            <summary>
            Write an Int16 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000 - 0x007f (0 to 127) takes 1 byte
            0x0080 - 0x03FF (128 to 16,383) takes 2 bytes
            ----------------------------------------------------------------
            0x0400 - 0x7FFF (16,384 to 32,767) takes 3 bytes
            All negative numbers take 3 bytes
            
            Only call this method if the value is known to be between 0 and 
            16,383 otherwise use Write(Int16 value)
            </remarks>
            <param name="value">The Int16 to store. Must be between 0 and 16,383 inclusive.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
            Write an Int32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
            All negative numbers take 5 bytes
            
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value">The Int32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
            Write an Int64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            All negative numbers take 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(Int64 value)
            </remarks>
            <param name="value">The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.String)">
            <summary>
            Writes a string value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on string length
            Notes:
            Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
            Any other single char string is stored as two bytes
            All other strings are stored in a string token list:
            
            The TypeCode representing the current string token list is written first (1 byte), 
            followed by the string token itself (1-4 bytes)
            
            When the current string list has reached 128 values then a new string list
            is generated and that is used for generating future string tokens. This continues
            until the maximum number (128) of string lists is in use, after which the string 
            lists are used in a round-robin fashion.
            By doing this, more lists are created with fewer items which allows a smaller 
            token size to be used for more strings.
            
            The first 16,384 strings will use a 1 byte token.
            The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
            The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
            The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
            Notes:
            hh:mm (time) are always stored together and take 2 bytes.
            If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
            since the seconds are stored in the minutes position.
            If milliseconds are present then 4 bytes.
            In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value">The TimeSpan value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
            Stores a non-null Type object into the stream.
            Stored Size: Depends on the length of the Type's name.
            If the type is a System type (mscorlib) then it is stored without assembly name information,
            otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value">The Type to store. Must not be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.UInt16)">
            <summary>
            Write a UInt16 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000 - 0x007f (0 to 127) takes 1 byte
            0x0080 - 0x03FF (128 to 16,383) takes 2 bytes
            ----------------------------------------------------------------
            0x0400 - 0xFFFF (16,384 to 65,536) takes 3 bytes
            
            Only call this method if the value is known to  be between 0 and 
            16,383 otherwise use Write(UInt16 value)
            </remarks>
            <param name="value">The UInt16 to store. Must be between 0 and 16,383 inclusive.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
            Write a UInt32 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
            
            Only call this method if the value is known to  be between 0 and 
            268,435,455 otherwise use Write(UInt32 value)
            </remarks>
            <param name="value">The UInt32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
            Write a UInt64 value using the fewest number of bytes possible.
            </summary>
            <remarks>
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </remarks>
            <param name="value">The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Boolean[])">
            <summary>
            Writes a Boolean[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Boolean[]).
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Byte[])">
            <summary>
            Writes a Byte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Char[])">
            <summary>
            Writes a Char[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Decimal[]).
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Double[])">
            <summary>
            Writes a Double[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Single[])">
            <summary>
            Writes a Single[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Guid[])">
            <summary>
            Writes a Guid[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Object[])">
            <summary>
            Writes an object[] into the stream.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            A null object[] takes 1 byte.
            An empty object[] takes 2 bytes.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.SByte[])">
            <summary>
            Writes an SByte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.Int16[])">
            <summary>
            Writes an Int16[]or a null into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(decimal[]).
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Boolean[])">
            <summary>
            Writes an optimized Boolean[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            Stored as a BitArray.
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Object[])">
            <summary>
            Writes a not-null object[] into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            An empty object[] takes 1 byte.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store. Must not be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Object[],System.Object[])">
            <summary>
            Writes a pair of object[] arrays into the stream using the fewest number of bytes possible.
            The arrays must not be null and must have the same length
            The first array's values are written optimized
            The second array's values are compared against the first and, where identical, will be stored
            using a single byte.
            Useful for storing entity data where there is a before-change and after-change set of value pairs
            and, typically, only a few of the values will have changed.
            </summary>
            <param name="values1">The first object[] value which must not be null and must have the same length as values2</param>
            <param name="values2">The second object[] value which must not be null and must have the same length as values1</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Int16[])">
            <summary>
            Writes an Int16[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteOptimized(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteNullable(System.ValueType)">
            <summary>
            Writes a Nullable type into the stream.
            Synonym for WriteObject().
            </summary>
            <param name="value">The Nullable value to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Writes a non-null generic Dictionary into the stream.
            </summary>
            <remarks>
            The key and value types themselves are not stored - they must be 
            supplied at deserialization time.
            <para/>
            An array of keys is stored followed by an array of values.
            </remarks>
            <typeparam name="K">The key Type.</typeparam>
            <typeparam name="V">The value Type.</typeparam>
            <param name="value">The generic dictionary.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            Writes a non-null generic List into the stream.
            </summary>
            <remarks>
            The list type itself is not stored - it must be supplied
            at deserialization time.
            <para/>
            The list contents are stored as an array.
            </remarks>
            <typeparam name="T">The list Type.</typeparam>
            <param name="value">The generic List.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteTypedArray(System.Array)">
            <summary>
            Writes a null or a typed array into the stream.
            </summary>
            <param name="values">The array to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.AppendTokenTables">
             <summary>
             Ensures that the size of the string and object token tables 
             are appended to the stream and that their offset is written
             into the first 4 bytes of the stream.
             
             Does nothing if the stream is not seekable or the constructor
             specified not to store presize information.
            
             Notes:
             Called automatically by ToArray() otherwise must be called
             manually.
             </summary>
             <returns>0</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.ToArray">
            <summary>
            Returns a byte[] containing all of the serialized data
            where the underlying stream is a MemoryStream.
            
            Only call this method once all of the data has been serialized.
            
            </summary>
            <returns>A byte[] containing all serialized data.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteBytesDirect(System.Byte[])">
            <summary>
            Writes a byte[] directly into the stream.
            The size of the array is not stored so only use this method when
            the number of bytes will be known at deserialization time.
            
            A null value will throw an exception
            </summary>
            <param name="value">The byte[] to store. Must not be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteStringDirect(System.String)">
            <summary>
            Writes a non-null string directly to the stream without tokenization.
            </summary>
            <param name="value">The string to store. Must not be null.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteTokenizedObject(System.Object)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            The object will be serialized once and recreated at deserialization time.
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteTokenizedObject(System.Object,System.Boolean)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            When recreateFromType is set to true, the object's Type will be stored and the object recreated using 
            Activator.GetInstance with a parameterless contructor. This is useful for stateless, factory-type classes.
            
            When recreateFromType is set to false, the object will be serialized once and recreated at deserialization time.
            
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
            <param name="recreateFromType">true if the object can be recreated using a parameterless constructor; 
            false if the object should be serialized as-is</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.FindSurrogateForType(System.Type)">
            <summary>
            Finds the surrogate type for the type passed in.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.CreateBinaryFormatter">
            <summary>
            Creates the binary formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.EncodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Encodes a TimeSpan into the fewest number of bytes.
            Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
            can also use this for .NET 2.0 DateTimeKind information.
            By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
            and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
            unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value">The TimeSpan to store.</param>
            <param name="partOfDateTime">True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan.</param>
            <param name="initialData">The intial data for the BitVector32 - contains DateTimeKind or 0</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.CheckOptimizable(System.Boolean,System.String)">
            <summary>
            Checks whether an optimization condition has been met and throw an exception if not.
            
            This method has been made conditional on THROW_IF_NOT_OPTIMIZABLE being set at compile time.
            By default, this isn't set but could be set explicitly if exceptions are required and
            the evaluation overhead is acceptable. 
            If not set, then this method and all references to it are removed at compile time.
            
            Leave at the default for optimum usage.
            </summary>
            <param name="condition">An expression evaluating to true if the optimization condition is met, false otherwise.</param>
            <param name="message">The message to include in the exception should the optimization condition not be met.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write7bitEncodedSigned32BitValue(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int32) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int32 value to encode.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write7bitEncodedSigned64BitValue(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int64) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write7bitEncodedUnsigned32BitValue(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(UInt32) for details of the values that are optimizable.
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.Write7bitEncodedUnsigned64BitValue(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(ULong) for details of the values that are optimizable.
            </summary>
            <param name="value">The ULong value to encode.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Boolean[])">
            <summary>
            Internal implementation to store a non-null Boolean[].
            </summary>
            <remarks>
            Stored as a BitArray for optimization.
            </remarks>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Byte[])">
            <summary>
            Internal implementation to store a non-null Byte[].
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Char[])">
            <summary>
            Internal implementation to store a non-null Char[].
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non, null DateTime[] using a BitArray to 
            determine which elements are optimizable.
            </summary>
            <param name="values">The DateTime[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Decimal[])">
            <summary>
            Internal implementation to store a non-null Decimal[].
            </summary>
            <remarks>
            All elements are stored optimized.
            </remarks>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Double[])">
            <summary>
            Internal implementation to store a non-null Double[].
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Single[])">
            <summary>
            Internal implementation to store a non-null Single[].
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Guid[])">
            <summary>
            Internal implementation to store a non-null Guid[].
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Int16[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int16[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Int32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Int64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.SByte[])">
            <summary>
            Internal implementation to store a non-null SByte[].
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.Int16[])">
            <summary>
            Internal implementation to store a non-null Int16[].
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.UInt16[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt16[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt16[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.UInt16[])">
            <summary>
            Internal implementation to store a non-null UInt16[].
            </summary>
            <param name="values">The UIn16[] to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteObjectArray(System.Object[])">
            <summary>
            Writes the values in the non-null object[] into the stream.
            
            Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
            Other values are stored using WriteObject().
            
            This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteTypeCode(SD.LLBLGen.Pro.ORMSupportClasses.SerializedType)">
            <summary>
            Stores the specified SerializedType code into the stream.
            
            By using a centralized method, it is possible to collect statistics for the
            type of data being stored in DEBUG mode.
            
            Use the DumpTypeUsage() method to show a list of used SerializedTypes and
            the number of times each has been used. This method and the collection code
            will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode">The SerializedType to store.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteTypedArray(System.Array,System.Boolean)">
            <summary>
            Internal implementation to write a non-null typed array into the stream.
            </summary>
            <remarks>
            Checks first to see if the element type is a primitive type and calls the 
            correct routine if so. Otherwise determines the best, optimized method
            to store the array contents.
            <para/>
            An array of object elements never stores its type.
            </remarks>
            <param name="value">The non-null typed array to store.</param>
            <param name="storeType">True if the type should be stored; false otherwise</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.IsTypeRecreatable(System.Type)">
            <summary>
            Checks whether instances of a Type can be created.
            </summary>
            <remarks>
            A Value Type only needs to implement IOwnedDataSerializable. 
            A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type">The Type to check</param>
            <returns>true if the Type is recreatable; false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.HasEmptyConstructor(System.Type)">
            <summary>
            Checks whether a type has a default/empty constructor.
            </summary>
            <param name="type">The Type to check</param>
            <returns>true if the Type has a default/empty constructor; false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.ArrayElementsAreSameType(System.Object[],System.Type)">
            <summary>
            Checks whether each element in an array is of the same type.
            </summary>
            <param name="values">The array to check</param>
            <param name="elementType">The expected element type.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.WriteTypedArrayTypeCode(System.Collections.BitArray,System.Int32)">
            <summary>
            Writes the TypeCode for the Typed Array followed by the number of elements.
            </summary>
            <param name="optimizeFlags"></param>
            <param name="length"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.TypeUsage">
            <summary>
            Gets the type usage.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.TypeSurrogates">
            <summary>
            gets the list of optional IFastSerializationTypeSurrogate instances which
            SerializationWriter and SerializationReader will use to serialize objects not directly supported.
            It is important to use the same list on both client and server ends to ensure that the same surrogated-types are supported.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.StringTokenTableSize">
            <summary>
            Returns the number of strings in the string token table.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.ObjectTokenTableSize">
            <summary>
            Returns the number of objects in the object token table.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.AllowStoreTokenTablePresizeInfo">
            <summary>
            Gets a boolean flag which indicates whether AppendTokenTables
            will store the presize information for the string and object
            token tables.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.OptimizeForSize">
            <summary>
            Gets or Sets a boolean flag to indicate whether to optimize for size (default)
            by storing data as packed bits or sections where possible.
            Setting this value to false will turn off this optimization and store
            data directly which increases the speed.
            Note: This only affects optimization of data passed to the WriteObject method
            and direct calls to the WriteOptimized methods will always pack data into
            the smallest space where possible.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.PreserveDecimalScale">
            <summary>
            Gets or Sets a boolean flag to indicate whether to preserve the scale within
            a Decimal value when it would have no effect on the represented value.
            Note: a 2m value and a 2.00m value represent the same value but internally they 
            are stored differently - the former has a value of 2 and a scale of 0 and
            the latter has a value of 200 and a scale of 2. 
            The scaling factor also preserves any trailing zeroes in a Decimal number. 
            Trailing zeroes do not affect the value of a Decimal number in arithmetic or 
            comparison operations. However, trailing zeroes can be revealed by the ToString 
            method if an appropriate format string is applied.
            From a serialization point of view, the former will take 2 bytes whereas the 
            latter would take 4 bytes, therefore it is preferable to not save the scale where
            it doesn't affect the represented value.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.SingletonTypeWrapper">
            <summary>
            Private class used to wrap an object that is to be tokenized, and recreated at deserialization by its type.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.SingletonTypeWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.SingletonTypeWrapper"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.SingletonTypeWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.SingletonTypeWrapper.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.SingletonTypeWrapper.WrappedType">
            <summary>
            Gets the type of the wrapped.
            </summary>
            <value>The type of the wrapped.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList">
            <summary>
            Provides a faster way to store string tokens both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2010/10/uniquestringlis.html
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList.Expand">
            <summary>
            Expands this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList.Reindex">
            <summary>
            Reindexes this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList.GetBucketIndex(System.String)">
            <summary>
            Gets the index of the bucket.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter.UniqueStringList.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SourceFieldFinder">
            <summary>
            Class which traverses a set of fields and their expressions and finds all fields which are actually mapped fields, so which have their ContainingObjectName
            set. These fields can then be used to be the containing field object for an expression instead of an empty expression field which doesn't have a mapping.
            This is necessary as llblgen pro doesn't have a 'source' definition, it determines that on the fly, which can go wrong if the projection has just expression
            fields and there are no relations specified. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SourceFieldFinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SourceFieldFinder"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SourceFieldFinder.Traverse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Traverses the specified field and related objects.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SourceFieldFinder.FieldsFound">
            <summary>
            Gets the fields found.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket">
            <summary>
            Helperclass for the value instances of <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList"/>
            Used in conjunction with EntityFieldPersistenceInfoHashtable by DQE's in Insert/Delete/Update query building
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket.Fields">
            <summary>
            Array of references to entityfield objects
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket.FieldsPersistenceInfo">
            <summary>
            Array of references to fieldpersistenceinfo objects
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket.ForEntityName">
            <summary>
            For this entity name.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TimedLock">
            <summary>
            This class is by Ian Griffiths, see: http://www.interact-sw.co.uk/iangblog/2004/04/26/yetmoretimedlocking
            [FB]Comment below is by Ian as well. Class is left as-is with very minor changes in comments and code placement.
            
            Thanks to Eric Gunnerson for recommending this be a struct rather
            than a class - avoids a heap allocation.
            Thanks to Change Gillespie and Jocelyn Coulmance for pointing out
            the bugs that then crept in when I changed it to use struct...
            Thanks to John Sands for providing the necessary incentive to make
            me invent a way of using a struct in both release and debug builds
            without losing the debug leak tracking.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TimedLock.Lock(System.Object)">
            <summary>
            Locks the specified o.
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            Locks the specified o.
            </summary>
            <param name="o">The o.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TimedLock.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.TimedLock"/> class.
            </summary>
            <param name="o">The o.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TimedLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1">
            <summary>
            Base class for typedlist classes in SelfServicing. 
            </summary>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore">
            <summary>
            Abstract base class for Typed Lists. This class is a thin wrapper around the DataTable to make sure
            the member variable obeyWeakRelations is serialized: in VB.NET it's not possible to program
            this construct, because in VB.NET you can't re-implement an interface. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListCore">
            <summary>
            Interface base definition for TypedList classes
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListCore.Count">
            <summary>
            Returns the amount of rows in this typed list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListCore.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            query statement. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.#ctor">
            <summary>
            Empty CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataTable"></see>.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that holds the serialized data associated with the <see cref="T:System.Data.DataTable"></see>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataTable"></see>.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.InitClass(System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="obeyWeakRelations">if set to <c>true</c> [obey weak relations].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.OnRelationSetBuilt(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Method which is called at the end of the generated BuildRelationSet method and which can be used to add additional relations to 
            the relationcollection of the typedlist.
            </summary>
            <param name="relations">The relations collection of the typed list</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.OnInitialized">
            <summary>
            Method which is called at the end of the InitClass() method in the generated typedlist class. This method can be used to add 
            additional DataColumn definitions to the typedlist's base class, which is a datatable. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.GetSerializationFlags">
            <summary>
            Gets the serialization flags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.SerializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            Serializes the owned data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.DeserializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Object)">
            <summary>
            Deserializes the owned data.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.Count">
            <summary>
            Returns the amount of rows in this typed list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListCore.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            query statement. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.#ctor">
            <summary>
            Initializes a new instance of the TypedListBase2 class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param TypedListCore="tableName">name for the datatable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.Select">
            <summary>Gets an array of all row objects of type T.</summary>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.Select(System.String)">
            <summary>Gets an array of all row objects of type T that match the filter criteria in order of primary key (or lacking one, order of addition.) </summary>
            <param name="filterExpression">The criteria to use to filter the rows.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.Select(System.String,System.String)">
            <summary>Gets an array of all row objects of type T that match the filter criteria, in the specified sort order</summary>
            <param name="filterExpression">The filter expression.</param>
            <param name="sort">A string specifying the column and sort direction.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.Select(System.String,System.String,System.Data.DataViewRowState)">
            <summary>Gets an array of all row objects of type T that match the filter criteria, in the specified sort order that match the specified state</summary>
            <param name="filterExpression">The filter expression.</param>
            <param name="sort">A string specifying the column and sort direction.</param>
            <param name="recordStates">One of the <see cref="T:System.Data.DataViewRowState"/> values.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.GetRowType">
            <summary>Return the type of the typed datarow</summary>
            <returns>returns the requested type</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.OnResultsetBuilt(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Method which is called at the end of the generated BuildResultset method and which can be used to add additional fields to the fields 
            object for the typed list, or to manipulate the field objects added to the typed list.
            </summary>
            <param name="fields">The fields.</param>
            <remarks>Be sure to call fields.Expand(n) first, where n is the number of fields you want to add.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.Count">
            <summary>Returns the amount of rows in this typed list.</summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase2`1.Item(System.Int32)">
            <summary>Indexer of this strong typed list</summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1">
            <summary>
            General base class for typedviews. This class is used to place internal framework oriented code inside a typedview 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.#ctor">
            <summary>
            Empty CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataTable"></see>.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object that holds the serialized data associated with the <see cref="T:System.Data.DataTable"></see>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataTable"></see>.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.SerializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            Serializes the owned data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.DeserializeOwnedData(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Object)">
            <summary>
            Deserializes the owned data.
            </summary>
            <param name="reader">The reader.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.InitClass">
            <summary>
            Inits the class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.OnInitialized">
            <summary>
            Method which is called at the end of the InitClass() method in the generated typedview class. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.Select">
            <summary>Gets an array of all row objects of type T.</summary>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.Select(System.String)">
            <summary>Gets an array of all row objects of type T that match the filter criteria in order of primary key (or lacking one, order of addition.) </summary>
            <param name="filterExpression">The criteria to use to filter the rows.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.Select(System.String,System.String)">
            <summary>Gets an array of all row objects of type T that match the filter criteria, in the specified sort order</summary>
            <param name="filterExpression">The filter expression.</param>
            <param name="sort">A string specifying the column and sort direction.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.Select(System.String,System.String,System.Data.DataViewRowState)">
            <summary>Gets an array of all row objects of type T that match the filter criteria, in the specified sort order that match the specified state</summary>
            <param name="filterExpression">The filter expression.</param>
            <param name="sort">A string specifying the column and sort direction.</param>
            <param name="recordStates">One of the <see cref="T:System.Data.DataViewRowState"/> values.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.GetRowType">
            <summary>Return the type of the typed datarow</summary>
            <returns>returns the requested type</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.Count">
            <summary>
            Returns the amount of rows in this typed view.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedViewBase`1.Item(System.Int32)">
            <summary>Indexer of this strong typed list</summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1">
            <summary>
            Provides a faster way to store individual objects both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2010/10/uniquestringlis.html
            </summary>
            <typeparam name="T">the type of the elements contained in the uniquelist. </typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            CTor
            </summary>
            <param name="comparer">Comparer to use for uniqueness comparison</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            CTor
            </summary>
            <param name="capacity">Initial capacity</param>
            <param name="comparer">Comparer to use for uniqueness comparison</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.AddOrGet(`0)">
            <summary>
            Adds the item or if it's already present it gets its instance
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Initialize(System.Int32)">
            <summary>
            Initializes the specified min capacity.
            </summary>
            <param name="minCapacity">The min capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.GetBucketIndex(`0)">
            <summary>
            Gets the index of the bucket.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Expand">
            <summary>
            Expands this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.ReindexItems">
            <summary>
            Reindexes the items.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Item(System.Int32)">
            <summary>
            Gets or sets the instance at the specified index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UniqueList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate">
            <summary>
            Implementation of a Field Between ValueBegin And ValueEnd expression, using the following format:
            IEntityField(Core) Between Parameter1 And Parameter2 (f.e Foo BETWEEN @Foo1 AND Foo2)
            There is no check for types between the values specified and the specified IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object,System.String)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression. (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.String)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression. (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            The two parameters for begin and end value are constructed using the field's name plus the postfixes 'Begin' and 'End'.
            Generates SQL-92 syntaxis for BETWEEN, which is accepted by all databases known.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.CreateParameter(System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="value">The parameter value.</param>
            <returns>ready to use parameter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            Inits the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="valueBegin"></param>
            <param name="valueEnd"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ValueBegin">
            <summary>
            Gets / sets valueBegin
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ValueEnd">
            <summary>
            Gets / sets valueEnd
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.BeginIsField">
            <summary>
            Gets beginIsField, flag to signal if the ValueBegin is a field object
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.EndIsField">
            <summary>
            Gets endIsField, flag to signal if the ValueEnd is a field object
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.PersistenceInfoBegin">
            <summary>
            Gets or sets the persistence info for the BeginValue, if that's a field
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.PersistenceInfoEnd">
            <summary>
            Gets or sets the persistence info for the EndValue, if that's a field
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldBegin">
            <summary>
            Gets the field which is the ValueBegin
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldEnd">
            <summary>
            Gets the field which is the ValueEnd
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldBeginCore">
            <summary>
            Gets the fieldcore which is the ValueBegin
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldEndCore">
            <summary>
            Gets the fieldcore which is the ValueEnd
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate">
            <summary>
            Implementation of a Field compare-operator Expression expression, using the following format:
            IEntityField(Core) ComparisonOperator Expression (f.e. Foo = (Bar * 2))
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Boolean)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String,System.Boolean)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the class.
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="comparisonOperator"></param>
            <param name="expression"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.Operator">
            <summary>
            Operator to use in the comparison
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ExpressionToCompareWith">
            <summary>
            Gets / sets expressionToCompareWith
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate">
            <summary>
            Implementation of a Field Compare NULL expression using the following format:
            IEntityField(Core) IS NULL (f.e. Foo IS NULL).
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            CTor. Creates the Field IS NULL predicate. (SelfServicing version)
            </summary>
            <param name="field">Field used in the comparison expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String)">
            <summary>
            CTor. Creates the Field IS NULL predicate. (SelfServicing version)
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean,System.Boolean,System.String)">
            <summary>
            Inits the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate">
            <summary>
            Implementation of a Field compare-range Values expression, using the following format:
            IEntityField(Core) ComparisonOperator Parameters (f.e. Foo IN (@Foo1, @Foo2 ... ))
            There is no check for types between the value specified and the specified IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean,System.Boolean,System.String,System.Object[])">
            <summary>
            Initializes the class.
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
            <param name="values"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.Values">
            <summary>
            Values to set for the IN Clause
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate">
            <summary>
            Implementation of a Field compare-operator Set expression, using the following format:
            IEntityField(Core) ComparisonOperator (Subquery)
            </summary>
            <remarks>If the operator EXISTS is used, the field is ignored so can be set to null/Nothing, as the predicate will simply
            result in EXISTS (SELECT setField FROM ...)<br/>
            This predicate isn't supported for in-memory filtering. Use FieldCompareRange for that.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <param name="groupByClause">The Group By clause to use in the set query.</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <param name="groupByClause">The Group By clause to use in the set query.</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Boolean,System.Boolean,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="field"></param>
            <param name="setField"></param>
            <param name="persistenceInfoField"></param>
            <param name="persistenceInfoSetField"></param>
            <param name="operatorToUse"></param>
            <param name="setFilter"></param>
            <param name="setRelations"></param>
            <param name="objectAlias"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="maxNumberOfItemsToReturn"></param>
            <param name="setSorter"></param>
            <param name="groupByClause"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.PersistenceInfoField">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetField">
            <summary>
            Field used in the subquery (the field the set is of) (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetFieldCore">
            <summary>
            Field used in the subquery (the field the set is of) (SelfServicing).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.PersistenceInfoSetField">
            <summary>
            Gets / sets persistenceInfo for Setfield
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.OperatorToUse">
            <summary>
            Operator to use in the comparison
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetRelations">
            <summary>
            Gets / sets the set relations to use in the subquery.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetFilter">
            <summary>
            Gets / sets the filter to use in the subquery
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetFilterAsPredicateExpression">
            <summary>
            Wraps SetFilter in an IPredicateExpression instance
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.MaxNumberOfItemsToReturn">
            <summary>
            Gets / sets maxNumberOfItemsToReturn for the subquery. Default: 0 (return all rows)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetSorter">
            <summary>
            Gets / sets the setSorter expression to order the subquery results. Use it in combination with MaxNumberOfItemsToReturn set to 1
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.GroupByClause">
            <summary>
            Gets / sets the groupByClause for this FieldCompareSetPredicate instance
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate">
            <summary>
            Implementation of a Field compare-operator Value expression, using the following format:
            IEntityField(Core) ComparisonOperator Parameter (f.e. Foo = @Foo)
            There is no check for types between the value specified and the specified IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field"></param>
            <param name="comparisonOperator"></param>
            <param name="value">Value to set for the parameter</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field"></param>
            <param name="comparisonOperator"></param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the class.
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="comparisonOperator"></param>
            <param name="value"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.DetermineValueToUse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Returns the field's value to use: if the field is a PK field AND it is changed, use the DbValue value, otherwise the currentvalue
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.Operator">
            <summary>
            Operator to use in the comparison
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.Value">
            <summary>
            Value to set for the parameter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.CaseSensitiveCollation">
            <summary>
            Gets / sets caseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field, 
            IF the value specified is a string value. You can use this to do a case insensitive compare on a case sensitive database. Default: false
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate">
            <summary>
            FieldFullTextSearchPredicate class. 
            CONTAINS(IEntityField(Core), Parameter) (f.e. CONTAINS(Foo, @Foo) )<br/>
            FREETEXT(IEntityField(Core), Parameter) (f.e. FREETEXT(Foo, @Foo) )<br/>
            SqlServer specific. <br/>
            On SqlServer 2005, also multi-field CONTAINS/FREETEXT predicates are supported. 
            </summary>
            <remarks>
            This predicate isn't supported for in-memory filtering.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String)">
            <summary>
            CTor
            </summary>
            <param name="entityFields">The entity fields to include in the CONTAINS/FREETEXT fieldlist. List can contain EntityField or EntityField2 field objects.</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <remarks>SqlServer 2005 specific. To set the object alias for the fields, use the field object's method SetObjectAlias instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(System.Collections.IList,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="entityFields">The entity fields to include in the CONTAINS/FREETEXT fieldlist. List can contain EntityField or EntityField2 field objects.</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <remarks>SqlServer 2005 specific. To set the object alias for the fields, use the field object's method SetObjectAlias instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.Boolean)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String,System.Boolean)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="pattern"></param>
            <param name="operatorToUse"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.InitClass(System.Collections.IList,System.String,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.Boolean,System.Boolean,System.String)">
            <summary>
            Inits the class.
            </summary>
            <param name="entityFields">The entity fields.</param>
            <param name="pattern">The pattern.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="negate">if set to <c>true</c> [negate].</param>
            <param name="selfServicing">if set to <c>true</c> [self servicing].</param>
            <param name="objectAlias">The object alias.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.TargetIsFieldList">
            <summary>
            Returns true if the target of this predicate is a list of fields instead of a single field. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor or when the predicate was constructed with a fieldslist.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.Pattern">
            <summary>
            Gets / sets the pattern to use in a Field LIKE Pattern clause. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.OperatorToUse">
            <summary>
            Gets / sets operatorToUse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.PersistenceInfosFieldsList">
            <summary>
            Gets / sets persistenceInfosFieldsList
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.FieldsList">
            <summary>
            Gets / sets the entity fields to include in the CONTAINS/FREETEXT fieldlist. List can contain EntityField or EntityField2 field objects.
            </summary>
            <remarks>SqlServer 2005 specific</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase">
            <summary>
            Abstract base class for the FieldInfoProvider class which is used by generated code to provide IFieldInfo objects and nametoindex dictionaries for 
            EntityFields(2) objects. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider">
            <summary>
            Interface for the FieldInfoProvider class which is used to provide field info information for adapter/selfservicing fields / entityfields(2) objects. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetFieldInfo(System.Enum)">
            <summary>
            Gets the field info for the field specified with the field index.
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetFieldInfo(System.String,System.String)">
            <summary>
            Gets the field info for the field passed in for the element passed in
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementFieldName">Name of the element field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetFieldInfo(System.String,System.Int32)">
            <summary>
            Gets the field info for the field passed in for the element passed in
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementFieldIndex">Index of the element field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetFieldInfos(System.String)">
            <summary>
            Gets the field infos for the element passed in.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetFieldIndexes(System.String)">
            <summary>
            Gets the field indexes object for the element passed in. This is an object which is used by EntityFields(2) objects to quickly find a field
            based on the field name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.String)">
            <summary>
            Fills the entity fields object for the adapter entity with the name specified.
            </summary>
            <param name="inheritanceProvider">The inheritance provider.</param>
            <param name="entityName">Name of the entity.</param>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider,System.String)">
            <summary>
            Fills the entity fields object for the adapter entity with the name specified.
            </summary>
            <param name="inheritanceProvider">The inheritance provider.</param>
            <param name="persistenceInfoProvider">The persistence info provider.</param>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetEntityFieldsArray(System.String)">
            <summary>
            Gets the entity fields array.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>array of the fields which solely belong to the entity specified so no inherited fields are present.</returns>
            <remarks>Used in adapter.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfoProvider.GetEntityFieldsArray(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider)">
            <summary>
            Gets the entity fields array.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="persistenceProvider">The persistence provider.</param>
            <returns>
            array of the fields which solely belong to the entity specified so no inherited fields are present.
            </returns>
            <remarks>selfservicing specific.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetFieldInfo(System.Enum)">
            <summary>
            Gets the field info for the field specified with the field index.
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetFieldInfo(System.String,System.String)">
            <summary>
            Gets the field info for the field passed in for the element passed in
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementFieldName">Name of the element field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetFieldInfo(System.String,System.Int32)">
            <summary>
            Gets the field info for the field passed in for the element passed in
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementFieldIndex">Index of the element field.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetFieldInfos(System.String)">
            <summary>
            Gets the field infos for the element passed in.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetFieldIndexes(System.String)">
            <summary>
            Gets the field indexes object for the element passed in. This is an object which is used by EntityFields(2) objects to quickly find a field
            based on the field name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider,System.String)">
            <summary>
            Fills the entity fields object for the adapter entity with the name specified.
            </summary>
            <param name="inheritanceProvider">The inheritance provider.</param>
            <param name="persistenceInfoProvider">The persistence info provider.</param>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.String)">
            <summary>
            Fills the entity fields object for the adapter entity with the name specified.
            </summary>
            <param name="inheritanceProvider">The inheritance provider.</param>
            <param name="entityName">Name of the entity.</param>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetEntityFieldsArray(System.String)">
            <summary>
            Gets the entity fields array.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>array of the fields which solely belong to the entity specified so no inherited fields are present.</returns>
            <remarks>Adapter specific.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetEntityFieldsArray(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider)">
            <summary>
            Gets the entity fields array.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="persistenceProvider">The persistence provider. Is null in adapter scenarios</param>
            <returns>
            array of the fields which solely belong to the entity specified so no inherited fields are present.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.CreateEntityField(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Creates a new EntityField instance with the elements provided.
            </summary>
            <param name="fieldInfo">The field info.</param>
            <param name="persistenceInfo">The persistence info.</param>
            <returns>new EntityField element</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.CreateEntityField2(SD.LLBLGen.Pro.ORMSupportClasses.IFieldInfo)">
            <summary>
            Creates a new EntityField2 instance with the elements provided.
            </summary>
            <param name="fieldInfo">The field info.</param>
            <returns>new EntityField2 element</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.InitClass(System.Int32)">
            <summary>
            Inits the class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ConstructElementFieldStructures(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            Constructs the element field objects, which are used by EntityFields(2) object to find back an entity field based on the name and also for
            creating fields. This routine utilizes the inheritance info provider to understand the full fields list of an entity (if applicable).
            </summary>
            <param name="inheritanceInfoProvider">The inheritance info provider.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ProcessEntityFields(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,System.Collections.Hashtable,System.String)">
            <summary>
            Processes the element fields for the element with the name elementName. This processing is necessary because entities in an inheritance hierarchy
            inherit fields from their supertype and these aren't in the fieldsinfo yet. This process routine makes sure that's done. 
            </summary>
            <param name="inheritanceInfoProvider">The inheritance info provider.</param>
            <param name="namesProcessed">The names processed.</param>
            <param name="elementName">Name of the element.</param>
            <returns>the fieldsinfo for the element with elementName specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.AddFieldIndexEnumForElementName(System.Type,System.String)">
            <summary>
            Adds the field index enum - element name pair
            </summary>
            <param name="fieldIndexEnum">The field index enum.</param>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.AddElementFieldInfo(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Adds an element field info object for the element name.elementfieldname field.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementFieldName">Name of the element field.</param>
            <param name="dataType">Type of the data.</param>
            <param name="isPrimaryKey">if set to <c>true</c> [is primary key].</param>
            <param name="isForeignKey">if set to <c>true</c> [is foreign key].</param>
            <param name="isReadOnly">if set to <c>true</c> [is read only].</param>
            <param name="isNullable">if set to <c>true</c> [is nullable].</param>
            <param name="fieldIndex">Index of the field.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="scale">The scale.</param>
            <param name="precision">The precision.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.GetElementFieldInfos(System.String)">
            <summary>
            Gets the element field infos for a given element.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields">
            <summary>
            private class which is used to store mapping info of an element.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.PostProcessInfo">
            <summary>
            Creates internal structures from the information added to this class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.OverridenFieldIndices">
            <summary>
            Gets the overriden field indices.
            </summary>
            <value>The overriden field indices.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.PkFieldIndices">
            <summary>
            Gets the pk field indices.
            </summary>
            <value>The pk field indices.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.EntityNamesOfFields">
            <summary>
            Gets the entity names of fields.
            </summary>
            <value>The entity names of fields.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.ElementFieldInfos">
            <summary>
            Gets the element field infos.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.ElementFieldsOnIndex">
            <summary>
            Gets the indexes of the element field infos of this element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.ElementFieldIndexes">
            <summary>
            Gets the element field indexes.
            </summary>
            <value>The element field indexes.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldInfoProviderBase.ElementFields.FieldInfos">
            <summary>
            Gets the field infos.
            </summary>
            <value>The field infos.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate">
            <summary>
            Implementation of a LIKE predicate expression, using the following formats:
            IEntityField(Core) LIKE Parameter (f.e. Foo LIKE @Foo )
            A specified pattern will be set as the parameters value.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a 
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the 
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="pattern"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
            <param name="caseSensitiveCollation"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.Pattern">
            <summary>
            Gets / sets the pattern to use in a Field LIKE Pattern clause. 
            </summary>
            <remarks>if this predicate is used in in-memory filtering, this pattern can also be a regular expression, though in that case, don't use
            % characters but normal regular expression characters. If this pattern is a regular expression, set the flag PatternIsRegEx to true. 
            If PatternRegEx is false, the value of Pattern is considered a normal string with the standard LIKE syntaxis (i.e. with % as wildcard). 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.PatternIsRegEx">
            <summary>
            Gets or sets a value indicating whether the string specified in Pattern is a regular expression (true) or not (false). Only used for
            in-memory filtering, ignored when predicate is used in database filters. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.CaseSensitiveCollation">
            <summary>
            Gets / sets caseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field. Default: false
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection">
            <summary>
            GroupByCollection class which is used to collect EntityField(2) instances which are used for the 
            GROUP BY clause in a retrieval query. When a group by collection is specified in a retrieval query, all
            fields in the resultset have to be in this collection.
            Generic
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection">
            <summary>
            Interface for the GroupByCollection class which is used to collect EntityField(2) instances which are used for the 
            GROUP BY clause in a retrieval query. When a group by collection is specified in a retrieval query, all
            fields in the resultset have to be in this collection.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the range of IEntityFieldCore fields to the groupbycollection.
            </summary>
            <param name="fieldsToAdd">The fields to add to this groupbycollection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Add``1(``0)">
            <summary>
            Adds the passed in entity field instance to the list. Field objects can be added just once.
            </summary>
            <param name="fieldToAdd">entity field instance to add</param>
            <returns>Index of added field in the list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Insert``1(``0,System.Int32)">
            <summary>
            Inserts the field passed in on index specified.
            </summary>
            <param name="fieldToInsert">Entity field to insert</param>
            <param name="index">index on which the field should be inserted</param>
            <exception cref="T:System.InvalidOperationException">If the field is already added.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Remove``1(``0)">
            <summary>
            Removes the passed in entity field instance. Finds the object to remove using value compare.
            </summary>
            <param name="fieldToRemove">Entity field instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the entity field instance at index specified from the collection.
            </summary>
            <param name="index">the index of the field to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.IndexOf``1(``0)">
            <summary>
            Returns the index of the field specified. 
            </summary>
            <param name="fieldToFind">field to determine the index of</param>
            <returns>index of field, if found, otherwise -1</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Contains``1(``0)">
            <summary>
            Checks if the field is in the list. Does a value compare, not an object reference compare. 
            </summary>
            <param name="fieldToCheck">Entity field to check for presence.</param>
            <returns>true if a similar field is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.GetEntityFieldCore(System.Int32)">
            <summary>
            Returns the IEntityFieldCore part of the field at position index
            </summary>
            <param name="index">index of field to return the IEntityFieldCore portion of</param>
            <returns>the IEntityFieldCore part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.GetFieldPersistenceInfo(System.Int32)">
            <summary>
            Returns the IFieldPersistenceInfo part of the field at position index
            </summary>
            <param name="index">index of field to return the IFieldPersistenceInfo portion of</param>
            <returns>the IFieldPersistenceInfo part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.SetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Int32)">
            <summary>
            Sets the IFieldPersistenceInfo part of the field at position index.
            Adapter specific.
            </summary>
            <param name="persistenceInfo">The field persistence info object to set</param>
            <param name="index">index of field to set the persistence info of</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.ToQueryText">
            <summary>
            Retrieves a ready to use text representation for the groupby collection
            </summary>
            <returns>
            string which is usable as the argument for the GROUP BY clause in a query
            </returns>
            <remarks>Emits expressions on fields instead of the field names, if applicable.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation for the groupby collection.
            </summary>
            <param name="ignoreExpressions">If set to false (default), it will emit the expression of a field in the groupbycollection instead of the
            fieldname.</param>
            <returns>
            string which is usable as the argument for the GROUP BY clause in a query
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.ReplaceFieldAtIndex(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Replaces the field at the index specified with the field passed in
            </summary>
            <param name="newField">The new field.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Count">
            <summary>
            The amount of items currently stored in the IGroupByCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.HavingClause">
            <summary>
            Gets/sets the predicate expression which forms the having clause for this group by collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Parameters">
            <summary>
            The list of parameters created when the groupby collection was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection"/> class.
            </summary>
            <param name="fieldToAdd">The field to add to the groupbycollection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the range of IEntityFieldCore fields to the groupbycollection.
            </summary>
            <param name="fieldsToAdd">The fields to add to this groupbycollection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Add``1(``0)">
            <summary>
            Adds the passed in entity field instance to the list. entity fields can be added just once.
            If the field is already in the collection, the index of the field in the list is returned.
            </summary>
            <param name="fieldToAdd">entity field instance to add</param>
            <returns>Index of added field in the list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Remove``1(``0)">
            <summary>
            Removes the passed in entity field instance. Finds the object to remove using value compare.
            </summary>
            <param name="fieldToRemove">entity field instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Insert``1(``0,System.Int32)">
            <summary>
            Inserts the field passed in on index specified.
            </summary>
            <param name="fieldToInsert">entity field to insert</param>
            <param name="index">index on which the field should be inserted</param>
            <exception cref="T:System.InvalidOperationException">If the field is already added.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IEntityField(2) instance at index specified from the collection.
            </summary>
            <param name="index">the index of the field to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Contains``1(``0)">
            <summary>
            Checks if the field is in the list. Does a value compare, not an object reference compare. 
            </summary>
            <param name="fieldToCheck">entity field to check for presence.</param>
            <returns>true if a similar field is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.IndexOf``1(``0)">
            <summary>
            Gets the index of the specified field in the list.
            </summary>
            <param name="fieldToCheck">field to get the index of</param>
            <returns>-1 if not found, index otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.GetEntityFieldCore(System.Int32)">
            <summary>
            Returns the IEntityFieldCore part of the field at position index
            </summary>
            <param name="index">index of field to return the IEntityFieldCore portion of</param>
            <returns>the IEntityFieldCore part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.GetFieldPersistenceInfo(System.Int32)">
            <summary>
            Returns the IFieldPersistenceInfo part of the field at position index
            </summary>
            <param name="index">index of field to return the IFieldPersistenceInfo portion of</param>
            <returns>the IFieldPersistenceInfo part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.SetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Int32)">
            <summary>
            Sets the IFieldPersistenceInfo part of the field at position index.
            Adapter specific.
            </summary>
            <param name="persistenceInfo">The field persistence info object to set</param>
            <param name="index">index of field to set the persistence info of</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.ToQueryText">
            <summary>
            Retrieves a ready to use text representation for the groupby collection
            </summary>
            <returns>
            string which is usable as the argument for the GROUP BY clause in a query
            </returns>
            <remarks>Emits expressions on fields instead of the field names, if applicable.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation for the groupby collection.
            </summary>
            <param name="ignoreExpressions">If set to false (default), it will emit the expression of a field in the groupbycollection instead of the
            fieldname.</param>
            <returns>
            string which is usable as the argument for the GROUP BY clause in a query
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.ReplaceFieldAtIndex(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Int32)">
            <summary>
            Replaces the field at the index specified with the field passed in
            </summary>
            <param name="newField">The new field.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>enumerator for this collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.System#Collections#Generic#IEnumerable{SD#LLBLGen#Pro#ORMSupportClasses#IEntityFieldCore}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.InitClass">
            <summary>
            Inits the class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Count">
            <summary>
            The amount of items currently stored in the IGroupByCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.HavingClause">
            <summary>
            Gets/sets the predicate expression which forms the having clause for this group by collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Parameters">
            <summary>
            The list of parameters created when the Predicate was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase">
            <summary>
            Base class for implementing an InheritanceInfoProvider object.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider">
            <summary>
            Interface for inheritanceinfo provider objects and other inheritance information. 
            InheritanceInfo objects provide inheritance information at runtime for the DQE's and helper classes.
            The information inside these providers has to be statically constructed and should not change at runtime to make it threadsafe.
            These providers supply the DQE with detailed inheritance information so queries can be formed for any entity hierarchy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetInheritanceInfo(System.String,System.Boolean)">
            <summary>
            Gets an IInheritanceInfo object with the inheritance information for the entity with the supplied name. 
            </summary>
            <param name="entityName">name of the entity, like "CustomerEntity". This name is used for retrieving the information from
            a thread safe hashtable</param>
            <param name="startWithRoot">Set to <see langword="true"/> if the relations in
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.RelationsToHierarchyRoot"/> have to start with the root and walk downwards to the entityName
            entity, or set to false if the relations have to start at the entityname and move upwards to the root.</param>
            <returns>Ready to use IInheritanceInfo object if entityName is part of a hierarchy. If entityName isn't part of a
            hierarchy, null is returned. (not part of a hierarchy means: not a supertype nor a subtype</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyRelations(System.String,System.String)">
            <summary>
            This method returns all relations from the entityName to the root and from the entityName downwards to all the reachable leafs
            from entityName. All relations to the root are INNER JOIN, all relations from entityName to leafs are LEFT JOIN
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy has to be determined. Example: "CustomerEntity"</param>
            <param name="objectAlias">The object alias to set on all elements in the relations.</param>
            <returns>
            collection with relations if entityName was found, or null if not.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyRelations(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            This method returns all relations from the lowest entity found in the passed in entityNames to the root and from the lowest entityName
            downwards to all the reachable leafs from entityName. All relations to the root are INNER JOIN, all relations from the lowest entityName
            to leafs are LEFT JOIN
            </summary>
            <param name="entityNames">1 or more names of entities on the same path of which the hierarchy has to be determined. Example of a name: "CustomerEntity"</param>
            <param name="objectAlias">The object alias to specify on all elements in the relations.</param>
            <returns>
            collection with relations if all entityNames were found, or null if not.
            </returns>
            <remarks>This method is a wrapper around GetHierarchyRelations(name), to make finding the right collection more efficient. It finds the lowest
            entityname in the hierarchy and calls GetHierarchyRelations(name) with that name.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyRelations(System.String,System.String,System.Boolean)">
            <summary>
            This method returns all relations from the entityName to the root and from the entityName downwards to all the reachable leafs
            from entityName, if includePathsToReachableLeafs is set to true. All relations to the root are INNER JOIN, all relations from entityName to leafs
            are LEFT JOIN
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy has to be determined. Example: "CustomerEntity"</param>
            <param name="objectAlias">The object alias to set on all elements in the relations.</param>
            <param name="includePathsToReachableLeafs">If set to true, it will include the relations for all paths to leafs below the entity passed in</param>
            <returns>
            collection with relations if entityName was found, or null if not or if the entity is in a TargetPerEntityHierarchy.
            </returns>
            <remarks>This routine uses no subroutines to avoid thread unsafety.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyFields(System.String)">
            <summary>
            This method returns an array of IEntityFieldCore objects which contains all fields of all entities on the path: 
            entityName upwards to the root and entityName downwards to all leafs reachable from entityName, including entityName.
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy fields has to be determined. Example: "CustomerEntity"</param>
            <returns>Array of IEntityFieldCore objects, each element represents one field, or null if entityName isn't found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityFactory(System.String,System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. This is the name of the root of the hierarchy to consider. 
            For example when fetching all managers, and manager derives from employee, this parameter is 'ManagerEntity', and only the manager type
            or its subtypes (direct or indirect) are considered. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityTypeFilter(System.String,System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type 'entityName'. Example of a valid name is 'CustomerEntity'. 
            </summary>
            <param name="entityName">Name of the entity to filter on, like 'CustomerEntity'</param>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
            <returns>ready to use predicateexpression, or an empty predicate expression if entityName's value isn't an entity which is a hierarchical type.</returns>
            <remarks>Only useful in entity fetches.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityTypeFilter(System.String,System.String,System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type 'entityName'. Example of a valid name is 'CustomerEntity'.
            </summary>
            <param name="entityName">Name of the entity to filter on, like 'CustomerEntity'</param>
            <param name="objectAlias">The object alias to use for the filter.</param>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false).</param>
            <returns>ready to use predicateexpression, or an empty predicate expression if entityName's value isn't an entity which is a hierarchical type.</returns>
            <remarks>Only useful in entity fetches.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.CheckIfIsSubTypeOf(System.String,System.String)">
            <summary>
            Determines if typeToCheck is a subtype of superType.
            </summary>
            <param name="typeToCheck">Type to check.</param>
            <param name="superType">The supertype.</param>
            <returns>true if typeToCheck is a subtype of supertype, false otherwise. Also returns false is supertype isn't in a hierarchy.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyType(System.String)">
            <summary>
            Gets the type of the hierarchy.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>the type of the hierarchy of the entity name specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetAllEntityNamesInProvider">
            <summary>
            Gets all entity names in the provider.
            </summary>
            <returns>List with all entity names in the provider.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityTypeFilters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the entity type filters for the entity names specified. It will use the object aliases specified for the entity names. 
            It will filter out entities which are in a hierarchy of type TargetPerEntity and will also filter out supertypes if the subtype
            is also in the list. Routine is used to add type filters to typedlists automatically for fields in TargetPerEntityHierarchy hierarchies.
            </summary>
            <param name="entityNamesWithAliases">The entity names with per entity name (key) the object alias.</param>
            <returns>PredicateExpression with per entity which needed a typefilter a predicate, added with AND</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityNamesOnHierarchyPath(System.String)">
            <summary>
            Gets the entity names on hierarchy path, from this entity to the root starting with the OwnerEntityName and ending with the 
            root entity name of the hierarchy. If OwnerEntityName entity is a root entity, this collection contains one name: OwnerEntityName.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyFieldAlias(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Gets the hierarchy field alias to use for targeting this field in an entity fetch. The alias is of the format F<i>entityIndex</i>_<i>fieldIndex</i>
            which is the same alias as for the fields returned by GetHierarchyFields. 
            </summary>
            <param name="field">The field.</param>
            <returns>field alias if the field is in a hierarchy entity, otherwise empty string.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetListOfEntityNamesOnHierarchyPath(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo)">
            <summary>
            Gets the list of entity names on hierarchy path. This routine will first obtain the list of entity names from the passed in inheritance info object.
            If the hierarchy is of type TargetPerEntityHierarchy, it will suffix each name with ';1'. If the inheritance hierarchy is TargetPerEntityHierarchy, 
            it will suffix each name with ';2'. This suffix is then used in DbSpecificCreatorBase to produce the proper aliases: a different one for each
            Alias - Entity combination if the hierarchy type is TargetPerEntityHierarchy, and the same for each Alias - Entity combination if they're in the same
            hierarchy.
            </summary>
            <param name="info">The info.</param>
            <returns>List of names, suffixed with the hierarchy type. </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.AddEntityInfo(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32[])">
            <summary>
            Adds a new entity to the store. The supertype name is enough to build the complete hierarchy. 
            </summary>
            <param name="name">name of the entity to add, e.g. "CustomerEntity"</param>
            <param name="superTypeName">the name of the supertype of the passed in entity, e.g. "EmployeeEntity".</param>
            <param name="relationFactory">the relation factory of the entity with name, to produce relations to supertype and subtype.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="distinguishingFieldIndexes">Distinguishing field indexes.</param>
            <remarks>TargetPerEntity specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.AddEntityInfo(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32,System.Object)">
            <summary>
            Adds a new entity to the store. The supertype name is enough to build the complete hierarchy.
            </summary>
            <param name="name">name of the entity to add, e.g. "CustomerEntity"</param>
            <param name="superTypeName">the name of the supertype of the passed in entity, e.g. "EmployeeEntity".</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="discriminatorColumnIndex">Index of the discriminator column.</param>
            <param name="discriminatorColumnValue">Discriminator column value which distinguishes this entity</param>
            <remarks>TargetPerEntityHierarchy specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.BuildHierarchyInfoStore">
            <summary>
            Builds the hierarchy information from the added information though AddEntityInfo calls. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.ConstructPath(System.String)">
            <summary>
            Constructs the path from entity to root of the hierarchy the entity is in. It also constructs entity to hierarchy leafs 
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.CheckIfIsSubTypeOf(System.String,System.String)">
            <summary>
            Determines if typeToCheck is a subtype of superType.
            </summary>
            <param name="typeToCheck">Type to check.</param>
            <param name="superType">The super.</param>
            <returns>
            true if typeToCheck is a subtype of supertype, false otherwise. Also returns false is supertype isn't in a hierarchy.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFields(System.String)">
            <summary>
            Gets the entity fields for the entity passed in. Only the fields defined in the entity are returned
            </summary>
            <param name="entityName">Name of the entity to grab the fields for</param>
            <returns>array of IEntityFieldCore fields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetInheritanceInfo(System.String,System.Boolean)">
            <summary>
            Gets an IInheritanceInfo object with the inheritance information for the entity with the supplied name. 
            </summary>
            <param name="entityName">name of the entity, like "CustomerEntity". This name is used for retrieving the information from
            a thread safe hashtable</param>
            <param name="startWithRoot">Set to <see langword="true"/> if the relations in
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.RelationsToHierarchyRoot"/> have to start with the root and walk downwards to the entityName
            entity, or set to false if the relations have to start at the entityname and move upwards to the root.</param>
            <returns>Ready to use IInheritanceInfo object if entityName is part of a hierarchy. If entityName isn't part of a
            hierarchy, null is returned. (not part of a hierarchy means: not a supertype nor a subtype</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyRelations(System.String,System.String)">
            <summary>
            This method returns all relations from the entityName to the root and from the entityName downwards to all the reachable leafs
            from entityName. All relations to the root are INNER JOIN, all relations from entityName to leafs are LEFT JOIN
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy has to be determined. Example: "CustomerEntity"</param>
            <param name="objectAlias">The object alias to set on all elements in the relations.</param>
            <returns>
            collection with relations if entityName was found, or null if not or if the entity is in a TargetPerEntityHierarchy.
            </returns>
            <remarks>This routine uses no subroutines to avoid thread unsafety.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyRelations(System.String,System.String,System.Boolean)">
            <summary>
            This method returns all relations from the entityName to the root and from the entityName downwards to all the reachable leafs
            from entityName, if includePathsToReachableLeafs is set to true. All relations to the root are INNER JOIN, all relations from entityName to leafs
            are LEFT JOIN
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy has to be determined. Example: "CustomerEntity"</param>
            <param name="objectAlias">The object alias to set on all elements in the relations.</param>
            <param name="includePathsToReachableLeafs">If set to true, it will include the relations for all paths to leafs below the entity passed in</param>
            <returns>
            collection with relations if entityName was found, or null if not or if the entity is in a TargetPerEntityHierarchy.
            </returns>
            <remarks>This routine uses no subroutines to avoid thread unsafety.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyRelations(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            This method returns all relations from the lowest entity found in the passed in entityNames to the root and from the lowest entityName 
            downwards to all the reachable leafs from entityName. All relations to the root are INNER JOIN, all relations from the lowest entityName 
            to leafs are LEFT JOIN. 
            </summary>
            <param name="entityNames">1 or more names of entities on the same path of which the hierarchy has to be determined. Example of a name: "CustomerEntity"</param>
            <param name="objectAlias">The object alias to specify on all elements in the relations.</param>
            <returns>collection with relations if all entityNames were found, or null if not.</returns>
            <remarks>This method is a wrapper around GetHierarchyRelations(name), to make finding the right collection more efficient. It finds the lowest
            entityname in the hierarchy and calls GetHierarchyRelations(name) with that name. It assumes the names are on the same path to the root.</remarks>
            <exception cref="T:System.ArgumentException">when not all entities specified in entityNames are on the same hierarchical path</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyFields(System.String)">
            <summary>
            This method returns an array of IEntityFieldCore objects which contains all fields of all entities on the path: 
            entityName upwards to the root and entityName downwards to all leafs reachable from entityName, including entityName.
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy fields has to be determined. Example: "CustomerEntity"</param>
            <returns>Array of IEntityFieldCore objects, each element represents one field, or null if entityName isn't found.
            When fields are returned, their aliases are set from front to back as 'Fx' where x is the index in the array, starting with 0.</returns>
            <remarks>This routine uses no subroutines to avoid thread unsafety.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyFieldAlias(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Gets the hierarchy field alias to use for targeting this field in an entity fetch. The alias is of the format F<i>entityIndex</i>_<i>fieldIndex</i>
            which is the same alias as for the fields returned by GetHierarchyFields. 
            </summary>
            <param name="field">The field.</param>
            <returns>field alias if the field is in a hierarchy entity, otherwise empty string.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyType(System.String)">
            <summary>
            Gets the type of the hierarchy.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns>the type of the hierarchy of the entity name specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFactory(System.String,System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. This is the name of the root of the hierarchy to consider. 
            For example when fetching all managers, and manager derives from employee, this parameter is 'ManagerEntity', and only the manager type
            or its subtypes (direct or indirect) are considered. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityTypeFilters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets the entity type filters for the entity names specified. It will use the object aliases specified for the entity names. 
            It will filter out supertypes if the subtype is also in the list. Routine is used to add type filters to typedlists automatically.
            </summary>
            <param name="entityNamesWithAliases">The entity names with per entity name (key) the object alias.</param>
            <returns>PredicateExpression with per entity which needed a typefilter a predicate, added with AND</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityTypeFilter(System.String,System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type 'entityName'. Example of a valid name is 'CustomerEntity'. 
            </summary>
            <param name="entityName">Name of the entity to filter on, like 'CustomerEntity'</param>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
            <returns>ready to use predicateexpression, or an empty predicate expression if entityName's value isn't an entity which is a hierarchical type.</returns>
            <remarks>Only useful in entity fetches.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityTypeFilter(System.String,System.String,System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type 'entityName'. Example of a valid name is 'CustomerEntity'.
            </summary>
            <param name="entityName">Name of the entity to filter on, like 'CustomerEntity'</param>
            <param name="objectAlias">The object alias to use for the filter.</param>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false).</param>
            <returns>ready to use predicateexpression, or an empty predicate expression if entityName's value isn't an entity which is a hierarchical type.</returns>
            <remarks>Only useful in entity fetches.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetAllEntityNamesInProvider">
            <summary>
            Gets all entity names in the provider.
            </summary>
            <returns>List with all entity names in the provider.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityNamesOnHierarchyPath(System.String)">
            <summary>
            Gets the entity names on hierarchy path, from this entity to the root starting with the OwnerEntityName and ending with the 
            root entity name of the hierarchy. If OwnerEntityName entity is a root entity, this collection contains one name: OwnerEntityName.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFactoryTargetPerEntity(System.String,System.Object[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. This is the name of the root of the hierarchy to consider. 
            For example when fetching all managers, and manager derives from employee, this parameter is 'ManagerEntity', and only the manager type
            or its subtypes (direct or indirect) are considered. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFactoryTargetPerEntityHierarchy(System.String,System.Object[])">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. As all entity types are in the same target, the routine considers
            all subtypes. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo">
            <summary>
            Private class which contains the entity information for an entity added to the provider's store.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.#ctor(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32[])">
            <summary>
            CTor
            </summary>
            <param name="name">Name.</param>
            <param name="superTypeName">Name of the super type.</param>
            <param name="relationFactory">Relation factory.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="distinguishingFieldIndexes">Distinguishing field indexes.</param>
            <remarks>TargetPerEntity specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.#ctor(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="name">Name.</param>
            <param name="superTypeName">Name of the super type.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="discriminatorColumnIndex">Index of the discriminator column</param>
            <param name="discriminatorColumnValue">Discriminator column value which distinguishes this entity type.</param>
            <remarks>TargetPerEntityHierarchy specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.AddSubType(System.String)">
            <summary>
            adds the name passed in as a subtype of this entity.
            </summary>
            <param name="subTypeName"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DiscriminatorValueToTypeName">
            <summary>
            Gets / sets discriminatorValueToTypeName. This hashtable is only set in entityinfo objects of root entities in TargetPerEntityHierarchy hierarchies.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.IsInTargetPerEntity">
            <summary>
            returns true if relationfactory is set, which is typical for TargetPerEntity hierarchies.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DiscriminatorColumnIndex">
            <summary>
            Gets / sets discriminatorColumnIndex
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DiscriminatorColumnValue">
            <summary>
            Gets / sets discriminatorColumnValue
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.EntityFactory">
            <summary>
            Gets / sets entityFactory
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DistinguishingFieldIndexes">
            <summary>
            Gets / sets distinguishingFieldIndexes
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.Name">
            <summary>
            Gets / sets name
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.SuperTypeName">
            <summary>
            Gets / sets superTypeName
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.RelationFactory">
            <summary>
            Gets / sets relationFactory
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.SubTypeNames">
            <summary>
            Gets / sets subTypeNames
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.HasSubTypes">
            <summary>
            Gets if the entity has any subtypes.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.HasSuperType">
            <summary>
            Gets a value indicating whether this instance has super type.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.EntityIndex">
            <summary>
            Gets or sets the index of the entity. This is a unique number used internally in this provider. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo">
            <summary>
            Injection configuration info class which is used to store injection information per target type, as found in DI configuration elements
            (be it attribute based, config file based or scope based)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.#ctor(System.Type,System.Type,System.String,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionTargetKind,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionContextType)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo"/> class.
            </summary>
            <param name="instanceType">Type of the instance to inject.</param>
            <param name="targetType">Type of the target which contains propertyName and which gets an instance of instanceType injected.</param>
            <param name="propertyName">Name of the property to set with an instace of instanceType.</param>
            <param name="targetKind">targetKind definition.</param>
            <param name="contextType">contextType definition.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.#ctor(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.DependencyInjectionInfoAttribute,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo"/> class.
            </summary>
            <param name="instanceType">Type of the instance.</param>
            <param name="infoAttribute">The info attribute.</param>
            <param name="targetNamespaceFilterFragments">The target namespace filter fragments.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <remarks>Compares on instancetype, targettype, property name, context type and targetkind</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.TargetType">
            <summary>
            Gets / sets targetType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.ContextType">
            <summary>
            Gets / sets contextType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.TargetKind">
            <summary>
            Gets / sets targetKind
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.PropertyName">
            <summary>
            Gets / sets propertyName
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.InstanceType">
            <summary>
            Gets / sets instanceType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.Property">
            <summary>
            Gets / sets property
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo.TargetNamespaceFilterFragments">
            <summary>
            Gets the target namespace filter fragments. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo">
            <summary>
            Injection info class which is used to store injection information per target type in the storage
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo"/> class.
            </summary>
            <param name="configInfo">The config info which contains the data to fill this object with.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.InjectionConfigInfo,SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfoEqualComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo"/> class.
            </summary>
            <param name="configInfo">The config info which contains the data to fill this object with.</param>
            <param name="comparerToUse">The comparer to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <remarks>Compares on instancetype, targettype, property name</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.ContextType">
            <summary>
            Gets / sets contextType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.PropertyName">
            <summary>
            Gets / sets propertyName
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.InstanceType">
            <summary>
            Gets / sets instanceType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo.Property">
            <summary>
            Gets / sets property
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfoEqualComparer">
            <summary>
            Class to compare injection info objects. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfoEqualComparer.Compare(SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo,SD.LLBLGen.Pro.ORMSupportClasses.InjectionInfo)">
            <summary>
            compares a with b. 
            </summary>
            <param name="a">a.</param>
            <param name="b">b.</param>
            <returns>true if a's values are equal to b's values</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionData">
            <summary>
            Class for the injection data passed back from a storage to the injection performer methods which inject the data.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InjectionData.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InjectionData"/> class.
            </summary>
            <param name="injectableData">The injectable data.</param>
            <param name="propertyToSet">The property to set.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionData.InjectableObject">
            <summary>
            Gets / sets injectableObject
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InjectionData.PropertyToSet">
            <summary>
            Gets / sets propertyToSet
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator">
            <summary>
            Interface for creating project elements from somewhere else, like inside Linq providers.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator.GetFactory(System.Int32)">
            <summary>
            Gets the factory of the Entity type with the EntityType value passed in
            </summary>
            <param name="entityTypeValue">The entity type value.</param>
            <returns>
            the entity factory of the entity type or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator.GetFactory(System.Type)">
            <summary>
            Gets the factory of the Entity type with the .NET type passed in
            </summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the entity factory of the entity type or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator.CreateResultsetFields(System.Int32)">
            <summary>
            Creates a new resultset fields object with the number of field slots reserved as specified
            </summary>
            <param name="numberOfFields">The number of fields.</param>
            <returns>ready to use resultsetfields object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator.GetTypedListDao">
            <summary>
            Gets an instance of the TypedListDAO class to execute dynamic lists and projections.
            </summary>
            <returns>ready to use typedlistDAO</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction">
            <summary>
            Interface for the definition of a Transaction class which is used to control a serie of actions on multiple entities or entity collection classes.
            SelfServicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetComplete() to commit the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetAbort() to abort (rollback) the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Save(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling Save(savePointName)
            </summary>
            <param name="savePointName">name of the savepoint to roll back to.</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <remarks>Not supported when using COM+</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Add(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the passed in object as a participant of this transaction. 
            </summary>
            <param name="participant">The ITransactionalElement implementing object which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the passed in object from the transaction.
            </summary>
            <param name="participant">The ITransactionalElement implementing object which should be removed from this transaction</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.TransactionIsolationLevel">
            <summary>
            Gets the isolation level the transaction should use. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Name">
            <summary>
            Gets the name of the transaction. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ConnectionString">
            <summary>
            Gets the connection string used for the connection with the database. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ConnectionToUse">
            <summary>
            The connection object to use with this transaction. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.PhysicalTransaction">
            <summary>
            The physical transaction object used over <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ConnectionToUse"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.EntitiesInTransaction">
            <summary>
            List of GUID's of the entities currently participating in this transaction. This collection is
            used to keep track of which entities already have been added during a recursive save.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory">
            <summary>
            interface for the factory which creates different sets of property descriptor sets. Required for complex databinding. 
            Selfservicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory.GetItemProperties(System.Type)">
            <summary>
            Creates a new propertydescriptorcollection using the specialized methods of the types stored INSIDE the type specified.
            </summary>
            <param name="typeOfCollection">type which contains other types which properties we're interested in.</param>
            <returns>filled propertydescriptorcollection of type inside the type specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory.GetPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Type)">
            <summary>
            Constructs the actual property descriptor collection.
            </summary>
            <param name="entityToCheck">entity instance which properties should be included in the collection</param>
            <param name="typeOfEntity">full type of the entity</param>
            <returns>filled in property descriptor collection</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView">
            <summary>
            Interface for TypedView classes. 
            Selfservicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will use no sort filter, no select filter, will allow duplicate rows and will not limit the amount of rows returned
            </summary>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter, will allow duplicate rows.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount">
            <summary>
            Gets the amount of rows in the database for this typed view, not skipping duplicates
            </summary>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount(System.Boolean)">
            <summary>
            Gets the amount of rows in the database for this typed view.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Gets the amount of rows in the database for this typed view.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection)">
            <summary>
            Gets the amount of rows in the database for this typed view.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetFields">
            <summary>
            Gets the fields of this typed view
            </summary>
            <returns>IEntityFields object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Count">
            <summary>
            Returns the amount of rows in this typed view.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp">
            <summary>
            Interface for TypedList classes. ITypedList is already defined in .NET, that's why it is suffixed with Lgp.
            Selfservicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will use no sort filter, no select filter, will allow duplicate rows and will not limit the amount of rows returned
            </summary>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter, will allow duplicate rows.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to 0, no paging logic is applied</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount">
            <summary>
            Gets the amount of rows in the database for this typed list, not skipping duplicates
            </summary>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="relations">The relations for the filter to apply</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="relations">The relations for the filter to apply</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.BuildRelationSet">
            <summary>Builds the relation set for this typed list.</summary>
            <returns>ready to use relation set</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.BuildResultset">
            <summary>Builds the resultset fields.</summary>
            <returns>ready to use resultset</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator2">
            <summary>
            Interface for creating project elements from somewhere else, like inside Linq providers.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator2.GetFactory(System.Int32)">
            <summary>
            Gets the factory of the Entity type with the EntityType value passed in
            </summary>
            <param name="entityTypeValue">The entity type value.</param>
            <returns>
            the entity factory of the entity type or null if not found
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator2.GetFactory(System.Type)">
            <summary>
            Gets the factory of the Entity type with the .NET type passed in
            </summary>
            <param name="typeOfEntity">The type of entity.</param>
            <returns>the entity factory of the entity type or null if not found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IElementCreator2.CreateResultsetFields(System.Int32)">
            <summary>
            Creates a new resultset fields object with the number of field slots reserved as specified
            </summary>
            <param name="numberOfFields">The number of fields.</param>
            <returns>ready to use resultsetfields object</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2">
            <summary>
            Interface for TypedView classes. 
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2.GetFieldsInfo">
            <summary>
            Gets the IEntityFields2 collection of fields of this typed view. Use this method in combination with the FetchTypedView() methods in 
            DataAccessAdapter.
            </summary>
            <returns>Ready to use IEntityFields2 collection object.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2.Count">
            <summary>
            Returns the amount of rows in this typed view.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2">
            <summary>
            Interface for TypedList classes. ITypedList is already defined in .NET, that's why it is suffixed with Lgp.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2.GetFieldsInfo">
            <summary>
            Gets the IEntityFields2 collection of fields of this typed view. Use this method in combination with the FetchTypedView() methods in 
            DataAccessAdapter.
            </summary>
            <returns>Ready to use IEntityFields2 collection object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2.GetRelationInfo">
            <summary>
            Gets the IRelationPredicateBucket object which contains the relation information for this Typed List. Use this method in combination with the 
            FetchTypedList() methods in DataAccessAdapter.
            </summary>
            <returns>Ready to use IRelationPredicateBucket object.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData">
            <summary>
            Interface for the generic ViewProjectionData class which contains projection data for entity views, used in hierarchical projections of data. 
            The data is applied to a view of all entities with the type specified as TEntity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData.Projectors">
            <summary>
            Gets / sets the list of entity property projectors to project the view's data
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData.AllowDuplicates">
            <summary>
            Gets / sets allowDuplicates, a flag to signal if duplicate results are allowed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData.TypeOfTargetEntity">
            <summary>
            Gets the type of the target entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IViewProjectionData.AdditionalFilter">
            <summary>
             Gets the additional filter to apply to the data before projection. Only matching entities are projected
             </summary>
             <value>The additional filter.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory">
            <summary>
            Relation factory interface for the Relations objects for each entity. This interface is used by InheritanceInfoProvider objects to produce
            relations which relate to the type/entity specified. 
            </summary>
            <remarks>This interface is only implemented on entities which are in a hierarchy of type TargetPerEntity</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory.GetSubTypeRelation(System.String)">
            <summary>
            Returns the relation object the entity, to which this relation factory belongs, has with the subtype with the specified name
            </summary>
            <param name="subTypeEntityName">name of direct subtype which is a subtype of the current entity through the relation to return.</param>
            <returns>relation which makes the current entity a supertype of the subtype entity with the name specified, or null if not applicable/found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory.GetSuperTypeRelation">
            <summary>
            Returns the relation object the entity, to which this relation factory belongs, has with its supertype, if applicable.
            </summary>
            <returns>relation which makes the current entity a subtype of its supertype entity or null if not applicable/found</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IConcurrencyPredicateFactory">
            <summary>
            Interface for ConcurrencyPredicateFactory objects which can be provided by the developer to produce at runtime predicate objects which will
            be added to the update query or delete query. The predicate is returned by the IEntity2 method GetConcurrencyPredicate. Especially useful
            in recursive saves.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IConcurrencyPredicateFactory.CreatePredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType,System.Object)">
            <summary>
            Creates the requested predicate of the type specified
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <param name="containingEntity">the entity object containing this IConcurrencyPredicateFactory instance.</param>
            <returns>A ready to use predicate to use in the query to execute. Can be null/Nothing, in which case the predicate is ignored</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket">
            <summary>
            Interface definition for a bucket class which contains both a predicate expression and a relation collection which are related to each other 
            (the predicate expression works in combination with the relation collection's contents). Used in adapter's context however can also be used
            in other situations, for example custom templates.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket.Relations">
            <summary>
            The relation collection with EntityRelation objects which is used in combination with the PredicateExpression in this bucket
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket.PredicateExpression">
            <summary>
            The predicate expression to use in combination with the Relations in this bucket.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket.SelectListAlias">
            <summary>
            Optional alias for select list fields. Used in entity fetches where the entity type to fetch has to be aliased because the source of the data
            is a derived table or requires aliasing because the relations used require that. If specified, all predicates referring to the entity
            type to fetch have to use the same alias. 
            </summary>
            <remarks>Gets/Sets Relations.SelectListAlias</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation">
            <summary>
            Interface to define the relation between a parameter of a query and a field. This relation is used to find back a related EntityField
            when an Output Parameter is found in a query so the value of the Output Parameter can be assigned to the related EntityField.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.Sync">
            <summary>
            Sets the field's value using ForceCurrentValueWrite with the value of the parameter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.Field">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.Parameter">
            <summary>
            The Parameter in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.TypeConverterToUse">
            <summary>
            The Typeconverter to use, if applicable.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery">
            <summary>
            Interface for retrieval queries. These queries do return a resultset. Retrieval queries execute Select statements.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.Execute(System.Data.CommandBehavior)">
            <summary>
            Executes the query contained by the IQuery instance. The connection has to be opened before calling Execute().
            </summary>
            <param name="behavior">The behavior setting to pass to the ExecuteReader method.</param>
            <returns>An open, ready to use IDataReader instance</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object or the connection is closed.</exception>
            <remarks>Advances the returned datareader to the right resultset described by ResultsetNumber, if possible. If there are less 
            resultsets than ResultsetNumber describes, the last resultset found is returned</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ExecuteScalar">
            <summary>
            Executes the query contained by the IQuery instance as a scalar query. 
            </summary>
            <returns>the value returned by the scalar execution of the query</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSideLimitation">
            <summary>
            Gets / sets the flag which signals fetch code to use client side (i.e. in code) limitation logic and it should not rely on the amount of rows
            returned for row limitations. This flag is set by DQEs if DISTINCT can't be used but row limitations are required and TOP is thus not reliable.
            Default: false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.MaxNumberOfItemsToReturnClientSide">
            <summary>
            Used to set the amount of items to return for client side limitations. Only used if <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSideLimitation"/> is true.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSideDistinctFiltering">
            <summary>
            Flag to tell the object fetcher to use manual distinct filtering, as the DISTINCT command couldn't be applied. Used to tell paging wrappers
            to set RequiresClientSidePaging.  
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSidePaging">
            <summary>
            Flag to tell the object fetcher to use manual paging. This is required when DISTINCT is required however due to DISTINCT violating types
            it can't be applied to the query. This then causes duplicates in the resultset, which shouldn't be there and thus causing pages with much
            lesser data. Only set by a DQE, normally false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ManualPageNumber">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ManualPageSize">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ResultsetNumber">
            <summary>
            Gets or sets the resultset number to retrieve. This is a 1-based number (so first resultset is numbered '1', which is also the default).
            If set to 2 or higher, Execute will call NextResult() on the datareader till the required resultset is reached or NextResult returns false.
            If set to 0 or lower, the number is ignored.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression">
            <summary>
            Interface for a PredicateExpression, which is a grouped set of Predicates. A predicate expression is usable as a WHERE clause.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression. This can be a Predicate derived class or a PredicateExpression. 
            If no object is present yet in the PredicateExpression, no operator is added, otherwise the object is added with an 'And'-operator. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.AddWithOr(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'Or'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.AddWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'And'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Item(System.Int32)">
            <summary>
            Gets the predicate expression element at the index specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Count">
            <summary>
            Gets the amount of predicate expression elements in this predicate expression. This is including all operators.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery">
            <summary>
            Interface for sequence retrieval queries. Sequence retrieval queries are scalar queries (returning a value) which
            are used to retrieve the actual / to use sequence value in systems which do not support batched queries. Normally
            every DQE will batch the sequence retrieval query into the INSERT query as a batched query, however some systems
            do not support this and the only solution is the SequenceRetrievalQuery. Used for Access, Firebird and other systems.
            SequenceRetrievalQueries can be added to IActionQuery instances and will use the IActionQuery object's connection object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.Execute">
            <summary>
            Executes the scalar query contained in this object. (Executed with ExecuteScalar())
            Expects that the command can be executed without problems.
            </summary>
            <remarks>Will store its value in the sequence parameters after execution</remarks>
            <exception cref="T:System.InvalidOperationException">When there is no command object set</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.AddSequenceParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the sequence parameter.
            </summary>
            <param name="toAdd">To add.</param>
            <returns>this instance</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.SequenceRetrievalCommand">
            <summary>
            The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a scalar query and depending on
            ExecuteSequenceCommandFirst it will be executed before or after the actual query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.ExecuteSequenceCommandFirst">
            <summary>
            Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.SequenceParameters">
            <summary>
            Array list with the parameter objects in the actual query which need the value returned by the execution of the command
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.SetParametersAsOutputParameters">
            <summary>
            Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpressionElement">
            <summary>
            Interface used for the elements which are physically stored in a PredicateExpression.
            Generic
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpressionElement.Type">
            <summary>
            The type of the Element. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpressionElement.Contents">
            <summary>
            The contents of the Element
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypeDefaultValue">
            <summary>
            Interface for the class which supplies a default value for a specified .NET type. Necessary for NULL values read from the database.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypeDefaultValue.DefaultValue(System.Type)">
            <summary>
            Returns a default value for the type specified
            </summary>
            <param name="defaultValueType">The type which default value should be returned.</param>
            <returns>The default value for the type specified.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause">
            <summary>
            Interface definition for a class which forms a single sort clause, thus an order by
            definition defined for a single IEntityField or IEntityField - IFieldPersistenceInfo combination
            PersistenceInfo will return the same object when an IEntityField is added to the object.
            Generic
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.FieldToSortCore">
            <summary>
            IEntityFieldCore to sort on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.PersistenceInfo">
            <summary>
            Persistence information for FieldToSort. Can be a cast of the same object, when an IEntityField is
            added to this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.SortOperatorToUse">
            <summary>
            The sort operator to use for this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.CaseSensitiveCollation">
            <summary>
            Gets / sets the CaseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field in the ORDER BY clause. Default: false
            </summary>
            <remarks>CaseSensitiveCollation is also used for in-memory sorts. If set to true, sorts in-memory will be case insensitive, otherwise 
            sorts will be case sensitive. The default for in-memory sorts is the same as for sorts on the db: false.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.EmitAliasForExpressionAggregateField">
            <summary>
            Gets or sets a value indicating whether the alias of the field should be emitted if it has an expression/aggregate or the full field / expression.
            Default is true. Set to false if the field in this sortclause isn't used in the projection and it has an expression/aggregate assigned to it.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression">
            <summary>
            Interface for the class which contains the sort clauses used in IRetrievalQuery instances.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Adds the passed in sort clause to the list. 
            </summary>
            <param name="sortClauseToAdd">the sort clause to add</param>
            <returns>The index the sort clause was added to</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Inserts the passed in sort clause at the index provided.
            </summary>
            <param name="index">Index to insert the sortclause at</param>
            <param name="sortClauseToAdd">the sort clause to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Removes the given sort clause from the list.
            </summary>
            <param name="sortClauseToRemove">the sort clause to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.ToQueryText">
            <summary>
            Retrieves a ready to use text representation for the sort clauses contained in this expression.
            </summary>
            <returns>
            string which is usable as the argument for the ORDER BY clause in a query
            </returns>
            <remarks>uses aliases for fields which have an expression and/or aggregate applied.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation for the sort clauses contained in this expression.
            </summary>
            <param name="aliasesForExpressionsAggregates">If set to false (default is true), the full field name with expression / aggregate is placed in
            the result string instead of the alias of the field. If set to true, aliases are used for fields with an expression and/or aggregate applied.</param>
            <returns>
            string which is usable as the argument for the ORDER BY clause in a query
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Item(System.Int32)">
            <summary>
            Indexer for this list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Count">
            <summary>
            The amount of items currently stored in the ISortExpression
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Parameters">
            <summary>
            The list of parameters created when the sortexpression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IValidator">
            <summary>
            Interface for validation classes used by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore"/> implementing classes. 
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.ValidateFieldValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32,System.Object)">
            <summary>
            Validates the given EntityFieldCore object on the given fieldIndex with the given value.
            This routine is called by the Entity's own value validator after the value has passed validation for destination column type and
            null values. 
            </summary>
            <param name="involvedEntity">The involved entity.</param>
            <param name="fieldIndex">Index of IEntityFieldCore to validate</param>
            <param name="value">Value which should be stored in field with index fieldIndex. Will not be null (earlier logic filters out nulls before
            a call will be made to this routine).</param>
            <returns>
            true if the value is valid for the field, false otherwise
            </returns>
            <remarks>Use the entity.SetEntityFieldError() and entity.SetEntityError() methods if you want to set a IDataErrorInfo error string after the
            validation.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.ValidateEntityAfterLoad(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containing entity after it is loaded. This method is called after the entity has been fully loaded.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.ValidateEntityBeforeSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containing entity right before the save sequence for the entity will start. LLBLGen Pro will call this method right after the
            containing entity is selected from the save queue to be saved.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.ValidateEntityAfterSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containing entity right after the entity's save action has been completed and the entity has been refetched (if applicable).
            Note for adapter users: if the entity wasn't set to be refetched, take into account that reading properties from the containing entity will result in an
            OutOfSync exception.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.ValidateEntityBeforeDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containig entity right beforethe entity's delete action will take place.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.ValidateEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            General validation method which isn't used by the LLBLGen Pro framework, but can be used by your own code to validate an entity at any given moment.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.AssignedToEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the implementing object is assinged to entity.Validator.
            </summary>
            <param name="involvedEntity">entity the validator is assigned to</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.UnassignedFromEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the implementing object is dereferenced from an assigned entity.
            </summary>
            <param name="involvedEntity">the entity the validator is unassigned from</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection">
            <summary>
            Interface for the RelationCollection class which is used to stack relation objects between several entities to build
            a complete join path
            Generic
            NB: ToQueryText() has been removed, query text producing logic is moved to the DQE's, since Oracle 8i doesn't support ANSI
            joins.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range of IEntityRelation objects stored in c to this collection.
            </summary>
            <param name="c">Collection with IEntityRelation objects to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IRelation)">
            <summary>
            Adds the passed in relation to this collection
            </summary>
            <param name="relationToAdd">The relation to add.</param>
            <returns>the added relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity. The start entity gets no alias. 
            The weakness of the relation is considered based on the ObeyWeakRelations setting.
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the aliases specified and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationStartEntity">the alias for the start entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Customer is start entity). Alias is case sensitive</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity or aliasRelationStartEntity are an empty string, null or otherwise unusable 
            alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation)">
            <summary>
            Adds the passed in IDynamicRelation instance to the list
            </summary>
            <param name="relationToAdd">IDynamicRelation to add</param>
            <returns>the added relation in the list, so you can chain commands on 1 line.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IRelation,System.Int32)">
            <summary>
            Adds the passed in IRelation instance to the list at position index. 
            </summary>
            <param name="relationToAdd">IRelation instance to add</param>
            <param name="index">Index to add the relation to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Removes the passed in IEntityRelation instance. Only the first instance will be removed.
            </summary>
            <param name="relationToRemove">IEntityRelation instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.ToQueryText">
            <summary>
            Converts the set of relations to a set of nested JOIN query elements using ANSI join syntaxis. Oracle 8i doesn't support ANSI join syntaxis
            and therefore the OracleDQE has its own join code.
            It uses a database specific creator object for database specific syntaxis, like the format of the tables / views and fields.
            </summary>
            <returns>
            The string representation of the INNER JOIN expressions of the contained relations, when ObeyWeakRelations is set to false (default)
            or the string representation of the LEFT/RIGHT JOIN expressions of the contained relations, when ObeyWeakRelations is set to true
            </returns>
            <exception cref="T:System.ApplicationException">When the DatabaseSpecificCreator is not set.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.ToQueryTextNonAnsi(System.String@,System.String,System.String)">
            <summary>
            Converts the set of relations to a set of nested JOIN query elements using ANSI join syntaxis. Oracle 8i doesn't support ANSI join syntaxis
            and therefore the OracleDQE has its own join code. It uses a database specific creator object for database specific syntaxis, like the format of the
            tables / views and fields.
            </summary>
            <param name="nonAnsiWhereClause">The non ANSI where clause.</param>
            <param name="nonAnsiRootTableReference">The non ANSI root table reference.
            This parameter is set in UPDATE and DELETE statements where a multi-table relation filter is used.
            These queries wrap the joins produced with this routine in a subquery and the table used outside the subquery shouldn't be mentioned in the
            join list. So if this table reference is in the join list, it is skipped (however field1=field2 statements are added to link the outer table to the
            subquery logic).</param>
            <param name="nonAnsiFieldSuffix">The non ANSI field suffix. For Oracle and PostGresql this is '(+)'.</param>
            <returns>the string to use in the FROM clause</returns>
            <remarks>After this calls the parameters produced are in the Parameters collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
            <param name="artificialAliasPerEntity">The artificial alias per entity. This collection contains per entity (key) the artificial alias (value), IF 
            such an artificial alias has been given out. (only done with entities which are part of a hierarchy of type TargetPerEntity)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.GetAllDerivedTables">
            <summary>
            Gets all derived tables in the relations inside this relation collection.
            </summary>
            <returns>List of all the derived tables in this relation collection or an empty list if none found.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection. Returned value can be IEntityRelation or IDynamicRelation
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            ToQueryText statement, which is called by the DQE. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Count">
            <summary>
            Returns the amount of relations in this object
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.CustomFilterParameters">
            <summary>
            Gets Custom Filter Parameters, created in ToQueryText and which are used in custom filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.SelectListAlias">
            <summary>
            Optional alias for select list fields. Used in entity fetches where the entity type to fetch has to be aliased because the source of the data
            is a derived table or requires aliasing because the relations used require that. If specified, all predicates referring to the entity
            type to fetch have to use the same alias. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.WillPotentiallyCauseDuplicateRows">
            <summary>
            Gets a value indicating whether the contents of this relation collection will result in joins which result in duplicate data. This is the case
            if there's at least one 1:n or m:n relation. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression">
            <summary>
            Interface which defines a scalar query which can be used inside an Expression object. The scalar query results a single value, and because
            it can be used as an expression, it can be used in the select list of a dynamic list. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the scalar query
            </summary>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IScalarQueryExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the scalar query
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IScalarQueryExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.SelectField">
            <summary>
            The field which will be the resultvalue of this scalar query
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.SelectFieldPersistenceInfo">
            <summary>
            The persistence info for the SelectField
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.FilterToUse">
            <summary>
            The filter to use in the scalar query. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.RelationsToUse">
            <summary>
            The relations to use in the scalar query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.SorterToUse">
            <summary>
            The sorter to use in the scalar query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.Parameters">
            <summary>
            The list of parameters created when the ScalarQueryExpression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IScalarQueryExpression.GroupByClause">
            <summary>
            The group by clause to use in this scalar query.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider">
            <summary>
            Interface for the PersistenceInfoProvider classes which are used to provide persistence information for adapter/selfservicing fields.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider.GetAllFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Retrieves for each field of entity / typed view with the name passed in the corresponding IFieldPersistenceInfo instance.
            The order of these IFieldPersistenceInfo objects is the same as the corresponding fields in an 
            entity / typed view with the name objectName.
            </summary>
            <param name="entity">Name of the entity / typed view to retrieve the IFieldPersistenceInfo objects for. Example: CustomerEntity</param>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider.GetAllFieldPersistenceInfos(System.String)">
            <summary>
            Retrieves for each field of the entity instance passed in the corresponding IFieldPersistenceInfo instance.
            </summary>
            <param name="entity">Entity instance to return the IFieldPersistenceInfo objects for.</param>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPersistenceInfoProvider.GetFieldPersistenceInfo(System.String,System.String)">
            <summary>
            Retrieves for the field with name fieldName of entity / typed view with the name passed in the corresonding IFieldPersistenceInfo instance.
            </summary>
            <param name="elementName">Name of the entity / typed view the field belongs to. Example: CustomerEntity</param>
            <param name="fieldName">Name of the field which fieldpersistenceinfo should be returned. Example: CustomerID</param>
            <returns>Requested IFieldPersistenceInfo object</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IOwnedDataSerializableAndRecreatable">
            <summary>
            Interface which allows a class to specify that it can be recreated during deserialization using a default constructor
            and then calling DeserializeOwnedData()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializationTypeSurrogate">
            <summary>
            Interface to allow helper classes to be used to serialize objects
            that are not directly supported by SerializationWriter/SerializationReader
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializationTypeSurrogate.SupportsType(System.Type)">
            <summary>
            Allows a surrogate to be queried as to whether a particular type is supported
            </summary>
            <param name="type">The type being queried</param>
            <returns>true if the type is supported; otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializationTypeSurrogate.Serialize(SD.LLBLGen.Pro.ORMSupportClasses.SerializationWriter,System.Object)">
            <summary>
            FastSerializes the object into the SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter into which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IFastSerializationTypeSurrogate.Deserialize(SD.LLBLGen.Pro.ORMSupportClasses.SerializationReader,System.Type)">
            <summary>
            Deserializes an object of the supplied type from the SerializationReader.
            </summary>
            <param name="reader">The SerializationReader containing the serialized object.</param>
            <param name="type">The type of object required to be deserialized.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IByteCompressor">
            <summary>
            Interface to implement on a compressor class which can be used to compres/decompress the resulting byte array of the Fast serializer. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IByteCompressor.Compress(System.Byte[])">
            <summary>
            Compresses the specified serialized data.
            </summary>
            <param name="serializedData">The serialized data.</param>
            <returns>The  passed in serialized data in compressed form</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IByteCompressor.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified compressed data.
            </summary>
            <param name="compressedData">The compressed data.</param>
            <returns>The  passed in de-serialized data in compressed form</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IMemoryStreamByteCompressor">
            <summary>
            Interface to implement on specialized compressor classes to compress a passed in memory stream
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IMemoryStreamByteCompressor.Compress(System.IO.MemoryStream)">
            <summary>
            Compresses the specified memory stream.
            </summary>
            <param name="memoryStream">The memory stream.</param>
            <returns>the data in the memory stream in compressed format.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate">
            <summary>
            Predicate class which allows in-memory filters to perform a predicate on one or more related entities. The entity this predicate
            is applied on has to have a member property with the name specified. Each element in that member (or the member itself, in case of a 
            single instance) will be interpreted with the specified filter. The result of that interpretation is used together with the MemberOperator specified
            what the result of this predicate will be: true or false, in which case the entity this predicate is applied on is accepted (true) or not (false).
            </summary>
            <remarks>Meant for in-memory filtering. Can't be used in database targeting filters.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.MemberOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="filter">The filter to apply to elements of the member (or the member itself in case of a single instance).</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.#ctor(System.String,SD.LLBLGen.Pro.ORMSupportClasses.MemberOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate"/> class.
            </summary>
            <param name="memberName">Name of the member of the entity this predicate is applied on, on which filter has to be applied.</param>
            <param name="operatorToUse">The operator to use.</param>
            <param name="filter">The filter to apply to elements of the member (or the member itself in case of a single instance).</param>
            <param name="negate">If true, the result of the MemberPredicate will be negated prior to return.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.MemberName">
            <summary>
            Gets / sets memberName, which is the name of the member of the entity this predicate is applied on, on which filter has to be applied.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.OperatorToUse">
            <summary>
            Gets / sets operatorToUse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.MemberPredicate.Filter">
            <summary>
            Gets / sets the filter to apply to elements of the member (or the member itself in case of a single instance).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation">
            <summary>
            Class to define the relation between a parameter of a query and a field. This relation is 
            used to find back a related EntityFieldCore instance when an Output Parameter is found in a query so the value 
            of the Output Parameter can be assigned to the related EntityField
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Data.Common.DbParameter,System.ComponentModel.TypeConverter)">
            <summary>
            CTor
            </summary>
            <param name="field">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship.</param>
            <param name="parameter">The Parameter in the relationship.</param>
            <param name="typeConverterToUse">The type converter to use, if applicable (can be null)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.Sync">
            <summary>
            Sets the field's value using ForceCurrentValueWrite with the value of the parameter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.Field">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.Parameter">
            <summary>
            The Parameter in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.TypeConverterToUse">
            <summary>
            The Typeconverter to use, if applicable.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation">
            <summary>
            Class to define a relation between two parameters, one is the source and one is the destination. 
            These relation objects are used in multi-command queries for inserting multi-target entities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.#ctor(System.Data.Common.DbParameter,System.Data.Common.DbParameter)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation"/> instance.
            </summary>
            <param name="sourceParameter">Source parameter.</param>
            <param name="destionationParameter">Destionation parameter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.Sync">
            <summary>
            Syncs the destination parameter's value with the source parameter's value.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.SourceParameter">
            <summary>
            Gets / sets sourceParameter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.DestinationParameter">
            <summary>
            Gets / sets destinationParameter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase">
            <summary>
            Abstract class for the persistence info provider class which is used to provide FieldPersistenceInfo objects for fields/entities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.GetAllFieldPersistenceInfos(System.String)">
            <summary>
            Retrieves for each field of entity / typed view with the name passed in the corresponding IFieldPersistenceInfo instance.
            The order of these IFieldPersistenceInfo objects is the same as the corresponding fields in an 
            entity / typed view with the name objectName.
            </summary>
            <param name="elementName">Name of the entity / typed view to retrieve the IFieldPersistenceInfo objects for. Example: CustomerEntity</param>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.GetAllFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Retrieves for each field of the entity instance passed in the corresponding IFieldPersistenceInfo instance.
            </summary>
            <param name="entity">Entity instance to return the IFieldPersistenceInfo objects for.</param>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.GetFieldPersistenceInfo(System.String,System.String)">
            <summary>
            Retrieves for the field with name fieldName of entity / typed view with the name passed in the corresonding IFieldPersistenceInfo instance.
            </summary>
            <param name="elementName">Name of the entity / typed view the field belongs to. Example: CustomerEntity</param>
            <param name="fieldName">Name of the field which fieldpersistenceinfo should be returned. Example: CustomerID</param>
            <returns>Requested IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.InitClass(System.Int32)">
            <summary>
            Inits the class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.AddElementMapping(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Adds an element mapping.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="catalogName">Name of the catalog.</param>
            <param name="schemaName">Name of the schema.</param>
            <param name="targetName">Name of the target.</param>
            <param name="numberOfFields">The number of fields.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.AddElementFieldMapping(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type,System.Int32)">
            <summary>
            Adds an element field mapping for the element name.elementfieldname field.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementFieldName">Name of the element field.</param>
            <param name="sourceColumnName">Name of the source column.</param>
            <param name="isSourceColumnNullable">if set to <c>true</c> [is source column nullable].</param>
            <param name="sourceColumnDbType">string representation of the ADO.NET specific enum value of the db type of the field.</param>
            <param name="sourceColumnMaxLength">Length of the source column max.</param>
            <param name="sourceColumnScale">The source column scale.</param>
            <param name="sourceColumnPrecision">The source column precision.</param>
            <param name="isIdentity">if set to <c>true</c> [is identity].</param>
            <param name="identityValueSequenceName">Name of the identity value sequence.</param>
            <param name="typeConverterToUse">The type converter to use.</param>
            <param name="actualDotNetType">Type of the actual dot net.</param>
            <param name="fieldIndex">Index of the field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.GetElementMappingInfo(System.String)">
            <summary>
            Gets the element mapping info.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping">
            <summary>
            private class which is used to store mapping info of an element.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping"/> class.
            </summary>
            <param name="catalogName">Name of the catalog.</param>
            <param name="schemaName">Name of the schema.</param>
            <param name="targetName">Name of the target.</param>
            <param name="numberOfFields">The number of fields.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping.CatalogName">
            <summary>
            Gets or sets the name of the catalog.
            </summary>
            <value>The name of the catalog.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping.TargetName">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping.ElementFieldMappings">
            <summary>
            Gets the element field mappings.
            </summary>
            <value>The element field mappings.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PersistenceInfoProviderBase.ElementToTargetMapping.ElementFieldMappingsOnIndex">
            <summary>
            Gets the indexes of the element field mappings.
            </summary>
            <value>The index of the element field mappings on.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression">
            <summary>
            Implementation of the IPredicateExpression interface.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.#ctor">
            <summary>
            CTor. This empty constructor is not recommended when adding this instance directly
            to another PredicateExpression.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            CTor.
            </summary>
            <param name="predicateToAdd">Initial IPredicate implementing object for this PredicateExpression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            CTor
            </summary>
            <param name="operand1">operand one of the expression</param>
            <param name="predicateExpressionOperator">operator of the expression</param>
            <param name="operand2">operand two of the expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.GetFrameworkElementsInPredicate">
            <summary>
            Gets a list of all framework objects (fields, expression objects etc.) which are located in this IPredicate instance. E.g. a
            FieldCompareValuePredicate will return a list with 1 IEntityFieldCore instance: the field to compare. If no framework elements are present in the
            predicate, the base implementation is used, which returns an empty list. This routine is used to gather information for Linq queries.
            </summary>
            <returns>List with 0 or more framework objects</returns>
            <remarks>IPredicateExpression instances return a list of the elements in the predicate expression, which can be predicateexpressions as well
            so it's not recursive.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression. This can be a Predicate derived class or a PredicateExpression. 
            If no object is present yet in the PredicateExpression, no operator is added, otherwise the object is added with an 'And'-operator. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.AddWithOr(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'Or'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When predicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.AddWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'And'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When predicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.ToQueryText">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained PredicateExpression.
            </summary>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained Predicate in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.System#Collections#Generic#IEnumerable{SD#LLBLGen#Pro#ORMSupportClasses#IPredicateExpressionElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.InterpretPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Interprets this predicate on the passed in entity
            </summary>
            <param name="entity">The entity to interpret this predicate on</param>
            <returns>
            true if the predicate interpretation resolves to true, otherwise false.
            </returns>
            <remarks>By default this method throws a NotSupported exception. It is only implemented on predicates which can be used
            for in-memory filtering.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.AddPredicate(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator)">
            <summary>
            Adds the predicate.
            </summary>
            <param name="predicateToAdd">The predicate to add.</param>
            <param name="operatorToUse">The operator to use.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Item(System.Int32)">
            <summary>
            Gets the predicate expression element at the index specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Count">
            <summary>
            Gets the amount of predicate expression elements in this predicate expression. This is including all operators.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement">
            <summary>
            Implementation of the IPredicateExpressionElement interface
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="elementType">The type of the Element. </param>
            <param name="contents">The contents of the Element</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.Type">
            <summary>
            The type of the Element. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.Contents">
            <summary>
            The contents of the Element
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection">
            <summary>
            Class which is used to stack relation objects between several entities to build a complete join path
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection"/> class.
            </summary>
            <param name="toAdd">IEntityRelation instance to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection"/> class.
            </summary>
            <param name="toAdd">IDynamicRelation instance to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection"/> class.
            </summary>
            <param name="toAdd">IEntityRelation instance to add</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection"/> class.
            </summary>
            <param name="toAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity. The start entity gets no alias. 
            The weakness of the relation is considered based on the ObeyWeakRelations setting.
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the aliases specified and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationStartEntity">the alias for the start entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Customer is start entity). Alias is case sensitive</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity or aliasRelationStartEntity are an empty string, null or otherwise unusable 
            alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IRelation)">
            <summary>
            Adds the passed in relation to this collection
            </summary>
            <param name="relationToAdd">The relation to add.</param>
            <returns>the added relation</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation)">
            <summary>
            Adds the passed in IDynamicRelation instance to the list
            </summary>
            <param name="relationToAdd">IDynamicRelation to add</param>
            <returns>the added relation in the list, so you can chain commands on 1 line.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range of IEntityRelation objects stored in c to this collection.
            </summary>
            <param name="c">Collection with IEntityRelation objects to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IRelation,System.Int32)">
            <summary>
            Adds the passed in IRelation instance to the list at position index.
            </summary>
            <param name="relationToAdd">IRelation instance to add</param>
            <param name="index">Index to add the relation to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Removes the passed in IEntityRelation instance. Only the first instance will be removed.
            </summary>
            <param name="relationToRemove">IEntityRelation instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
            <param name="artificialAliasPerEntity">The artificial alias per entity. This collection contains per entity (key) the artificial alias (value), IF 
            such an artificial alias has been given out. (only done with entities which are part of a hierarchy of type TargetPerEntity)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.GetAllDerivedTables">
            <summary>
            Gets all derived tables in the relations inside this relation collection.
            </summary>
            <returns>List of all the derived tables in this relation collection or an empty list if none found.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ToQueryText">
            <summary>
            Converts the set of relations to a set of nested JOIN query elements using ANSI join syntaxis. Oracle 8i doesn't support ANSI join syntaxis
            and therefore the OracleDQE has its own join code.
            It uses a database specific creator object for database specific syntaxis, like the format of the tables / views and fields.
            </summary>
            <returns>
            The string representation of the INNER JOIN expressions of the contained relations, when ObeyWeakRelations is set to false (default)
            or the string representation of the LEFT/RIGHT JOIN expressions of the contained relations, when ObeyWeakRelations is set to true
            </returns>
            <exception cref="T:System.ApplicationException">When the DatabaseSpecificCreator is not set</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException">when the relation set contains an error and is badly formed. For example when the relation collection
            contains relations which do not have an entity in common, which can happen when a bad alias is specified</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ToQueryTextNonAnsi(System.String@,System.String,System.String)">
            <summary>
            Converts the set of relations to a set of nested JOIN query elements using ANSI join syntaxis. Oracle 8i doesn't support ANSI join syntaxis
            and therefore the OracleDQE has its own join code. It uses a database specific creator object for database specific syntaxis, like the format of the
            tables / views and fields.
            </summary>
            <param name="nonAnsiWhereClause">The non ANSI where clause.</param>
            <param name="nonAnsiRootTableReference">The non ANSI root table reference.
            This parameter is set in UPDATE and DELETE statements where a multi-table relation filter is used.
            These queries wrap the joins produced with this routine in a subquery and the table used outside the subquery shouldn't be mentioned in the
            join list. So if this table reference is in the join list, it is skipped (however field1=field2 statements are added to link the outer table to the
            subquery logic).</param>
            <param name="nonAnsiFieldSuffix">The non ANSI field suffix. For Oracle and PostGresql this is '(+)'.</param>
            <returns>the string to use in the FROM clause</returns>
            <remarks>After this calls the parameters produced are in the Parameters collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ToQueryTextInternal(System.Boolean,System.String@,System.String,System.String)">
            <summary>
            Produces the output for the ToQueryText methods. If ansiJoins is set to false, a non-ansi variant is produced (table, table, table etc.) with a
            separate where clause. If ansiJoins is true, normal OUTER joins are used (INNER/LEFT/RIGHT with ON clauses).
            </summary>
            <param name="ansiJoins">true if ansi joins (INNER/LEFT/RIGHT) should be used</param>
            <param name="nonAnsiWhereClause">The non ANSI where clause. Empty if ansiJoins is set to true</param>
            <param name="nonAnsiRootTableReference">The non ANSI root table reference.
            This parameter is set in UPDATE and DELETE statements where a multi-table relation filter is used.
            These queries wrap the joins produced with this routine in a subquery and the table used outside the subquery shouldn't be mentioned in the
            join list. So if this table reference is in the join list, it is skipped (however field1=field2 statements are added to link the outer table to the
            subquery logic).</param>
            <param name="nonAnsiFieldSuffix">The non ANSI field suffix. For Oracle and PostGresql this is '(+)'.</param>
            <returns>the string to use in the FROM clause</returns>
            <remarks>After this calls the parameters produced are in the Parameters collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.MarkAllFieldsReferencingJoinedDerivedTablesAsSuch">
            <summary>
            Marks all fields which refer to a joined part which is actually a derived table as a derived table referencing field. This is then later on
            used to correct names, if necessary. Only required for joins between a derived table and a normal relation which is implicit (i.e. a dynamic relation
            with just a derived table is in the collection together with a normal relation where 1 side is to be replaced with the derived table
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.PreprocessRelations">
            <summary>
            Preprocesses the relations in this relationcollection
            The start/end entity can have an inheritance info object with them, causing these relations to
            be inserted at that spot, where the additional relations for the start entity are added BEFORE the actual relation and the relations for the
            end entity AFTER the actual relation.
            </summary>
            <returns>the full set of relations to process</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ToggleArtificialAliasingForTargetPerEntityRelations(System.Boolean)">
            <summary>
            Enables / disables the artificial aliasing for target per entity relations. This method is used to enable the artificial aliasing of entities which
            are in a hierarchy of TargetPerEntity and which are in the relations of this collection. This is switched on for dyn/typedlist fetches to be sure 
            dyn/typedlists with fields from multiple entities in the same inheritance hierarchy will be retrievable properly, as they need aliasing under the hood
            but if the developer didn't alias the entities, the query will fail because the supertype(s) aren't joined multiple types. 
            </summary>
            <param name="enable">if set to true, enable artificial aliasing, otherwise false (default).</param>
            <remarks>Artificial aliasing is disabled by default</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.RemoveHierarchyRelations">
            <summary>
            Removes the hierarchy relations from this relationcollection. During query construction, hierarchy relations are added to this collection
            to make the actual relations reaching all the tables / views targeted. In prefetch paths, these relationcollections are passed on.
            Normally this isn't a problem, as duplicate relations are filtered out, but in an edge case with m:n with relation to the supertype, it
            can be this will cause a problem. To avoid this problem, the hierarchy relations have to be filtered out, as they're re-added anyway. 
            Keeping them in this list, will cause them to crash the query processor as these 'duplicated' relations will be dangling at the end of the set
            but aren't necessarily connected to the full set of relations. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.PrepareJoinableFragments(System.Text.StringBuilder,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation,System.Boolean,System.Boolean@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Prepares the joinable fragments from the current relation to process for query text production.
            </summary>
            <param name="queryText">The query text.</param>
            <param name="relationAsEntityRelation">The relation as entity relation.</param>
            <param name="relationAsDynamicRelation">The relation as dynamic relation.</param>
            <param name="relationIsDynamicRelation">if set to <c>true</c> [relation is dynamic relation].</param>
            <param name="isSingleOperandDynamicRelation">if set to <c>true</c> [is single operand dynamic relation].</param>
            <param name="pkElement">The pk element.</param>
            <param name="fkElement">The fk element.</param>
            <param name="aliasPKSide">The alias PK side.</param>
            <param name="aliasFKSide">The alias FK side.</param>
            <param name="pkElementReference">The pk element reference.</param>
            <param name="fkElementReference">The fk element reference.</param>
            <returns>
            true if processing should continue after this call, false otherwise. This flag is set when a single-sided dynamic relation with a
            derived table is determined: there's no right side so processing should stop.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.AddSubRelationToRelationsToReturn(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Collections.Hashtable,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the sub relation to the relations to return collection.
            </summary>
            <param name="toReturn">To return.</param>
            <param name="aliasesAlreadyInJoinList">The aliases already in join list.</param>
            <param name="startEntityAlias">The start entity alias.</param>
            <param name="endEntityAlias">The end entity alias.</param>
            <param name="subRelation">The sub relation.</param>
            <param name="hintForJoins">The hint for joins.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.DetermineAliasesForElements(SD.LLBLGen.Pro.ORMSupportClasses.IRelation,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Determines the aliases for the elements in the relation passed in.
            </summary>
            <param name="relation">The relation.</param>
            <param name="aliasStartElement">The alias start element.</param>
            <param name="aliasEndElement">The alias end element.</param>
            <param name="originalAliasStartElement">The original alias start element.</param>
            <param name="originalAliasEndElement">The original alias end element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.InitClass">
            <summary>
            Inits the class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.AddCorrectRelationToRelationCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelation,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.IDynamicRelation)">
            <summary>
            Adds the correct relation to relation collection.
            </summary>
            <param name="collectionToAddTo">The collection to add to.</param>
            <param name="currentRelation">The current relation.</param>
            <param name="relationAsEntityRelation">The relation as entity relation.</param>
            <param name="relationAsDynamicRelation">The relation as dynamic relation.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.DetermineIfResultsInDuplicateRows">
            <summary>
            Determines if the relations in this collection when used in a join result in duplicate rows.
            </summary>
            <returns>true if it does, false otherwise</returns>
            <remarks>1:n, m:n and DynamicRelation instances with two sides are considered reasons that duplicates could occur.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            ToQueryText statement, which is called by the DQE. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.CustomFilterParameters">
            <summary>
            Gets Custom Filter Parameters, created in ToQueryText and which are used in custom filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.SelectListAlias">
            <summary>
            Optional alias for select list fields. Used in entity fetches where the entity type to fetch has to be aliased because the source of the data
            is a derived table or requires aliasing because the relations used require that. If specified, all predicates referring to the entity
            type to fetch have to use the same alias. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.WillPotentiallyCauseDuplicateRows">
            <summary>
            Gets a value indicating whether the contents of this relation collection will result in joins which result in duplicate data. This is the case
            if there's at least one 1:n or m:n relation. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket">
            <summary>
            IRelationPredicateBucket implementation which can be used as a single unit to pass to a data-access adapter for 
            filtering over multi-entities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket"/> class.
            </summary>
            <param name="filterToUse">Filter to use. Will be set as the initial PredicateExpression contents</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.Clone">
            <summary>
            create a shallow copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.Relations">
            <summary>
            The relation collection with EntityRelation objects which is used in combination with the PredicateExpression in this bucket
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.PredicateExpression">
            <summary>
            The predicate expression to use in combination with the Relations in this bucket.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.SelectListAlias">
            <summary>
            Optional alias for select list fields. Used in entity fetches where the entity type to fetch has to be aliased because the source of the data
            is a derived table or requires aliasing because the relations used require that. If specified, all predicates referring to the entity
            type to fetch have to use the same alias. 
            </summary>
            <remarks>Gets/Sets Relations.SelectListAlias</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery">
            <summary>
            Implementation of the RetrievalQuery class. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.#ctor(System.Data.Common.DbCommand)">
            <summary>
            CTor
            </summary>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
            <summary>
            CTor
            </summary>
            <param name="connectionToUse">Connection object to use</param>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.Execute(System.Data.CommandBehavior)">
            <summary>
            Executes the query contained by the IQuery instance. The connection has to be opened before calling Execute().
            </summary>
            <param name="behavior">The behavior setting to pass to the ExecuteReader method.</param>
            <returns>
            An open, ready to use IDataReader instance
            </returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object,
            or no connection object inside the query object or the connection is closed.</exception>
            <remarks>Advances the returned datareader to the right resultset described by ResultsetNumber, if possible. If there are less
            resultsets than ResultsetNumber describes, the last resultset found is returned</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ExecuteScalar">
            <summary>
            Executes the query contained by the IQuery instance as a scalar query. 
            </summary>
            <returns>the value returned by the scalar execution of the query</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSideLimitation">
            <summary>
            Gets / sets the flag which signals fetch code to use client side (i.e. in code) limitation logic and it should not rely on the amount of rows
            returned for row limitations. This flag is set by DQEs if DISTINCT can't be used but row limitations are required and TOP is thus not reliable.
            Default: false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.MaxNumberOfItemsToReturnClientSide">
            <summary>
            Used to set the amount of items to return for client side limitations. Only used if <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSideLimitation"/> is true.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSidePaging">
            <summary>
            Flag to tell the object fetcher to use manual paging. This is required when DISTINCT is required however due to DISTINCT violating types
            it can't be applied to the query. This then causes duplicates in the resultset, which shouldn't be there and thus causing pages with much
            lesser data. Only set by a DQE, normally false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ManualPageNumber">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ManualPageSize">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSideDistinctFiltering">
            <summary>
            Flag to tell the object fetcher to use manual distinct filtering, as the DISTINCT command couldn't be applied. Used to tell paging wrappers
            to set RequiresClientSidePaging.  
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ResultsetNumber">
            <summary>
            Gets or sets the resultset number to retrieve. This is a 1-based number (so first resultset is numbered '1', which is also the default).
            If set to 2 or higher, Execute will call NextResult() on the datareader till the required resultset is reached or NextResult returns false.
            If set to 0 or lower, the value is ignored.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression">
            <summary>
            Class which implements a scalar query which is usable inside an expression. This expression assumes the query formulated will result in a single value.
            If that's not the case, use the overload of the CTor which accepts a value for forceRowLimit or set its ForceRowLimit property to true (default: false). 
            If forceRowLimit is set to true, a TOP 1 clause will be emitted into the query to force the query to result into a single value. Normally you don't need
            to do this as a scalar query has to be formulated as a single value anyway. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="relationsToUse">The relations to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="forceRowLimit">If set to true, it will force a TOP 1 clause to be emitted into the SQL (or equivalent if the db doesn't support TOP)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="sorterToUse">The sorter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="sorterToUse">The sorter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="sorterToUse">The sorter to use.</param>
            <param name="groupByClause">The group by clause.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression"/> class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="sorterToUse">The sorter to use.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="forceRowLimit">If set to true, it will force a TOP 1 clause to be emitted into the SQL (or equivalent if the db doesn't support TOP)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the scalar query
            </summary>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IScalarQueryExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the scalar query
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IScalarQueryExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="selectField">The select field.</param>
            <param name="selectFieldPersistenceInfo">The select field persistence info.</param>
            <param name="filterToUse">The filter to use.</param>
            <param name="relationsToUse">The relations to use.</param>
            <param name="sorterToUse">The sorter to use.</param>
            <param name="groupByClause">The group by clause.</param>
            <param name="forceRowLimit">if set to <c>true</c> [force row limit].</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#ToQueryText">
            <summary>
            Retrieves a ready to use text representation of the contained expression.
            </summary>
            <returns>
            The contained expression in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the scalar query
            </summary>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>
            The contained function call in textual format.
            </returns>
            <exception cref="T:System.ApplicationException">When IScalarQueryExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters,
            and conversion routines, and field names, including prefix/postfix characters.
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SD#LLBLGen#Pro#ORMSupportClasses#IExpression#Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.ForceRowLimit">
            <summary>
            Gets / sets ForceRowLimit. If set to true (default: false), it will force a TOP 1 clause to be emitted into the SQL (or equivalent if the db 
            doesn't support TOP)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.Parameters">
            <summary>
            The list of parameters created when the ScalarQueryExpression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SelectFieldPersistenceInfo">
            <summary>
            Gets / sets selectFieldPersistenceInfo
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.FilterToUse">
            <summary>
            Gets / sets filterToUse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.RelationsToUse">
            <summary>
            Gets / sets relationsToUse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SorterToUse">
            <summary>
            Gets / sets sorterToUse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.SelectField">
            <summary>
            Gets / sets selectField
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ScalarQueryExpression.GroupByClause">
            <summary>
            Gets / sets groupByClause
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery">
            <summary>
            Class for sequence retrieval queries. Sequence retrieval queries are scalar queries (returning a value) which
            are used to retrieve the actual / to use sequence value in systems which do not support batched queries. Normally
            every DQE will batch the sequence retrieval query into the INSERT query as a batched query, however some systems
            do not support this and the only solution is the SequenceRetrievalQuery. Used for Access, Firebird and other systems.
            SequenceRetrievalQueries can be added to IActionQuery instances and will use the IActionQuery object's connection object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.#ctor(System.Data.Common.DbCommand,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.#ctor(System.Data.Common.DbCommand,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the
            actual query in this ActionQuery object.</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.#ctor(System.Data.Common.DbCommand,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="sequenceRetrievalCommand">The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a 
            scalar query and depending on ExecuteSequenceCommandFirst it will be executed before or after the actual query.</param>
            <param name="executeSequenceCommandFirst">Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. </param>
            <param name="setParametersAsOutputParameters">Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;</param>
            <param name="sequenceParameters">List with the parameter objects in the actual query which need the value returned by the execution of the command</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.ToString">
            <summary>
            ToString representation of Sequence query, used in Trace logs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.AddSequenceParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the sequence parameter.
            </summary>
            <param name="toAdd">To add.</param>
            <returns>this instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.Execute">
            <summary>
            Executes the scalar query contained in this object. (Executed with ExecuteScalar())
            Expects that the command can be executed without problems.
            </summary>
            <remarks>Will store its value in the sequence parameters after execution</remarks>
            <exception cref="T:System.InvalidOperationException">When there is no command object set</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.Dispose(System.Boolean)">
            <summary>
            Performs the dispose action.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.SequenceRetrievalCommand">
            <summary>
            The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a scalar query and depending on
            ExecuteSequenceCommandFirst it will be executed before or after the actual query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.ExecuteSequenceCommandFirst">
            <summary>
            Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.SequenceParameters">
            <summary>
            List with the parameter objects in the actual query which need the value returned by the execution of the command
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.SetParametersAsOutputParameters">
            <summary>
            Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SortClause">
            <summary>
            Class which implements ISortClause, a class which forms a single sort clause, thus an order by
            definition defined for a single IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityField to sort on</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,System.String)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityField to sort on</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityFieldCore to sort on</param>
            <param name="persistenceInfo">Persistence info of fieldToSort</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,System.String)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityFieldCore to sort on</param>
            <param name="persistenceInfo">Persistence info of fieldToSort</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.SetCaseSensitiveCollation(System.Boolean)">
            <summary>
            Sets the case sensitive collation flag and returns the sortclause instance for further command chaining
            </summary>
            <param name="value">new value for teh CaseSensitiveCollation flag.</param>
            <returns>this instance for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.op_BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.SortClause,SD.LLBLGen.Pro.ORMSupportClasses.SortClause)">
            <summary>
            Operator overload for the '&amp;' operator to concatenate sortclauses into a sortexpression
            </summary>
            <param name="leftOperand">left operand</param>
            <param name="rightOperand">right operand</param>
            <returns>new sortexpression object with first the leftoperand and then the rightoperand</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.op_BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.SortExpression,SD.LLBLGen.Pro.ORMSupportClasses.SortClause)">
            <summary>
            Operator overload for the '&amp;' operator to concatenate sortclauses into a sortexpression
            </summary>
            <param name="leftOperand">left operand</param>
            <param name="rightOperand">right operand</param>
            <returns>the left operand to which the right operand is added</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.FieldToSortCore">
            <summary>
            entity field to sort on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.PersistenceInfo">
            <summary>
            Persistence information for FieldToSort. Can be a cast of the same object, when an IEntityField is
            added to this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.SortOperatorToUse">
            <summary>
            The sort operator to use for this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.CaseSensitiveCollation">
            <summary>
            Gets / sets caseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field. Default: false
            </summary>
            <remarks>CaseSensitiveCollation is also used for in-memory sorts. If set to true, sorts in-memory will be case insensitive, otherwise 
            sorts will be case sensitive. The default for in-memory sorts is the same as for sorts on the db: false.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.EmitAliasForExpressionAggregateField">
            <summary>
            Gets or sets a value indicating whether the alias of the field should be emitted if it has an expression/aggregate or the full field / expression.
            Default is true. Set to false if the field in this sortclause isn't used in the projection and it has an expression/aggregate assigned to it.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression">
            <summary>
            Implementation of the ISortExpression interface. This class contains the 
            sort clauses used in IRetrievalQuery instances.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            CTor which initially adds the passed in sort clause. This is an accelerator constructor to 
            make code more compact.
            </summary>
            <param name="sortClauseToAdd">Sort clause to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Adds the passed in sort clause to the list. 
            </summary>
            <param name="sortClauseToAdd">the sort clause to add</param>
            <returns>The index the sort clause was added to</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Inserts the passed in sort clause at the index provided.
            </summary>
            <param name="index">Index to insert the sortclause at</param>
            <param name="sortClauseToAdd">the sort clause to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Removes the given sort clause from the list.
            </summary>
            <param name="sortClauseToRemove">the sort clause to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.ToQueryText">
            <summary>
            Retrieves a ready to use text representation for the sort clauses contained in this expression.
            </summary>
            <returns>
            string which is usable as the argument for the ORDER BY clause in a query
            </returns>
            <remarks>uses aliases for fields which have an expression and/or aggregate applied.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.ToQueryText(System.Boolean)">
            <summary>
            Retrieves a ready to use text representation for the sort clauses contained in this expression.
            </summary>
            <param name="aliasesForExpressionsAggregates">If set to false (default is true), the full field name with expression / aggregate is placed in
            the result string instead of the alias of the field. If set to true, aliases are used for fields with an expression and/or aggregate applied.</param>
            <returns>
            string which is usable as the argument for the ORDER BY clause in a query
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Item(System.Int32)">
            <summary>
            Indexer for this list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Parameters">
            <summary>
            The list of parameters created when the sortexpression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper">
            <summary>
            Container class for the static traceswitch objects used by the tracing logic in the ORMSupportclasses.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.GeneralSwitch">
            <summary>
            General switch which is used by general code in the ORM Support classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.StateManagementSwitch">
            <summary>
            Switch which is used by state management code in the ORM Support classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.PersistenceExecutionSwitch">
            <summary>
            Switch which is used by entity / other data persistence logic execution code in the ORM Support classes
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.Object)">
            <summary>
            Writes the value with no category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.String)">
            <summary>
            Writes the message with no category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.Object,System.String)">
            <summary>
            Writes the value with the remark of the category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
            <param name="category">Category to specify with the value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.String,System.String)">
            <summary>
            Writes the message with the remark of the category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
            <param name="category">Category to specify with the message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.Object)">
            <summary>
            Writes the value with no category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.String)">
            <summary>
            Writes the message with no category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.Object,System.String)">
            <summary>
            Writes the value with the remark of the category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
            <param name="category">Category to specify with the value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.String,System.String)">
            <summary>
            Writes the message with the remark of the category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
            <param name="category">Category to specify with the message</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase">
            <summary>
            Abstract transaction class which is used to control a serie of actions on multiple entities or entity collection classes.
            The database connection is opened in the constructor, so the transaction instance is ready to use.
            This class is the non-COM+ version, it will always start a new ADO.NET transaction and will not be using a COM+ 
            transaction when callers are participating in such a transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.#ctor(System.Data.IsolationLevel,System.String)">
            <summary>
            CTor. Will read the connection string from an external source.
            </summary>
            <param name="transactionIsolationLevel">IsolationLevel to use in the transaction</param>
            <param name="name">The name of the transaction to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.#ctor(System.Data.IsolationLevel,System.String,System.String)">
            <summary>
            CTor. 
            </summary>
            <param name="transactionIsolationLevel">IsolationLevel to use in the transaction</param>
            <param name="name">The name of the transaction to use.</param>
            <param name="connectionString">Connection string to use in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetCommit() to commit the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Add(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the passed in object as a participant of this transaction. 
            </summary>
            <param name="participant">The ITransactionalElement implementing object which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the passed in object from the transaction.
            </summary>
            <param name="participant">The ITransactionalElement implementing object which should be removed from this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetAbort() to abort (rollback) the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Dispose">
            <summary>
            Implements the IDispose' method Dispose.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Save(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is already a savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling Save(savePointName)
            </summary>
            <param name="savePointName">name of the savepoint to roll back to.</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is no savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <remarks>Not supported when using COM+</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.AddAuditor(SD.LLBLGen.Pro.ORMSupportClasses.IAuditor)">
            <summary>
            Adds the auditor passed in to the set of auditors to get audit entities from at commit. 
            </summary>
            <param name="toAdd">To add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.NotifyAuditorsForCommit">
            <summary>
            Notifies the auditors that the transaction was committed. This means they should clean up any audit entities they contain.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.RemoveElementsFromTransaction(SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove)">
            <summary>
            Removes all participating elements from this transaction and sends them a commit or rollback signal, based on the passed in boolean Commit.
            This action will make the participating objects to take care of their own connections again.
            </summary>
            <param name="action">Action to perform on each removed element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.GatherAndFlushAuditData">
            <summary>
            Gathers the audit entities to save and then saves them in 1 go.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Reset">
            <summary>
            Resets the transaction object. All participants will be notified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.CreateConnection">
            <summary>
            Creates a new DbConnection instance which will be used by all elements using this ITransaction instance. 
            Reads connectionstring from .config file.
            </summary>
            <returns>new DbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.CreateConnection(System.String)">
            <summary>
            Creates a new DbConnection instance which will be used by all elements using this ITransaction instance
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns>new DbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.CreatePhysicalTransaction">
            <summary>
            Creates a new physical transaction object over the created connection. The connection is assumed to be open.
            </summary>
            <returns>a physical transaction object, like an instance of SqlTransaction.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionNotification#NotifyCommit">
            <summary>
            Will notify all transaction participating entities that the transaction they're in, has been committed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.SD#LLBLGen#Pro#ORMSupportClasses#ITransactionNotification#NotifyRollback">
            <summary>
            Will notify all transaction participating entities that the transaction they're in, has been rolled back.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.TransactionIsolationLevel">
            <summary>
            Gets the isolation level the transaction should use. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Name">
            <summary>
            Gets the name of the transaction. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ConnectionString">
            <summary>
            Gets the connection string used for the connection with the database. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ConnectionToUse">
            <summary>
            The connection object to use with this transaction. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.PhysicalTransaction">
            <summary>
            The physical transaction object used over <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ConnectionToUse"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.EntitiesInTransaction">
            <summary>
            List of GUID's of the entities currently participating in this transaction. This collection is
            used to keep track of which entities already have been added during a recursive save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.InSystemTransaction">
            <summary>
            Gets a value indicating whether a System.Transactions transaction is going on. If not, false is returned.
            </summary>
            <value><c>true</c> if [in system transaction]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove">
            <summary>
            Enum which is used to signal the element removal routine what to do while removing hte elements.
            This is a performance issue, now the loop has to be run just once
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove.SendCommit">
            <summary>
            Call ITransactionalElement.TransactionCommit()
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove.SendRollback">
            <summary>
            Call ITransactionalElement.TransactionRollback()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase">
            <summary>
            Abstract transaction class which is used to control a serie of actions on multiple entities or entity collection classes.
            The database connection is opened in the constructor so the COM+ transaction is flowing into the creation of the database connection.
            No ADO.NET transaction is started, everything runs in the containing COM+ transaction.
            This class is the COM+ version, it will never start a new ADO.NET transaction and will always be using a COM+ 
            transaction. All actions MUST be explicitly be commited or rolled back (aborted), there is no autocomplete implemented in this
            class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.#ctor">
            <summary>
            CTor. Will read the connection string from an external source.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.#ctor(System.String)">
            <summary>
            CTor. 
            </summary>
            <param name="connectionString">Connection string to use in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetComplete() to commit the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Add(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the passed in object as a participant of this transaction. 
            </summary>
            <param name="participant">The ITransactionalElement implementing object which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the passed in object from the transaction.
            </summary>
            <param name="participant">The ITransactionalElement implementing object which should be removed from this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetAbort() to abort (rollback) the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.SaveInRecursionStarted">
            <summary>
            Increases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.SaveInRecursionEnded">
            <summary>
            Decreases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Save(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <remarks>Not supported in COM+. Throws NotSupportedException.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling Save(savePointName)
            </summary>
            <param name="savePointName">name of the savepoint to roll back to.</param>
            <remarks>Not supported in COM+. Throws NotSupportedException.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.RemoveElementsFromTransaction(SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove)">
            <summary>
            Removes all participating elements from this transaction and sends them a commit or rollback signal, based on the passed in boolean Commit.
            This action will make the participating objects to take care of their own connections again.
            </summary>
            <param name="action">Action to perform on each removed element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Reset">
            <summary>
            Resets the transaction object. All participants will be notified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.CreateConnection">
            <summary>
            Creates a new DbConnection instance which will be used by all elements using this ITransaction instance. 
            Reads connectionstring from .config file.
            </summary>
            <returns>new DbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.CreateConnection(System.String)">
            <summary>
            Creates a new DbConnection instance which will be used by all elements using this ITransaction instance
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns>new DbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.CreatePhysicalTransaction">
            <summary>
            Creates a new physical transaction object over the created connection. The connection is assumed to be open.
            </summary>
            <returns>a physical transaction object, like an instance of SqlTransaction.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.TransactionIsolationLevel">
            <summary>
            Gets the isolation level the transaction should use. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Name">
            <summary>
            Gets the name of the transaction. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ConnectionString">
            <summary>
            Gets the connection string used for the connection with the database. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ConnectionToUse">
            <summary>
            The connection object to use with this transaction. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.PhysicalTransaction">
            <summary>
            The physical transaction object used over <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ConnectionToUse"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.EntitiesInTransaction">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction. This collection is
            used to keep track of which entities already have been added during a recursive save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ParticipantsInProgress">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction which are in progress, i.e. their
            Save() routine has been called but execution is transfered to a dependent object first.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove">
            <summary>
            Enum which is used to signal the element removal routine what to do while removing the elements.
            This is a performance issue, now the loop has to be run just once
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove.SendCommit">
            <summary>
            Call ITransactionalElement.TransactionCommit()
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove.SendRollback">
            <summary>
            Call ITransactionalElement.TransactionRollback()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager">
            <summary>
            Resource manager which is used with System.Transactions transactions: the transaction object manager (DataAccessAdapter or Transaction) will 
            enlist itself using an instance of this class with the ambient System.Transactions transaction so when that transaction is completed, the
            end result is propagated to the participating entities. This enlistment is automatic and transparent for the developer.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionNotification)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager"/> class.
            </summary>
            <param name="transactionManager">The LLBLGen Pro transaction manager object</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager.Commit(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being committed.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"></see> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager.InDoubt(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that the status of a transaction is in doubt.
            </summary>
            <param name="enlistment">An <see cref="T:System.Transactions.Enlistment"></see> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager.Prepare(System.Transactions.PreparingEnlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being prepared for commitment.
            </summary>
            <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment"></see> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager.Rollback(System.Transactions.Enlistment)">
            <summary>
            Notifies an enlisted object that a transaction is being rolled back (aborted).
            </summary>
            <param name="enlistment">A <see cref="T:System.Transactions.Enlistment"></see> object used to send a response to the transaction manager.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionResourceManager.SetTransactionOutcomeVote(System.Boolean)">
            <summary>
            Sets the transaction outcome vote. This method is called from the transaction management object if Commit or Rollback is called on that object.
            </summary>
            <param name="performCommit">If false, the resource manager will vote for a rollback, otherwise for a commit. </param>
            <remarks>Once the vote has been set to a rollback, it will always report a rollback</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1">
            <summary>
            Base class for typedlist classes in SelfServicing. 
            </summary>
            <remarks>SelfServicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.#ctor">
            <summary>
            Initializes a new instance of the TypedListBase class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param TypedListCore="tableName">name for the datatable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query. Will use no sort filter, no select filter, 
            will allow duplicate rows and will not limit the amount of rows returned</summary>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query. Will not use a filter, will allow duplicate rows.</summary>
            <param name="maxNumberOfItemsToReturn">The maximum number of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query. Will not use a filter.</summary>
            <param name="maxNumberOfItemsToReturn">The maximum number of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter</summary>
            <param name="maxNumberOfItemsToReturn">The maximum number of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter</summary>
            <param name="maxNumberOfItemsToReturn">The maximum number of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter</summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter</summary>
            <param name="maxNumberOfItemsToReturn">The maximum number of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetDbCount">
            <summary>Gets the number of rows in the database for this typed list, not skipping duplicates</summary>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetDbCount(System.Boolean)">
            <summary>Gets the number of rows in the database for this typed list.</summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>Gets the number of rows in the database for this typed list.</summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>Gets the number of rows in the database for this typed list.</summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="relations">The relations for the filter to apply</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection)">
            <summary>Gets the number of rows in the database for this typed list.</summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="relations">The relations for the filter to apply</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Select">
            <summary>Gets an array of all row objects of type T.</summary>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Select(System.String)">
            <summary>Gets an array of all row objects of type T that match the filter criteria in order of primary key (or lacking one, order of addition.) </summary>
            <param name="filterExpression">The criteria to use to filter the rows.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Select(System.String,System.String)">
            <summary>Gets an array of all row objects of type T that match the filter criteria, in the specified sort order</summary>
            <param name="filterExpression">The filter expression.</param>
            <param name="sort">A string specifying the column and sort direction.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Select(System.String,System.String,System.Data.DataViewRowState)">
            <summary>Gets an array of all row objects of type T that match the filter criteria, in the specified sort order that match the specified state</summary>
            <param name="filterExpression">The filter expression.</param>
            <param name="sort">A string specifying the column and sort direction.</param>
            <param name="recordStates">One of the <see cref="T:System.Data.DataViewRowState"/> values.</param>
            <returns>Array with row objects of type T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetRowType">
            <summary>Return the type of the typed datarow</summary>
            <returns>returns the requested type</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.OnResultsetBuilt(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Method which is called at the end of the generated BuildResultset method and which can be used to add additional fields to the fields 
            object for the typed list, or to manipulate the field objects added to the typed list.
            </summary>
            <param name="fields">The fields.</param>
            <remarks>Be sure to call fields.Expand(n) first, where n is the number of fields you want to add.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.CreateDAOInstance">
            <summary>Creates a new TypedList dao instance</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.BuildRelationSet">
            <summary>Builds the relation set for this typed list.</summary>
            <returns>ready to use relation set</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.BuildResultset">
            <summary>Builds the resultset fields.</summary>
            <returns>ready to use resultset</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ITypedListLgp#BuildRelationSet">
            <summary>Builds the relation set for this typed list.</summary>
            <returns>ready to use relation set</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.SD#LLBLGen#Pro#ORMSupportClasses#ITypedListLgp#BuildResultset">
            <summary>Builds the resultset fields.</summary>
            <returns>ready to use resultset</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Count">
            <summary>Returns the amount of rows in this typed list.</summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase`1.Item(System.Int32)">
            <summary>Indexer of this strong typed list</summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList`1">
            <summary>
            Placeholder type for UniqueList. This type is kept as it's a public type and removing it in favor of UniqueList will break code. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList`1.#ctor">
            <summary>
            Creates a new UniqueValueList instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new UniqueValueList instance.
            </summary>
            <param name="c">Collection of objects to add to this collection. It will use the </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds the range specified
            </summary>
            <param name="c">Collection with new objects to add</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork">
            <summary>
            UnitOfWork class. Can collect actions to perform on the entities/entity collections specified. 
            Will not perform these actions until Commit(transaction) is called. A UnitOfWork is meant to make development easier.
            It will not prohibit the developer to persist the actions also using other methods. 
            Selfservicing Specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork"/> class.
            </summary>
            <param name="commitOrder">The commit order of the various blocks in the unit of work object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CTor for deserialization
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetEntityElementsToInsert">
            <summary>
            Gets the UnitOfWorkElements with the entities which are added with AddForSave and which are new. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>
            </summary>
            <returns>new List with all UnitOfWorkElements with the entities which are added using AddForSave and which are new</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetEntityElementsToUpdate">
            <summary>
            Gets the UnitOfWorkElements with the entities which are added with AddForSave and which are not new . 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>
            </summary>
            <returns>new List with all UnitOfWorkElements with the entities which are added using AddForSave and which are not new</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetInsertQueue">
            <summary>
            Gets the insert queue, which is a list of ActionQueueElements(of IEntity) which have been placed in the insert queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> has been called, or Commit has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> under the hood. If this method is called after Commit, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/>
            or Commit will.
            </summary>
            <returns>List of ActionQueueElement(of IEntity) elements with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetUpdateQueue">
            <summary>
            Gets the update queue, which is a list of ActionQueueElements(of IEntity) which have been placed in the update queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> has been called, or Commit has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> under the hood. If this method is called after Commit, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/>
            or Commit will.
            </summary>
            <returns>List of ActionQueueElement(of IEntity) elements with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetEntityElementsToDelete">
            <summary>
            Gets the UnitOfWorkElements with the entities which are added with AddForDelete, in a new list. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>
            </summary>
            <returns>new list with all UnitOfWorkElements with the entities which are added using AddForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetCollectionElementsToSave">
            <summary>
            Gets the UnitOfWorkCollectionElement objects with the collections which are added with AddCollectionForSave, in a new List
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)"/>
            </summary>
            <returns>new UnitOfWorkCollectionElementCollection with all UnitOfWorkCollectionElements with the entities which are added using AddCollectionForSave</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetCollectionElementsToDelete">
            <summary>
            Gets the UnitOfWorkCollectionElements with the collections which are added with AddCollectionForDelete, in a new List. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)"/>
            </summary>
            <returns>new List with all UnitOfWorkCollectionElements with the entities which are added using AddCollectionForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds the passed in entity for saving. No recursion will be applied during the save of this entity when the unit of work is committed.
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds the passed in entity for saving. No recursion will be applied during the save of this entity when the unit of work is committed.
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Removes the specified entity from this UnitOfWork. If the entity is in an added collection, the entity will later on still be added. 
            </summary>
            <param name="entityToRemove">Entity to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Removes the specified entity collection from this UnitOfWork. 
            </summary>
            <param name="collectionToRemove">Entity collection to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds the passed in entity for deletion. 
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds the passed in entity for deletion.
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <param name="restriction">Filter to apply during delete. This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToDelete (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Adds the passed in object for delete. This is the actual routine performing the work.
            </summary>
            <param name="entityToDelete">Entity to delete.</param>
            <param name="restriction">Restriction.</param>
            <param name="append">If true (default), append the entity at the end of the list, otherwise insert it at the front. False in the case
            of inserting objects from collections marked for deletion.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the collection with entities for deletion. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToDelete">collection with entities to be added for deletion</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="parameters">Parameters to pass to the delegate.</param>
            <remarks>will pass in the used Transaction as the last parameter to the delegate.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Boolean,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="passInTransaction">Flag to tell the Commit routine to pass the used Transaction object as the last parameter to the delegate (true, default)
            or not (false).</param>
            <param name="parameters">Parameters to pass to the delegate. If you've specified true for passInTransaction,
            the Transaction object used during commit will be passed in as the last parameter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Reset">
            <summary>
            Resets the inner contents of this unit of work. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddDeleteMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds a call to collection.DeleteMulti(filter) to delete entities directly from the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            deleted but before the PostEntityDelete callbacks.
            </summary>
            <param name="collection">Collection object to call DeleteMulti on.</param>
            <param name="filter">Filter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddDeleteMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds a call to collection.DeleteMulti(filter, relations) to delete entities directly from the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            deleted but before the PostEntityDelete callbacks.
            </summary>
            <param name="collection">Collection object to call DeleteMulti on.</param>
            <param name="filter">Filter to use.</param>
            <param name="relations">RelationCollection to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddUpdateMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds a call to collection.UpdateMulti(Entity, filter) to update entities directly in the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            updated but before the PreEntityUpdate callbacks.
            </summary>
            <param name="collection">Collection object to call UpdateMulti on.</param>
            <param name="entityWithNewValues">instance which holds the new values for the matching entities to update. Only changed fields are taken into account </param>
            <param name="filter">Filter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddUpdateMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds a call to collection.UpdateMulti(Entity, filter, relations) to update entities directly in the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            updated but before the PreEntityUpdate callbacks.
            </summary>
            <param name="collection">Collection object to call UpdateMulti on.</param>
            <param name="entityWithNewValues">instance which holds the new values for the matching entities to update. Only changed fields are taken into account </param>
            <param name="filter">Filter to use.</param>
            <param name="relations">RelationCollection to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="transactionToUse">Transaction to use. All entities to process will be added to this transaction, unless they're already part
            of another transaction.</param>
            <remarks>It will not commit nor rollback the transaction.</remarks>
            <exception cref="T:System.ArgumentNullException">when transactionToUse is null</exception>
            <returns>The total # of entities affected by all actions performed in the Commit method</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Boolean)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="transactionToUse">Transaction to use. All entities to process will be added to this transaction, unless they're already part
            of another transaction.</param>
            <param name="autoCommit">if true, it will commit/rollback the transaction passed in using the following rules:
            - if no exception is thrown: commit
            - if an exception is thrown: rollback</param>
            <exception cref="T:System.ArgumentNullException">when transactionToUse is null</exception>
            <returns>The total # of entities affected by all actions performed in the Commit method</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues">
            <summary>
            Constructs the save process queues for insert and update actions. These queues are constructed from the entities added to this UoW 
            for save either individually or in a collection. Call this method to determine what the sequence will be for the insert and update
            actions executed during Commit(). Commit() uses this method as well as well as the serialization/deserialization logic, to avoid
            sending large object graphs with few changes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructParameters(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Boolean)">
            <summary>
            Constructs the parameters to pass
            </summary>
            <param name="parameters">Parameters.</param>
            <param name="transactionToUse">Transaction to use.</param>
            <param name="passInTransaction">Pass in transaction.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.InitClass(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType})">
            <summary>
            Inits the class.
            </summary>
            <param name="commitOrder">The commit order.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.OptimizedSerialization">
            <summary>
            Gets / sets the OptimizedSerialization flag. Default: true. When set to false, the serialization logic will simply serialize all entities inside the
            unit of work. When set to true, the unit of work will first calculate the save queues, which weeds out entities which aren't changed and won't be
            saved anyway, so these don't have to be sent over the wire. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.CommitOrder">
            <summary>
            Gets / sets the Commit Order of the various blocks the unit of work groups the elements in.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2">
            <summary>
            UnitOfWork2 class. Can collect actions to perform on the entities/entity collections specified. 
            Will not perform these actions until Commit(transaction) is called. A UnitOfWork is meant to make development easier.
            It will not prohibit the developer to persist the actions also using other methods. 
            Adapter Specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType})">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2"/> class.
            </summary>
            <param name="commitOrder">The commit order of the various blocks in the unit of work object.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CTor for deserialization
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetEntityElementsToInsert">
            <summary>
            Gets the UnitOfWorkElement2s with the entities which are added with AddForSave and which are new, in a new List. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>
            </summary>
            <returns>new List with all UnitOfWorkElement2s with the entities which are added using AddForSave and which are new</returns>
            <remarks>Use this method to peek into the list of elements added to the UnitOfWork. Don't use this method to retrieve the exact list of
            entities which have been inserted/will be inserted by the UnitOfWork, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetUpdateQueue"/> instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetEntityElementsToUpdate">
            <summary>
            Gets the UnitOfWorkElement2s with the entities which are added with AddForSave and which are not new, in a new List. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>
            </summary>
            <returns>new List with all UnitOfWorkElement2s with the entities which are added using AddForSave and which are not new</returns>
            <remarks>Use this method to peek into the list of elements added to the UnitOfWork. Don't use this method to retrieve the exact list of
            entities which have been updated/will be updated by the UnitOfWork, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetUpdateQueue"/> instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetInsertQueue">
            <summary>
            Gets the insert queue, which is a list of ActionQueueElement(of IEntity2) objects which have been placed in the insert queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> has been called, or Commit has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> under the hood. If this method is called after Commit, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/>
            or Commit will.
            </summary>
            <returns>List with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetUpdateQueue">
            <summary>
            Gets the update queue, which is a List of ActionQueueElements(Of IEntity2) objects which have been placed in the update queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> has been called, or Commit has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> under the hood. If this method is called after Commit, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/>
            or Commit will.
            </summary>
            <returns>Readonly arraylist with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetEntityElementsToDelete">
            <summary>
            Gets the UnitOfWorkElement2s with the entities which are added with AddForDelete, in a new List. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>
            </summary>
            <returns>new List with all UnitOfWorkElement2s with the entities which are added using AddForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetCollectionElementsToSave">
            <summary>
            Gets the UnitOfWorkCollectionElement2s with the collections which are added with AddCollectionForSave, in a new List. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)"/>
            </summary>
            <returns>new List with all UnitOfWorkCollectionElement2s with the entities which are added using AddCollectionForSave</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetCollectionElementsToDelete">
            <summary>
            Gets the UnitOfWorkCollectionElement2s with the collections which are added with AddCollectionForDelete, in a new List. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)"/>
            </summary>
            <returns>new List with all UnitOfWorkCollectionElement2s with the entities which are added using AddCollectionForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the passed in entity for saving. No refetching will be applied.
            </summary>
            <param name="entityToSave">The entity2 to save via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the passed in entity for saving. No refetching will be applied.
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action. </param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Removes the specified entity from this UnitOfWork. If the entity is in an added collection, the entity will later on still be added. 
            </summary>
            <param name="entityToRemove">Entity to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Removes the specified entity collection from this UnitOfWork. 
            </summary>
            <param name="collectionToRemove">Entity collection to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct. No recursion and no refetch are done for these entities.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
            <param name="refetch">When true, it will refetch all entities saved after the save action.</param>
            <param name="recurse">When true, the entities in the collection will be saved recursively.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the passed in entity for deletion. 
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the passed in entity for deletion.
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <param name="restriction">Filter to apply during delete. This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToDelete (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Adds the passed in object for delete. This is the actual routine performing the work.
            </summary>
            <param name="entityToDelete">Entity to delete.</param>
            <param name="restriction">Restriction.</param>
            <param name="append">If true (default), append the entity at the end of the list, otherwise insert it at the front. False in the case
            of inserting objects from collections marked for deletion.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the collection with entities for deletion. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToDelete">collection with entities to be added for deletion</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="parameters">Parameters to pass to the delegate.</param>
            <remarks>will pass in the used adapter as the last parameter to the delegate.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Boolean,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="passInAdapter">Flag to tell the Commit routine to pass the used adapter object as the last parameter to the delegate (true, default)
            or not (false).</param>
            <param name="parameters">Parameters to pass to the delegate. If you've specified true for passInAdapter,
            the adapter object used during commit will be passed in as the last parameter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Reset">
            <summary>
            Resets the inner contents of this unit of work. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddDeleteEntitiesDirectlyCall(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Adds a DeleteEntitiesDirectly call to be scheduled during Commit. It is called right after the last entity has been deleted but before the post delete
            callbacks are called.
            </summary>
            <param name="entityName">The name of the entity to retrieve persistence information. For example "CustomerEntity". This name can be retrieved from an existing entity's LLBLGenProEntityName property.</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <remarks>the method is called on the adapter passed in to Commit.
            <br/>
            This overload doesn't use the DataAccessAdapter.DeleteEntitiesDirectly overload which performs authorization and auditing as well. 
            If you need authorization and/or auditing, please use the overload of AddDeleteEntitiesDirectlyCall which accepts a type.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddDeleteEntitiesDirectlyCall(System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Adds a DeleteEntitiesDirectly call to be scheduled during Commit. It is called right after the last entity has been deleted but before the post delete
            callbacks are called.
            </summary>
            <param name="typeOfEntity">The type of the entity to delete</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <remarks>the method is called on the adapter passed in to Commit.
            <br/>
            This overload uses the DataAccessAdapter.DeleteEntitiesDirectly overload which performs authorization as well. 
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddUpdateEntitiesDirectlyCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Adds an UpdateEntitiesDirectly call to be scheduled during Commit. It is called right after the last entity has been updated but before the pre delete
            callbacks are called.
            </summary>
            <param name="entityWithNewValues">Entity object which contains the new values for the entities of the same type and which match the filter in filterBucket. Only fields which are changed are updated.</param>
            <param name="filterBucket">filter information to filter out the entities to update. </param>
            <remarks>the method is called on the adapter passed in to Commit.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="adapterToUse">Adapter to use. It will start a new transaction if no transaction is in progress.</param>
            <remarks>If no transaction is in progress on the passed in adapter, this unit of work object will autocommit the transaction started by
            this unit of work object.</remarks>
            <exception cref="T:System.ArgumentNullException">when adapterToUse is null</exception>
            <returns>The total # of entities affected by all actions performed in the Commit method</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,System.Boolean)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="adapterToUse">Adapter to use. It will start a new transaction if no transaction is in progress.</param>
            <param name="autoCommit">if true, it will commit/rollback the transaction passed in using the following rules:
            - if no exception is thrown: commit
            - if an exception is thrown: rollback</param>
            <exception cref="T:System.ArgumentNullException">when adapterToUse is null</exception>
            <returns>The total # of entities affected by all actions performed in the Commit method</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues">
            <summary>
            Constructs the save process queues for insert and update actions. These queues are constructed from the entities added to this UoW 
            for save either individually or in a collection. Call this method to determine what the sequence will be for the insert and update
            actions executed during Commit(). Commit() uses this method as well as well as the serialization/deserialization logic, to avoid
            sending large object graphs with few changes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.InitClass(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkBlockType})">
            <summary>
            Inits the class.
            </summary>
            <param name="commitOrder">The commit order.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructParameters(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,System.Boolean)">
            <summary>
            Constructs the parameters to pass
            </summary>
            <param name="parameters">Parameters.</param>
            <param name="adapterToUse"></param>
            <param name="passInAdapter">Pass in adapter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetSerializationFlags">
            <summary>
            Gets the serialization flags.
            </summary>
            <returns>Bitvector with flags which control what's serialized.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.EntitiesToSave">
            <summary>
            Gets the list of UnitOfWorkElement2 objects for the entities to save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.EntitiesToDelete">
            <summary>
            Gets the list of UnitOfWorkElement2 objects for the entities to delete.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.CollectionsToSave">
            <summary>
            Gets the list of UnitOfWorkCollectionElement2 objects for the entities to save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.CollectionsToDelete">
            <summary>
            Gets the list of UnitOfWorkCollectionElement2 objects for the entities to delete.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.OptimizedSerialization">
            <summary>
            Gets / sets the OptimizedSerialization flag. Default: true. When set to false, the serialization logic will simply serialize all entities inside the
            unit of work. When set to true, the unit of work will first calculate the save queues, which weeds out entities which aren't changed and won't be
            saved anyway, so these don't have to be sent over the wire. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.CommitOrder">
            <summary>
            Gets / sets the Commit Order of the various blocks the unit of work groups the elements in.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils">
            <summary>
            General container class for static utility methods which have no better grouping class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.CreateTypedDataTableColumn(System.String,System.String,System.Type,System.Data.DataColumnCollection)">
            <summary>
            Creates a typed data table column. Used in typed lists and typed views. Adds the column to the columns collection specified.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="caption">The caption.</param>
            <param name="columnType">Type of the column.</param>
            <param name="columns">The columns.</param>
            <returns>ready to use column definition.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.CreateUsableBucketClone(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Creates the usable bucket clone.
            </summary>
            <param name="toClone">To clone.</param>
            <returns>a clone of the bucket passed in or a new RelationPredicateBucket if toClone is null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.CreateUsablePredicateExpressionClone(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates the usable predicate expression clone.
            </summary>
            <param name="toClone">To clone.</param>
            <returns>toClone wrapped in a new predicatexpression or an empty PredicateExpression if toClone is null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.CreateUsableRelationCollectionClone(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a usable relation collection clone.
            </summary>
            <param name="toClone">To clone.</param>
            <returns>A clone of toClone or a new RelationCollection if toClone is null</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.CheckIfInputIsValid``1(System.Object,System.String,System.Boolean)">
            <summary>
            Checks if the input is valid.
            </summary>
            <param name="input">The input.</param>
            <param name="paramName">Name of the param which was the input.</param>
            <param name="canBeNull">if true, input can be null</param>
            <returns>input casted to T</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.ProduceEmptyDataSet(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathCore,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Produces an empty DataSet, with for every element specified in the specified prefetch path a DataTable. It adds PK constraints and
            DataRelations to each datatable added. The datatables have the name of the entity: per entity type found there's 1 table.
            </summary>
            <param name="path">The path.</param>
            <param name="elementCreator">The element creator.</param>
            <returns>Ready to use, empty dataset with for every type in the prefetch path an empty datatable with all the columns specified</returns>
            <remarks>Use the returned DataSet for hierarchical projections</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.ProduceEmptyDataSet(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore,System.Data.DataSet,System.Collections.Generic.Dictionary{System.Int32,System.Data.DataTable},System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation})">
            <summary>
            Produces the empty data set for the element specified.
            </summary>
            <param name="pathElement">The path element.</param>
            <param name="elementCreator">The element creator.</param>
            <param name="dataSetInProgress">The data set in progress.</param>
            <param name="dataTablesCreated">The data tables created.</param>
            <param name="relations">The relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.ProduceEmptyDataTable(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Produces an empty data table for the entity type specified
            </summary>
            <param name="entityTypeOfEntity">The entity type of entity.</param>
            <param name="elementCreator">The element creator.</param>
            <returns>
            empty datatable with all the columns added and with PK constraints
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.ProduceEmptyDataTable(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,SD.LLBLGen.Pro.ORMSupportClasses.IElementCreatorCore)">
            <summary>
            Produces an empty data table for the entity type with the factory specified
            </summary>
            <param name="factory">The factory.</param>
            <param name="elementCreator">The element creator.</param>
            <returns>empty datatable with all the columns added and with PK constraints</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.CreateDataRelations(System.Data.DataSet,System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation})">
            <summary>
            Creates the data relations in the dataset passed in for the relations passed in. Only create relations where the start entity is the FK side.
            </summary>
            <param name="destination">The destination to create the datarelations in.</param>
            <param name="relations">The relations to use for creating the datarelations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.ConvertValueToRealNullIfRequired(System.Object,System.Type)">
            <summary>
            Converts the value passed in to null/Nothing (reference type) or default value (value type) if the value is DbNull.Value, based on the type passed 
            in, also if that type is a nullable type.
            </summary>
            <param name="rawValue">The raw value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>rawValue if rawValue isn't null/DBNull.Value, otherwise null, if destinationType is reference type, otherwise the default for the 
            value type</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.DetermineDefaultNullValueForType(System.Type)">
            <summary>
            Determines the type of the default null value for.
            </summary>
            <param name="typeForValue">The type for value.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.IsNullableType(System.Type)">
            <summary>
            Determines whether type passed in is a Nullable(Of T) type.
            </summary>
            <param name="toCheck">To check.</param>
            <returns>
            	true if the type passed in is a Nullable(Of T) type, otherwise false.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GeneralUtils.ConstructRestrictionFilterForUnitOfWorkElement(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Constructs the restriction filter for the element passed in
            </summary>
            <param name="restrictionFilter">The restriction filter.</param>
            <param name="entity">The entity.</param>
            <param name="concurrencyType">Type of the concurrency.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement">
            <summary>
            unit of work callback element to store in the unit of work collections for callbacks. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.#ctor(System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement"/> instance.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="passInTransaction">When true, the routine assumes that the last parameter specified is the placeholder for the transaction to use (default). 
            When false, it won't pass in a transaction and will assume the callback has to run outside the current transaction scope</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.InitClass(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="parameters">Parameters.</param>
            <param name="passInTransaction"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.PassInTransaction">
            <summary>
            Gets / sets passInTransaction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.DelegateToCall">
            <summary>
            Gets / sets delegateToCall
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.Parameters">
            <summary>
            Gets / sets parameters
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2">
            <summary>
            unit of work callback element to store in the unit of work collections for callbacks. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.#ctor(System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement"/> instance.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="passInAdapter">When true, the routine will pass in the current adapter used in commit to the delegate as the last parameter 
            When false, it won't pass in an adapter and will assume the callback has to run outside the current adapter's transaction scope</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.InitClass(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="parameters">Parameters.</param>
            <param name="passInAdapter"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.PassInAdapter">
            <summary>
            Gets / sets passInAdapter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.DelegateToCall">
            <summary>
            Gets / sets delegateToCall
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.Parameters">
            <summary>
            Gets / sets parameters
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="recurse">recurse query. Ignored in Delete queries</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.Collection">
            <summary>
            Gets collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="refetch">When true, it will refetch all entities saved after the save action.</param>
            <param name="recurse">When true, the entities in the collection will be saved recursively.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="refetch"></param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.Collection">
            <summary>
            Gets collection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.Refetch">
            <summary>
            Gets / sets refetch
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement">
            <summary>
            unit of work element to store in the DeleteEntitiesDirectly calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Type)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="typeOfEntity">The type of entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.String,System.Type)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="typeOfEntity">The type of entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.SelectOverLoad">
            <summary>
            Selects the over load to use
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.TypeOfEntity">
            <summary>
            Gets / sets typeOfEntity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.UseNameOverload">
            <summary>
            Gets a value indicating whether [use name overload].
            </summary>
            <value><c>true</c> if [use name overload]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.EntityName">
            <summary>
            Gets / sets entityName
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement">
            <summary>
            unit of work element to store in the delete multi calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.Relations">
            <summary>
            Gets / sets relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.Collection">
            <summary>
            Gets / sets collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="recurse">recurse query. Ignored in Delete queries</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.Restriction">
            <summary>
            Gets / sets restriction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="refetch"></param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Refetch">
            <summary>
            Gets / sets refetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Restriction">
            <summary>
            Gets / sets restriction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement">
            <summary>
            unit of work element to store in the UpdateEntitiesDirectly calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement">
            <summary>
            unit of work element to store in the update multi calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Relations">
            <summary>
            Gets / sets relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Collection">
            <summary>
            Gets / sets collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase">
            <summary>
            Abstract class definition for a validator object, used to validate entity data. This class is the common base class for
            all generated entitynameValidator classes in the generated code. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.ValidateFieldValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,System.Int32,System.Object)">
            <summary>
            Validates the given EntityFieldCore object on the given fieldIndex with the given value.
            This routine is called by the Entity's own value validator after the value has passed validation for destination column type and
            null values.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
            <param name="fieldIndex">Index of IEntityFieldCore to validate</param>
            <param name="value">Value which should be stored in field with index fieldIndex. Will not be null (earlier logic filters out nulls before
            a call will be made to this routine).</param>
            <returns>
            true if the value is valid for the field, false otherwise
            </returns>
            <remarks>Use the entity.SetEntityFieldError() and entity.SetEntityError() methods if you want to set a IDataErrorInfo error string after the
            validation.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.ValidateEntityAfterLoad(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containing entity after it is loaded. This method is called after the entity has been fully loaded.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.ValidateEntityBeforeSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containing entity right before the save sequence for the entity will start. LLBLGen Pro will call this method right after the
            containing entity is selected from the save queue to be saved.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.ValidateEntityAfterSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containing entity right after the entity's save action has been completed and the entity has been refetched (if applicable).
            Note for adapter users: if the entity wasn't set to be refetched, take into account that reading properties from the containing entity will result in an
            OutOfSync exception.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.ValidateEntityBeforeDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Method to validate the containig entity right beforethe entity's delete action will take place.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.ValidateEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            General validation method which isn't used by the LLBLGen Pro framework, but can be used by your own code to validate an entity at any given moment.
            </summary>
            <param name="involvedEntity">The involved entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.AssignedToEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the implementing object is assinged to entity.Validator.
            </summary>
            <param name="involvedEntity">entity the validator is assigned to</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ValidatorBase.UnassignedFromEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Called when the implementing object is dereferenced from an assigned entity.
            </summary>
            <param name="involvedEntity">the entity the validator is unassigned from</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1">
            <summary>
            Class which contains projection data for entity views, used in hierarchical projections of data. The data is applied to a view of all entities
            with the type specified as TEntity.
            </summary>
            <typeparam name="TEntity">The entity type this view projection is for.</typeparam>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector})">
            <summary>
            CTor. Uses no additional filter and allows duplicates.
            </summary>
            <param name="projectors">List of entity property projectors to project the view's data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="projectors">List of entity property projectors to project the view's data</param>
            <param name="filter">Additional filter to apply to the data before projection. Only matching entities are projected</param>
            <param name="allowDuplicates">Flag to signal if duplicate results are allowed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.#ctor(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.IEntityPropertyProjector},SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="projectors"></param>
            <param name="filter"></param>
            <param name="allowDuplicates"></param>
            <param name="typeOfTargetEntity">The real type of the target.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.Projectors">
            <summary>
            Gets / sets the list of entity property projectors to project the view's data
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.AllowDuplicates">
            <summary>
            Gets / sets allowDuplicates, a flag to signal if duplicate results are allowed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.TypeOfTargetEntity">
            <summary>
            Gets the type of the target entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ViewProjectionData`1.AdditionalFilter">
            <summary>
            Gets the additional filter to apply to the data before projection. Only matching entities are projected
            </summary>
            <value>The additional filter.</value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper">
            <summary>
            Generic XML helper class to work more efficient with an XmlDocument and XmlNodes. This class
            contains various utility methods to ease the (de)serialization process of the data to /from Xml
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.CultureNameForXmlValueConversion">
            <summary>
            Name for the culture to use when converting a value to a string for XML serialization and to use when converting a string back to an object when
            XML is deserialized. The name follows the standard names used for CultureInfo. Default: Invariant culture. See MSDN documentation on CultureInfo
            for more information about the specific culture name for the culture to use. For invariant culture, use empty string. 
            </summary>
            <remarks>You can also set this field by adding a key-value pair to the appSettings section of your application's config file. Use 
            'cultureNameForXmlValueConversion' as key and the name of the culture to use as the value, or empty string for the invariant culture.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.#cctor">
            <summary>
            Initializes the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper"/> class. Reads the Culturename for xml value conversion, if specified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddPropertyValueAsStringChildNode(System.Xml.XmlDocument,System.Boolean,System.Boolean,System.Object,System.Xml.XmlNode,System.Type)">
            <summary>
            Converts the value of the property passed in to a string and adds that string as a child node of type textnode to the childnode passed in.
            </summary>
            <param name="parentDocument">The parent document.</param>
            <param name="datesInXmlDataType">if set to <c>true</c> [dates in XML data type].</param>
            <param name="mlInCDataBlocks">if set to <c>true</c> [ml in C data blocks].</param>
            <param name="propertyValue">The property value.</param>
            <param name="childNode">The child node.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.PropertyValueToString(System.Boolean,System.Boolean,System.Object,System.Type,System.Boolean@)">
            <summary>
            Converts the value of the property passed in to a string
            </summary>
            <param name="datesInXmlDataType">xml aspect</param>
            <param name="mlInCDataBlocks">xml aspect</param>
            <param name="propertyValue">The property value.</param>
            <param name="propertyType">Type of the property.</param>
            <param name="valueInCDataBlock">flag which will be true if the returned string should be wrapped in a CData block</param>
            <returns>
            the property value in string form, ready to use in the XML
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.WriteValueAsStringToXml(System.Type,System.Object,System.Boolean,System.Boolean,System.Xml.XmlWriter,System.Boolean,System.Boolean)">
            <summary>
            Writes the value as string to XML.
            </summary>
            <param name="propertyType">Type of the property the value is read from.</param>
            <param name="value">The value read from the property.</param>
            <param name="verboseXml">flag if verbose XML has to be emitted</param>
            <param name="writeTypeInfoIfNull">true if the type info should be written into the element if the value is null</param>
            <param name="writer">The writer to write the output to.</param>
            <param name="datesInXmlDataType">xmlaspect</param>
            <param name="mlInCDataBlocks">xmlaspect</param>
            <remarks>The writer should have written a StartElement right before this method is called.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.GetXmlFormat(System.Xml.XmlReader)">
            <summary>
            Gets the XML format in XmlFormatAspect of the xml in the reader. The reader has to point to the root element. 
            </summary>
            <param name="reader">The reader.</param>
            <returns>format of xml.</returns>
            <remarks>Reader stays at the position it's on. Call Read() before calling this method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.SetReadReferences(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference},System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2})">
            <summary>
            Sets the references found during deserialization to the objects instantiated
            </summary>
            <param name="nodeEntityReferences">list of references</param>
            <param name="processedObjectIDs">list of processed objects to set references to</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.SetReadReferencesSS(System.Collections.Generic.List{SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference},System.Collections.Generic.Dictionary{System.Guid,SD.LLBLGen.Pro.ORMSupportClasses.IEntity})">
            <summary>
            Sets the references found during deserialization to the objects instantiated
            SelfServicing version
            </summary>
            <param name="nodeEntityReferences">list of references</param>
            <param name="processedObjectIDs">list of processed objects to set references to</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.CreateNewNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Adds a new XmlNode with the name nodeName to the document specified. Does not add the node to any
            parent node.
            </summary>
            <param name="parentDocument">document the new node will be added to</param>
            <param name="nodeName">name of node</param>
            <returns>New node created</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds a new XmlNode with the name nodeName and the value nodeValue to the node parentNode specified
            </summary>
            <param name="parentNode">the parent node the node will be added to as a childnode</param>
            <param name="nodeName">name of node</param>
            <param name="nodeValue">value of node</param>
            <returns>New node created</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddNode(System.Xml.XmlNode,System.String)">
            <summary>
            Adds a new XmlNode with the name nodeName to the node parentNode specified
            </summary>
            <param name="parentNode">the parent node the node will be added to as a childnode</param>
            <param name="nodeName">name of node</param>
            <returns>New node created</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Creates a new attribute with the name attributeName and the value attributeValue in the attributeCollection of the node parentNode, using
            the parentNode's owner document
            </summary>
            <param name="parentNode">the attribute's parent node</param>
            <param name="attributeName">the name for the new attribute</param>
            <param name="attributeValue">the value for the new attribute</param>
            <returns>the new attribute</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.XmlValueToObject(System.String,System.String)">
            <summary>
            Converts the passed in value to the type with the name typeName. The typeName has to be a known type in .NET, and
            currently can only be a simple type, or it has to implement an explicit conversion operator which converts a string to the real object. 
            The value is returned as 'object'. 
            </summary>
            <param name="typeName">name of the type the value should be converted in.</param>
            <param name="xmlValue">value of the xml node which should be converted into an object.</param>
            <returns>the value converted into its native type.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.XmlValueToObject(System.Type,System.String)">
            <summary>
            Converts the passed in value to the type specified. The realtype has to be a known type in .NET, and
            currently can only be a simple type, or it has to implement an explicit conversion operator which converts a string to the real object. 
            The value is returned as 'object'. 
            </summary>
            <param name="realType">The type the value should be converted in.</param>
            <param name="xmlValue">value of the xml node which should be converted into an object.</param>
            <returns>the value converted into its native type.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.CreateXmlNamespaceManagerInfo(System.Xml.XmlNode,System.Xml.XmlNamespaceManager@,System.String@)">
            <summary>
            Creates the XML namespace manager info.
            As .NET has some nice XML bugs, we have to specify a namespace manager and a fake prefix.
            </summary>
            <param name="node">The node.</param>
            <param name="nsmgr">The NSMGR.</param>
            <param name="nsprefix">The nsprefix.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddRelatedObjectTypeNode(System.Xml.XmlNode,SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper,System.Object,System.String)">
            <summary>
            Adds a new node representing a related object (e.g. validator, auditor.
            </summary>
            <param name="entityNode">The entity node.</param>
            <param name="nodeCreator">The node creator.</param>
            <param name="relatedObject">The related object.</param>
            <param name="nodeName">Name of the node.</param>
            <remarks>Selfservicing/noncompact25 specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.CreateRelatedObjectFromNode``1(System.Xml.XmlNode)">
            <summary>
            Creates a new related object from the info specified in the passed in node.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="currentNode">The current node.</param>
            <returns>null if type is unknown, or a new instance if specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.WriteRelatedObjectElement(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Writes for the related object passed in a new element to the Xml writer, if not null.
            </summary>
            <param name="writer">The writer.</param>
            <param name="relatedObject">The related object.</param>
            <param name="elementName">Name of the element.</param>
            <remarks>Adapter, verbose mode only.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddSavedFieldsNodes(System.Xml.XmlDocument,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper,System.Xml.XmlNode,SD.LLBLGen.Pro.ORMSupportClasses.FastDictionary{System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields})">
            <summary>
            Adds the saved fields nodes to the passed in root node for saved fields. 
            </summary>
            <param name="parentDocument">The parent document.</param>
            <param name="aspects">The aspects.</param>
            <param name="nodeCreator">The node creator.</param>
            <param name="savedFieldSetsNode">The saved field sets node.</param>
            <param name="savedFields">The saved fields.</param>
            <remarks>Selfservicing/noncompact25 specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.ResetFieldsForDeserialization(System.Collections.IList)">
            <summary>
            Resets the fields for deserialization. Resetting means that CurrentValue/DbValue/IsChanged/IsNull are reset to the default values.
            </summary>
            <param name="fields">The fields.</param>
        </member>
    </members>
</doc>
