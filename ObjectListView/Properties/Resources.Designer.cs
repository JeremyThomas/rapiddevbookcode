//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JesseJohnston.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JesseJohnston.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Verdana;}{\f1{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;\red0\green128\blue0;}\fswiss\fcharset0 Arial;}}.
        /// </summary>
        internal static string analysisColorFontHeader {
            get {
                return ResourceManager.GetString("analysisColorFontHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {\*\generator Msftedit 5.41.21.2506;}\viewkind4\uc1\pard\cf0\f0\fs20 If you&apos;re having trouble with ObjectListView, consider the following analysis of your list and list item types.  The list is the object that you provided in the ObjectListView constructor.  The list items are the objects contained in the list.\par\par.
        /// </summary>
        internal static string analysisHeaderText {
            get {
                return ResourceManager.GetString("analysisHeaderText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It does \cf1 not\cf0  support IEditableObject, which means that you cannot cancel changes made through a bound control such as the DataGridView.\par.
        /// </summary>
        internal static string analysisListItemNoIEditableObject {
            get {
                return ResourceManager.GetString("analysisListItemNoIEditableObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It does \cf1 not\cf0  support INotifyPropertyChanged, but \cf3 does\cf0  supply one or more property change events.  This means some or all changes to property values will be reflected in the view.\par.
        /// </summary>
        internal static string analysisListItemNoINotifyPropertyChanged {
            get {
                return ResourceManager.GetString("analysisListItemNoINotifyPropertyChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It does \cf1 not\cf0  support INotifyPropertyChanged or property change events, which means that changes to property values will not be refected in the view.\par.
        /// </summary>
        internal static string analysisListItemNoINotifyPropertyChangedNoPropertyChangedEvents {
            get {
                return ResourceManager.GetString("analysisListItemNoINotifyPropertyChangedNoPropertyChangedEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \cf3\b Your list item type \cf0\i {0}\cf3\i0  is optimal.\cf0\b0\par.
        /// </summary>
        internal static string analysisListItemOptimal {
            get {
                return ResourceManager.GetString("analysisListItemOptimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard\cf1\b\f0\fs20 Your list item type \cf0\i {0}\cf1\i0  is sub-optimal.\cf0\b0\par.
        /// </summary>
        internal static string analysisListItemSubOptimal {
            get {
                return ResourceManager.GetString("analysisListItemSubOptimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It \cf3 does\cf0  support IEditableObject, which allows you to cancel changes made through a bound control such as the DataGridView.\par .
        /// </summary>
        internal static string analysisListItemSupportsIEditableObject {
            get {
                return ResourceManager.GetString("analysisListItemSupportsIEditableObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It \cf3 does\cf0  support INotifyPropertyChanged, which means that changes to property values will be refected in the view.\par .
        /// </summary>
        internal static string analysisListItemSupportsINotifyPropertyChanged {
            get {
                return ResourceManager.GetString("analysisListItemSupportsINotifyPropertyChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard\par\cf2\b List modifications:\cf0\b0\par .
        /// </summary>
        internal static string analysisListModifications {
            get {
                return ResourceManager.GetString("analysisListModifications", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It does \cf1 not\cf0  support IRaiseItemChangedEvents, which means that list item changes reported as PropertyChanged events will not be reflected in the view.\par .
        /// </summary>
        internal static string analysisListNoIRaiseItemChangedEvents {
            get {
                return ResourceManager.GetString("analysisListNoIRaiseItemChangedEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It does \cf1 not\cf0  support the ListChanged event, which means that added and deleted items will not be reflected in the view.\par .
        /// </summary>
        internal static string analysisListNoListChanged {
            get {
                return ResourceManager.GetString("analysisListNoListChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list makes no claims to thread safety.\par .
        /// </summary>
        internal static string analysisListNotSynced {
            get {
                return ResourceManager.GetString("analysisListNotSynced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard\par\cf3\b Your list type \cf0\i {0}\cf3\i0  is optimal.\cf0\b0\par.
        /// </summary>
        internal static string analysisListOptimal {
            get {
                return ResourceManager.GetString("analysisListOptimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list is read-only, which means that you cannot add, change, or delete list items through the view or a bound control.\par .
        /// </summary>
        internal static string analysisListReadOnly {
            get {
                return ResourceManager.GetString("analysisListReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard\par\cf1\b Your list type \cf0\i {0}\cf1\i0  is sub-optimal.\cf0\b0\par.
        /// </summary>
        internal static string analysisListSubOptimal {
            get {
                return ResourceManager.GetString("analysisListSubOptimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It \cf3 does\cf0  support IRaiseItemChangedEvents, which means that list item changes reported as PropertyChanged events will be reflected in the view.\par.
        /// </summary>
        internal static string analysisListSupportsIRaiseItemChangedEvents {
            get {
                return ResourceManager.GetString("analysisListSupportsIRaiseItemChangedEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 It \cf3 does\cf0  support the ListChanged event, which means that added and deleted items will be reflected in the view.\par.
        /// </summary>
        internal static string analysisListSupportsListChanged {
            get {
                return ResourceManager.GetString("analysisListSupportsListChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list claims to be thread-safe, and offers a SyncRoot object for lock operations.\par .
        /// </summary>
        internal static string analysisListSynced {
            get {
                return ResourceManager.GetString("analysisListSynced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard\par\cf2\b List thread safety:\cf0\b0\par .
        /// </summary>
        internal static string analysisListThreadSafety {
            get {
                return ResourceManager.GetString("analysisListThreadSafety", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list is writable but is fixed in size, which means that you can change or replace list items through the view or a bound control, but cannot add or remove items.\par .
        /// </summary>
        internal static string analysisListWritableFixedSize {
            get {
                return ResourceManager.GetString("analysisListWritableFixedSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list is writable and can change in size, which allows you to add, change, and remove list items through the view or a bound control.\par .
        /// </summary>
        internal static string analysisListWritableVariableSize {
            get {
                return ResourceManager.GetString("analysisListWritableVariableSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard\par\cf2\b Recommendations:\cf0\b0\par .
        /// </summary>
        internal static string analysisRecommendations {
            get {
                return ResourceManager.GetString("analysisRecommendations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360\f1 A recommended list type is BindingList&lt;T&gt;, where T is your list item type.  BindingList&lt;T&gt; implements both IBindingList and IRaiseItemChangedEvents.\par.
        /// </summary>
        internal static string analysisRecommendationsBindingListT {
            get {
                return ResourceManager.GetString("analysisRecommendationsBindingListT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 Implement IEditableObject for your list item type (\cf2 optional\cf0 ).\par.
        /// </summary>
        internal static string analysisRecommendationsIEditableObject {
            get {
                return ResourceManager.GetString("analysisRecommendationsIEditableObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 Implement INotifyPropertyChanged for your list item type (\cf1 important\cf0 ).\par.
        /// </summary>
        internal static string analysisRecommendationsINotifyPropertyChanged {
            get {
                return ResourceManager.GetString("analysisRecommendationsINotifyPropertyChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 Implement IRaiseItemChangedEvents for your list type (\cf1 important\cf0 ).\par.
        /// </summary>
        internal static string analysisRecommendationsIRaiseItemChangedEvents {
            get {
                return ResourceManager.GetString("analysisRecommendationsIRaiseItemChangedEvents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to \pard{\pntext\f2\&apos;B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\&apos;B7}}\fi-360\li360 Implement IBindingList or provide a ListChanged event for your list type (\cf1 important\cf0 ).\par.
        /// </summary>
        internal static string analysisRecommendationsListChanged {
            get {
                return ResourceManager.GetString("analysisRecommendationsListChanged", resourceCulture);
            }
        }
    }
}
